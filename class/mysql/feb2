_HiStOrY_V2_
exit
show databases;
exit
show databases;
use practicedb;
show tables;
select * from students;
exit
use practicedb;
create table patients( pid integer, name varchar(30), dob date, toa datetime);
show tables;
desc patients;
insert into patients values(1, 'Harry', '1997-09-12', '2021-11-17 08:30:00');
insert into patients values(2, 'Potter', '1983-02-01', '2021-11-16 20:30:00');
select * from patients;
select adddate(dob, interval 30 day) from patients;
select curdate();
select current_date();
select current_date ;
select now();
insert into patients values(3, 'Tom', '1990-11-01', now());
select * from patients;
select year(dob) from patients;
select 3 + 8;
select 3 + null ;
select 3 = 3;
select 3 = 2;
select 3 = null;
select 3 is null;
select 3 is not null;
select * from patients;
create table students(id integer);
create table if not exists students(id integer);
select * from students;
alter table students add column marks integer ;
select * from students;
alter table students add column m1 integer after sname ;
select * from students;
alter table students drop column m1;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
select * from students;
rename table myclass to students;
show tables;
select * from students;
select * from myclass;
create table test(id integer, name char(30));
show tables;
drop table test;
show tables;
exit
use practicedb;
select * from students;
insert into students values(3,'Tom',32,'Mysql', 76);
select * from students;
insert into students values(4,'Greg', 29, null, 98);
select * from students;
insert into students(std_id, sname,age,marks) values(5,'Pete',36,88);
select * from students;
insert into students values(6,'Tara', 24, 'Data Science', 77),(7,'Lara', 32,'Analytics', 76),(8, 'Sam', 43,'Mysql', 87);
select * from students;
insert into students(std_id) values(9);
select * from students;
update students
set course='Analytics'
where std_id = 3;
update students set course='Analytics' where std_id = 3;
select * from students;
update students set course='Data Science' where course=null;
update students set course='Data Science' where course is null;
select * from students;
update students
set sname='George',
age=33,
marks= 54
where std_id=9;
update students set sname='George', age=33, marks= 54 where std_id=9;
select * from students;
update students set age = 22;
select * from students;
delete from students where sname='george';
select * from students;
delete from students where course='analytics';
select * from students;
delete from students where marks is null;
select * from students;
delete from students;
select * from students;
insert into students values(6,'Tara', 24, 'Data Science', 77),(7,'Lara', 32,'Analytics', 76),(8, 'Sam', 43,'Mysql', 87);
select * from students;
truncate students;
select * from students;
show create table students;
select * from myemp;
select * from myemp limit 5;
select emp_id, first_name, last_name, job_id from myemp;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select * from myemp limit 5;
select emp_id, last_name, salary, salary*0.15 from myemp limit 10;
select emp_id, last_name, year(hire_date), salary, salary*0.15 from myemp limit 10;
select emp_id, last_name, year(hire_date) as hire_year, salary, salary*0.15 as bonus from myemp limit 10;
select * from myemp limit 5;
select emp_id, last_name, year(hire_date) as hire_year, salary, round(salary*0.15,2) as bonus from myemp limit 10;
select emp_id empno, last_name, year(hire_date) as hire_year, salary, round(salary*0.15,2) as bonus from myemp limit 10;
select * from myemp limit 5;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from person;
select distinct fname, lname from person;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select distinct dep_id from myemp order by dep_id desc;
select * from myemp limit 20;
select * from myemp order by last_name;
select * from myemp order by hire_date desc;
select * from myemp limit 10;
select * from myemp where dep_id =60;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where dep_id <> 80;
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'j%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
exxit
;
exit;
use practicedb;
select * from myemp;
exit
use practicedb;
select * from myemp;
select * from myemp 
where salary > 8000
and dep_id = 80;
select * from myemp  where salary > 8000 and dep_id = 80;
select * from myemp  where salary > 8000 or dep_id = 80;
select * from myemp  where salary > 10000 or dep_id = 60;
select * from myemp where dep_id = 60 or dep_id=40 or dep_id=30;
select * from myemp where dep_id IN (60,40,30);
select hire_date, year(hire_date) from myemp limit 10;
select sum(salary) from myemp;
select avg(salary) from myemp;
select round(avg(salary),2) from myemp;
select count(*) from myemp;
select dep_id, round(avg(salary),2) from myemp group by dep_id;
select dep_id, mgr_id, round(avg(salary),2) from myemp group by dep_id, mgr_id;
select dep_id, round(avg(salary),2) from myemp group by dep_id;
select dep_id, round(avg(salary),2) from myemp group by dep_id having dep_id IN (20,60,80);
select * from movies;
select * from members;
select title, first_name, last_name from movies inner join members ON id = movieid;
select title, first_name, last_name from movies left join members ON id = movieid;
select title, ifnull(first_name,'-') as fname, ifnull(last_name,'-') as lname from movies left join members ON id = movieid;
select title, ifnull(first_name,'-') , ifnull(last_name,'-')  from movies left join members ON id = movieid;
select * from movies;
select * from members;
select title, first_name, last_name from movies right join members ON id = movieid;
select  first_name, last_name, title from movies right join members ON id = movieid;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate, drinks.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate 
from meals as m 
cross join drinks as d;
select m.mealname, d.drinkname, m.rate, d.rate  from meals as m  cross join drinks as d;
select m.mealname, d.drinkname, m.rate+d.rate as total  from meals as m  cross join drinks as d;
select m.mealname, d.drinkname, (m.rate+d.rate)*0.9 as total  from meals as m  cross join drinks as d;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname
from movies as mv 
left join members as mm
ON mv.id = mm.memid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join members as mm ON mv.id = mm.memid;
elect mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname
from movies as mv 
left join members as mm
ON mv.id = mm.memid
order by mv.id;
elect mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join members as mm ON mv.id = mm.memid order by mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname
from movies as mv 
left join members as mm
ON mv.id = mm.memid
order by mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join members as mm ON mv.id = mm.memid order by mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname
from movies as mv 
left join members as mm
ON mv.id = mm.movieid
order by mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join members as mm ON mv.id = mm.movieid order by mv.id;
select * from movies;
select * from members;
exit
use learndb;
show tables;
create table students(sid integer UNIQUE, 
sname varchar(30) NOT NULL,
age integer CHECK(age > 18),
course varchar(30));
create table students(sid integer UNIQUE,  sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(1,'Tom', 26, 'Mysql')
;
select * from students;
insert into students values(1,'Jon', 26, 'Mysql');
insert into students values(2,'Jon', 26, 'Mysql');
select * from students;
insert into students values(3,'Mary', 16,'Analytics');
insert into students values(3,'Mary', 26,'Analytics');
select * from students;
insert into students values(4, null, 33,'Data Science');
insert into students (sid, name, course) values( 5,'Larry', 'Mysql');
insert into students (sid, sname, course) values( 5,'Larry', 'Mysql');
select * from students;
insert into students (sid, age, course) values(6, 29, 'Analytics');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(6, 29, 'Analytics');
select * from students;
insert into students values(4, null, 33,'Data Science');
select * from authors;
desc authors;
select * from books;
desc authors;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(
authorid integer PRIMARY KEY,
name varchar(255)
);
create table authors( authorid integer PRIMARY KEY, name varchar(255) );
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid=8;
select * from authors;
select * from books;
create table mytab(
;
create table patients(
pid integer PRIMARY KEY AUTO_INCREMENT,
pname varchar(255).
age integer);
create table patients( pid integer PRIMARY KEY AUTO_INCREMENT, pname varchar(255). age integer);
create table patients( pid integer PRIMARY KEY AUTO_INCREMENT, pname varchar(255), age integer);
desc patients;
insert into patients (pname, age) values('Harry', 23);
select * from patients;
insert into patients (pname, age) values('Potter', 21);
select * from patients;
insert into patients (pname, age) values('Lara', 29),('Pete',36);
select * from patients;
delete from patients;
select * from patients;
insert into patients (pname, age) values('Lara', 29),('Pete',36);
select * from patients;
truncate patients;
select * from patients;
insert into patients (pname, age) values('Lara', 29),('Pete',36);
select * from patients;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id from myemp limit 10;
create view myview as select emp_id, first_name, last_name, job_id from myemp;
select * from myview;
show tables;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select * from myemp;
create view dep_60 as select * from myemp where dep_id = 60;
select * from dep_60;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name
from movies as mv 
left join 
members as mm
ON mv.id = mm.movieid
order by mv.id;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv  left join  members as mm ON mv.id = mm.movieid order by mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join  members as mm ON mv.id = mm.movieid order by mv.id;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join  members as mm ON mv.id = mm.movieid order by mv.id;
select * from rentals;
select * from authors;
create view aview as select * from authors where authorid < 12;
select * from aview;
insert into aview values(13,'Larry Collins');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 12 WITH CHECK OPTION;
insert into aview values(14,'Jai Deep');
insert into aview values(1,'Jai Deep');
select * from myemp;
exit
use learndb;
select * from authors;
select * from books;
call myproc();
call myproc(8);
call myproc(10);
call myproc(11);
call myproc(12);
call myproc(13);
select * from books;
call myproc(13);
call proc_if(6);
call proc_if(-6);
call proc_if(6);
call proc_if(-6);
call myproc_elseif(3);
call proc_elseif(3);
call proc_simpleloop();
call proc_simpleloop(5);
call proc_simpleloop(4);
call proc_simpleloop(11);
call proc_repeat(4);
call proc_while(2);
select * from xyz;
show tables;
desc payments;
insert into payments values(1, 800);
select * from payments;
insert into payments values(2, null);
call make_payment(2,300);
select * from payments;
call make_payment(2,null);
desc fraud;
select * from payments;
select * from fraud;
call make_payment(2,500);
select * from payments;
select * from fraud;
call make_payment(3, null);
select * from payments;
select * from fraud;
call make_payment(4,250);
select * from payments;
select * from fraud;
call make_payment(5, null);
select * from payments;
select * from fraud;
insert into payments values(9,null);
call make_payment(5, null);
select * from fraud;
call make_payment(7, null);
select * from fraud;
call make_payment(9, null);
select * from fraud;
call multi_ex(0);
call multi_ex(1);
call multi_ex(0);
call multi_ex(1);
call multi_ex(0);
call proc_signal(9);
call proc_signal(-9);
exit
use practicedb;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name efname, emp.last_name elname, mgr.first_name mfname, mgr.last_name mlname
from myemp as emp JOIN myemp as mgr
ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name efname, emp.last_name elname, mgr.first_name mfname, mgr.last_name mlname from myemp as emp JOIN myemp as mgr ON emp.mgr_id = mgr.emp_id;
select * from students;
desc students;
create table tt(id char);
insert into tt values('a');
select * from tt;
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
set autocommit = 0;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
set autocommit = 1;
select * from tt;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
start transaction;
insert into tt values('e');
insert into tt values('f');
insert into tt values('g');
select * from tt;
rollback;
select * from tt;
insert into tt values('g');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
rollback;
select * from tt;
exit
use practicedb;
select * from students;
desc students;
alter table students drop columns marks;
alter table students drop column marks;
desc students;
insert into students values(1,'Jon', 21,'Mysql');
select * from students;
insert into students values(1,'Tom', 21,'Mysql');
select * from students;
drop table students;
create table students(sid integer UNIQUE, sname varchar(30) NOT NULL, age integer check(age > 18) , course varchar(30));
desc students;
insert into students values(1,'Tom', 21,'Mysql');
select * from students;
insert into students values(1,'Jon', 21, 'Mysql');
insert into students values(2,'Jon', 21, 'Mysql');
select * from students;
insert into students values(3,'Mary', 16, 'Mysql');
insert into students values(3,'Mary', 26, 'Mysql');
select * from students;
insert into students values(4, null, 32,'Analytics');
insert into students (sid, age, course) values(5,32,'Analytics');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(5,32,'Analytics');
select * from students;
insert into students values(4, null, 32,'Analytics');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(30));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid)  REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid)  REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid=1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
create table mytab( id integer UNIQUE NOT NULL, name char(30));
desc mytable;
desc mytab;
create table incr(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc incr;
insert into incr (name, age) values('Harry', 56);
select * from incr;
insert into incr (name, age) values('Potter', 67);
select * from incr;
insert into incr (name, age) values('Lara', 34),('Kate', 23);
select * from incr;
delete from incr ;
select * from incr;
insert into incr (name, age) values('Potter', 67);
select * from incr;
insert into incr (name, age) values('Lara', 34),('Kate', 23);
select * from incr;
truncate incr;
select * from incr;
insert into incr (name, age) values('Potter', 67);
select * from incr;
exit
use practicedb;
select * from myemp limit 20;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary from myemp limit 10;
create view myview as select emp_id, first_name, last_name, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.id,  mv.title, ifnull(mm.first_name, '-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid order by mv.id;
create view rentals as select mv.id,  mv.title, ifnull(mm.first_name, '-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid order by mv.id;
select * from rentals;
show tables;
select * from myemp limit 10;
create view dep_60 as select * from myemp where dep_id = 60;
select * from dep_60;
select * from authors;
create view aview as select * from authors where authorid < 10;
select * from aview;
insert into aview values(11, 'Larry Collins');
select * from aview;
select * from authors;
insert into aview values(1,'Jai Deep');
select * from aview;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jai Deep');
call myproc();
call myproc(7);
call myproc(8);
call myproc(5);
call myproc(15);
select * from books;
call myproc(15);
call myproc(5);
call myproc(6);
call myproc(10);
call proc_if(8);
call proc_if(-8);
call proc_if(8);
call proc_if(-8);
call proc_elseif(4);
call proc_elseif(9);
call proc_elseif(3);
call proc_case(2);
exit
use practicedb;
call proc_simpleloop();
call proc_simpleloop(4);
call proc_simpleloop(7);
call proc_repeat(4);
call proc_while(4);
select * from tytyt;
call proc_excep1();
select * frompayments;
select * from payments;
desc payments;
insert into payments values(1,700);
select * from payments;
insert into payments values(2, null);
desc fraud;
call make_payment(2,300);
call make_payments(2,300);
select * from payments;
call make_payments(3, null);;
desc fraud;
call make_payments(3, null);
select * from fraud;
call make_payments(4,100);
select * from payments;
select * from fraud;
call make_payments(5,null);
select * from payments;
select * from fraud;
call make_payments(7, null);
select * from fraud;
call proc_cursor();
use practicedb;
select title, aid from books;
call proc_cursor();
select * from products limit 10;
desc orders;
select * from orders;
call orders();
select * from orders;
select * from products ;
select * from products limit 10;
call orders();
delete from orders;
call orders();
select * from orders;
select hire_date, year(hire_date) from myemp limit 10;
select first_name, last_name, concat(first_name, ' ', last_name) as name from myemp;
select first_name, last_name, concat(first_name, ' ', last_name) as name from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, experience(emp_id) from myemp limit 10;
select emp_id, first_name, last_name, experience(emp_id) from myemp  where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
update books set sales = sales + 6 where bookid=7;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid=6;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid=7;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid=6;
select * from books;
select * from book_sales;
exit
use learndb;
call proc_cursor();
select * from books;
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call place_orders();
select * from orders;
select hire_date, year(hire_date) from myemp limit 10;
select hire_date, year(hire_date), month(hire_date) from myemp limit 10;
select emp_id, first_name, last_name, experience(emp_id) from myemp;
select hire_date, year(hire_date) from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 3 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 6;
select * from book_sales;
select * from books;
show tables;
desc accounts;
select * from accounts;
desc transactions;
select * from transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
select * from books;
SELECT * FROM books 
      WHERE aid = 2
;
SELECT * FROM books        WHERE aid = 2;
SELECT * FROM books        WHERE aid = 7;
create table myt (id integer , name char(30));
desc myt;
create index myidx on myt(id);
show indexes from myt;
exit
use practicedb;
show create table students;
desc students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
select 8 from employees limit 10;
select * from employees limit 10;
select * from employees where hire_date > '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date > '2000-01-01';
show indexes from employees;
use practicedb;
select first_name, last_name, salary from myemp
;
select first_name, last_name, salary, dep_id 
from myemp e
where salary > (select avg(salary) from myemp
y
;
select first_name, last_name, salary, dep_id  from myemp e where salary > (select avg(salary) from myemp y;
select first_name, last_name, salary, dep_id 
from myemp e
where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name, last_name, salary, dep_id  from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name, last_name, salary, dep_id  from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id) order by dep_id, salary;
select avg(salary) from myemp group by dep_id;
show tables;
desc accounts;
select * from accounts;
desc transactions;
select * from transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
select * from books where aid = 5;
select * from students;
use analytics;
select * from employees;
select * from offices;
select addressline1, country ,lastname from employees inner join offices on employee.officecode = offices.officecode;
select addressline1, country ,lastname from employees inner join offices on employees.officecode = offices.officecode;
select addressline1, country ,lastname from employees inner join offices on employees.officecode = offices.officecode where country='USA';
select addressline1, country ,lastname from employees where officecode in (select officecode from offices where country='usa');
select lastname from employees where officecode in (select officecode from offices where country='usa');
use practicedb;
select avg(salary) from myemp;
select * from myemp where salary > (select avg(salary) from myemp);
select emp_id, first_name, last_name, dep_id, salary
from myemp e
where salary > (selet avg(salary) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id, salary from myemp e where salary > (selet avg(salary) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id, salary
from myemp e
where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id, salary from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id, salary from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id) order by dep_id;
select avg(salary), dep_id from myemp group by dep_id;
select avg(salary), dep_id from myemp group by dep_id order by dep_id;
use analytics;
select *  from employees;
select * from offices;
select firstname, last_name , country from employees inner join offices on employees.officecode = offices.officecode where country 'usa';
select firstname, last_name , country from employees inner join offices on employees.officecode = offices.officecode where country ='usa';
select firstname, lastname , country from employees inner join offices on employees.officecode = offices.officecode where country ='usa';
select firstname, lastname from employees where officecode IN (select officecode from offices where country='usa');
exit
show databases;
create database mydb;
show databases;
exit
use practicedb;
select * from students;
create table patients(pid integer, pname varchar(255), dob date, toa datetime);
desc patients;
insert into patients values(1, 'Harry', '1997-04-12', '2021-12-21 08:30:00');
select * from patients;
insert into patients values(2,'Potter', '1990-07-11', '2021-12-21 20:30:00');
select * from patients;
select year(dob) from patients;
select month(dob) from patients;
select now();
insert into patients values(3, 'George', '1987-09-13', now() );
select * from patients;
select current_date;
select current_time;
select * from patients;
select * from students;
insert into students values(3,'Jon', null, 'Analytics');
select * from students;
select 2 + 3;
select 576*890;
select 2 + null ;
select 2 > 3;
select 2 < 3;
select 2 = 2;
select 2 = null;
select 2 is null;
select 2 is not null;
select * from students;
select * from students where age = null;
select * from students where age is null;
select * from students where age is not null;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid student_id char(5);
select * from students;
desc students;
alter table students modify column student_id integer;
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
select * from students;
rename table myclass to students;
show tables;
select * from students;
create table mytab(id integer, name char(10));
show tables;
drop table mytab;
show tables;
exit
use practicedb;
select * from students;
insert into students values(4, 'Sam', 'Data Science', 76);
insert into students values(5,'Elise', null, 67);
select * from students;
insert into students(student_id, sname, marks) values(6,'Lara',77);
select * from students;
insert into students values(7,'Harry', 'Analytics', 89),(8,'Potter','Magic',88),(9,'Pete','Cooking',76);
select * from students;
set sql_safe_updates = 0;
update students set sname = 'Jonathan' where student_id=3;
select * from students;
update students set marks = 0 where course = null;
select * from students;
update students set marks = 0 where course is null;
select * from students;
update students set marks=0 where marks is null;
select * from students;
update students
set sname='Thomas',
marks = 100
where student_id = 1;
update students set sname='Thomas', marks = 100 where student_id = 1;
select * from students;
update students set course = 'Analytics';
select * from students;
delete from students where student_id = 5;
select * from students;
delete from students where marks = 0;
select * from students;
delete from students;
select * from students;
insert into students values(7,'Harry', 'Analytics', 89),(8,'Potter','Magic',88),(9,'Pete','Cooking',76);
select * from students;
truncate students;
select * from students;
select * from myemp;
select * from myemp limit 5;
select emp_id, last_name, job_id, salary from myemp;
select emp_id, last_name, job_id, salary from myemp limit 10;
select * from myemp limit 5;
select emp_id, last_name, job_id, salary from myemp limit 10;
select emp_id, last_name, job_id, salary, salary*0.15 from myemp limit 10;
select emp_id, last_name, job_id, salary, salary*0.15 as bonus from myemp limit 10;
select emp_id, last_name, job_id as role, salary, salary*0.15 as bonus from myemp limit 10;
select * from myemp limit 5;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id, mgr_id  from myemp;
select * from persons;
select * from person;
select distinct fname from person;
select distinct lname from person;
select distinct fname,lname from person;
select * from person;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select distinct dep_id from myemp order by dep_id desc;
select distinct dep_id from myemp order by dep_id asc;
select * from myemp limit 20;
select * from myemp order by last_name;
select * from myemp order by hire_date;
select * from myemp order by hire_date desc;
select * from myemp order by dep_id, mgr_id;
select emp_id, first_name, last_name, dep_id, mgr_id from myemp order by dep_id, mgr_id;
exit
use practicedb;
create table st (sid integer, name char(30) , course char(30), marks integer);
insert into st select * from students;
select * from st;
select * from students;
insert into students values(7,'Harry', 'Analytics', 89),(8,'Potter','Magic',88),(9,'Pete','Cooking',76);
insert into st select * from students;
select * from students;
drop table st;
select * from myemp limit 10;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary < 2500;
select * from myemp where emp_id%2=2;
select * from myemp where emp_id%2=0;
select * from myemp where emp_id%2 != 0;
select * from students;
insert into students values(10,'Jon', null, 66);
select * from students;
select * from students where course is null;
select * from students where course= null;
select * from students where course is not null;
select * from myemp where salary > 10000 and dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 60;
select * from myemp where dep_id = 60;
select * from myemp where salary > 10000 ;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id = 20;
select * from myemp where dep_id IN (20,40,60);
select * from myemp where salary between 10000 and 14000;
select * from myemp where hire_date > 2018;
select * from myemp where year(hire_date) > 2018;
select * from myemp where hire_date > '2018-12-31';
select month(hire_date) from myemp;
select * from myemp where the month(hire_date) = 8;
select * from myemp where month(hire_date) = 8;
select * from patients;
select date(toa) from patients;
select dayofmonth(toa) from patients;
select dayofmonth(dob) from patients;
select dob, dayofmonth(dob) from patients;
select adddate(dob, interval 20 day) , dob from patients;
select adddate(dob, interval 20 day) new_dob, dob from patients;
select monthname(dob) from patients;
select * from myemp limit 10;
select concat(first_name, last_name) as name from myemp limit 10;
select concat(first_name, ' ',last_name) as name from myemp limit 10;
select min(salary) from myemp;
select max(salary) from myemp;
select count(*) from myemp;
select avg(salary), stddev(salary) from myemp;
select round(avg(salary),2), round(stddev(salary),2) from myemp;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, round(avg(salary)) from myemp group by dep_id;
select dep_id, round(avg(salary)) from myemp group by dep_id order by dep_id;
select dep_id, mgr_id, round(avg(salary)) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id, round(avg(salary)) from myemp group by dep_id order by dep_id;
select dep_id, round(avg(salary)) from myemp group by dep_id having dep_id = 50;
select dep_id, round(avg(salary)) from myemp group by dep_id having dep_id in (30,50,80);
select * from movies;
select * from members;
select id, title, first_name, last_name from movies inner join members on id = movieid;
select * from movies;
select * from members;
select id, title, first_name, last_name from movies left join members on id = movieid order by id;
select id, title, ifnull(first_name,'-') as fname, ifnull( last_name,'-') as lname from movies left join members on id = movieid order by id;
select id, title, first_name, last_name from movies right join members on id = movieid ;
select first_name, last_name, id, title from movies right join members on id = movieid ;
create table test(id integer, name char(40));
exit
use practicedb;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname , rate from meals cross join drinks;
select mealname, drinkname , meals.rate, drinks.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select * from movies;
select * from members;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id order by emp.emp_id;
drop table students;
create table students(sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(1,'Tom', 23,'Mysql');
select * from students;
insert into students values(1,'Jon', 23,'Mysql');
insert into students values(2,'Jon', 23,'Mysql');
select * from students;
insert into students values(3,'Lara', 15, 'Analytics');
insert into students values(3,'Lara', 19, 'Analytics');
select * from students;
insert into students values(4, null, 25, 'Data Science');
insert into students (sid, age, course) values(5,21, 'Mysql');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(5,21, 'Mysql');
select * from students;
insert into students values(4, null, 25, 'Data Science');
insert into students values(4, Pete, 15, 'Data Science');
insert into students values(4, 'Pete', 15, 'Data Science');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors (authorid integer PRIMARY KEY, name varchar(255));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
desc books;
select * from authors;
desc books;
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update students set authorid = 80 where authorid = 8;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
show create table students;
show create table books;
exit
use practicedb;
select * from students;
insert into students values(6,'Jim', 34,'Mysql');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Tim', 45,'Analytics');
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(7,'Tim', 45,'Analytics');
select * from students;
rollback;
select * from students;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
show tables;
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc mytab;
insert into mytab (name, age) values ('Harry', 34);
select * from mytab;
insert into mytab (name, age) values ('Potter', 36);
select * from mytab;
insert into mytab (name, age) values ('Pete', 38),('Dan',23),('Lily', 27);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values ('Pete', 38),('Dan',23),('Lily', 27);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values ('Pete', 38),('Dan',23),('Lily', 27);
select * from mytab;
insert into mytab (5,'Jon', 67);
insert into mytab values(5,'Jon', 67);
select * from mytab;
insert into mytab (name, age) values ('Tom', 22);
select * from mytab;
select * from patients;
insert into patients values(4,'Tom', '1976-09-19', now());
select * from patients;
create table patients2(pid integer, pname varchar(255), dob date, toa datetime);
select * from patients2;
insert into patients2 as select * from patients;
insert into patients2 select * from patients;
select * from patients2;
create table patients3 as select * from patients;
select * from patients;
insert into patients2 (pid, name,toa) select * from patients;
insert into patients2 (pid, pname,toa) select pid,pname,toa from patients;
select * from patients2;
exit
use practicedb;
select * from myemp limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
create view myview as select first_name, last_name, job_id, salary from myemp ;
select * from myview limit 10;
select * from movies;
select * from members;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid order by mv.id;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid order by mv.id;
select * from rentals;
select * from myemp limit 20;
create view dep_60 as select * from myemp where dep_id = 60;
select * from dep_60;
show tables;
select * from authors;
 create view aview as select * from authors where authorid < 10;
select 8 from aview;
select * from aview;
select * from authors;
select * from aview;
insert into aview values(11,'Larry Collins');
select * from aview;
select * from authors;
drop view aview;
 create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'BRIAN WEISS');
insert into aview values(1,'BRIAN WEISS');
select * from aview;
select * from authors;
show create table students;
show indexes from authors;
desc students;
show indexes from students;
use employees;
drop index hidx on employees;
select count(*) from employees;
select 8 from employees limit 10;
select * from employees limit 10;
select * from employees where hire_date>'2000-01-01';
create index hidx on employee(hire_date);
create index hidx on employees(hire_date);
select * from employees where hire_date>'2000-01-01';
exit
use practicedb;
select * from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
call myproc();
call myproc(5);
call myproc(6);
call myproc(7);
call proc_if(9);
call proc_if(-9);
call proc_if(9);
call proc_if(0);
call proc_if(3);
call proc_if(5);
call proc_if(0);
call proc_simpleloop();
call proc_simpleloop(9);
call proc_simpleloop(3);
call proc_simpleloop(2);
call proc_simpleloop(3);
call proc_simpleloop(5);
call proc_repeat(5);
call proc_while(2);
call proc_while(3);
call proc_while(4);
call proc_while(5);
exit
use practicedb;
select * from studentss;
call proc_except1();
select * from payments;
desc payments;
insert into payments values(1,null);
desc fraud;
create table penalty(id integer primary key, client_id integer, amount integer, description varchar(255));
select * from fraud;
insert into payments values(1,100);
select * from payments;
select * from fraud;
call make_payment(2,300);
call make_payment(3,null);
select * from payments;
select * from fraud;
call make_payment(4,null);
select * from payments;
select * from fraud;
insert into payments values(1,null);
alter table fraud add column pay_amt integer after client_id;
select * from fraud;
update fraud set pay_amt = 100 where pay_amt is null;
alter table fraud drop column pay_amt;
select * fraud;
select * from fraud;
call proc_signal(9);
call proc_signal(-9);
call proc_cursor1();
SELECT * from fraud;
desc penalty;
exit
use practicedb;
select * from fraud;
desc penalty;
alter table penalty modify column id primary key auto_increment;
alter table penalty modify column id integer primary key auto_increment;
alter table penalty drop column id;
desc penalty;
select * from penalty;
call proc_cursor();
select * from penalty;
select * from fraud;
select * from penalty;
select * from products limit 5;
desc orders;
select count(*) from products;
call order_items();
select * from orders;
select * from products limit 20;
select * from products where pcode = 'S12_1099';
select hire_date, year(hire_date) from myemp;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, experience(emp_id) from myemp limit 15;
select emp_id, first_name, last_name, experience(emp_id) where experience(emp_id) < 10;
select emp_id, first_name, last_name, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 2 where bookid = 5;
select * from books;
desc book_sales;
select * from books;
select * from book_sales;;
update books set sales = sales + 6 where bookid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 7;
select * from books;
select * from book_sales;
exit
use practicedb;
select * from employees;
select * from offices;
show tables;
desc accounts;
select * from accounts;
desc transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
SELECT * FROM books 
      WHERE aid = 5;
SELECT * FROM books        WHERE aid = 5;
mysql> select * from myemp t1 where salary > (select avg(salary) from myemp t2 group by dep_id having t1.dep_id = t2.dep_id)
;
select * from myemp t1 where salary > (select avg(salary) from myemp t2 group by dep_id having t1.dep_id = t2.dep_id);
select * from myemp where salary = (select max(salary) from myemp);
select * from employees;
select * from offices;
select * from employees where officecode in ( select officecode from offices where country='usa');
select * from myemp limit 10;
select * from myemp t1 where salary > (select avg(salary) from myemp t2 group by dep_id having t2.dep_id = t1.dep_id);
select avg(sal) from myemp group by dep_id;
select avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
exit
select hire_date, year(hire_date) from myemp limit 10;
use practicedb;
select hire_date, year(hire_date) from myemp limit 10;
use practicedb;
select * from myemp limit 15;
select dep_id, grp_id, * from myemp group by dep_id, mgr_id ;
select dep_id, grp_id from myemp group by dep_id, mgr_id ;
select dep_id, mgr_id, * from myemp group by dep_id, mgr_id ;
select dep_id, mgr_id from myemp group by dep_id, mgr_id ;
show databases;
use practicedb;
show tables;
select * from tables;
select * from students;
create table customers(
Member_idintger,
Order_idinteger,
Order_datedate,
Categoryvarchar(255),
Product_namevarchar(255),
Sales integer);
create table customers( Member_idintger, Order_idinteger, Order_datedate, Categoryvarchar(255), Product_namevarchar(255), Sales integer);
create table customers(
Member_id intger,
Order_id integer,
Order_date date,
Category varchar(255),
Product_name varchar(255),
Sales integer);
create table customers( Member_id intger, Order_id integer, Order_date date, Category varchar(255), Product_name varchar(255), Sales integer);
create table customers(
Member_id integer,
Order_id integer,
Order_date date,
Category varchar(255),
Product_name varchar(255),
Sales integer);
create table customers( Member_id integer, Order_id integer, Order_date date, Category varchar(255), Product_name varchar(255), Sales integer);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5),
(20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce"21.6),
(20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g"8),
(20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g"24.3),
(20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce"14.05),
(20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce"24.46),
(20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g"11.35),
(20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder"25),
(20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)"16.5),
(20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni"13.3),
(20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains"18.9),
(20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)"20.99);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5), (20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce"21.6), (20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g"8), (20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g"24.3), (20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce"14.05), (20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce"24.46), (20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g"11.35), (20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder"25), (20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)"16.5), (20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni"13.3), (20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains"18.9), (20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)"20.99);
exit
drop database practicedb;
exit
use practicedb;
create table customers(
Member_id integer,
Order_id integer,
Order_date date,
Category varchar(255),
Product_name varchar(255),
Sales integer);
create table customers( Member_id integer, Order_id integer, Order_date date, Category varchar(255), Product_name varchar(255), Sales integer);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5),
(20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6),
(20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8),
(20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3),
(20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce"14.05),
(20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce"24.46),
(20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g"11.35),
(20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder"25),
(20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)"16.5),
(20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni"13.3),
(20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains"18.9),
(20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)"20.99);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5), (20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6), (20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8), (20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3), (20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce"14.05), (20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce"24.46), (20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g"11.35), (20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder"25), (20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)"16.5), (20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni"13.3), (20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains"18.9), (20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)"20.99);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5),
(20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6),
(20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8),
(20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3),
(20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce",14.05),
(20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce",24.46),
(20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g",11.35),
(20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder",25),
(20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)",16.5),
(20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni",13.3),
(20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains",18.9),
(20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)",20.99);
insert into customers values(20210211,100105,'2021-02-11''A''Steve & Leif Garlic Powder',10.5), (20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6), (20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8), (20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3), (20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce",14.05), (20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce",24.46), (20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g",11.35), (20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder",25), (20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)",16.5), (20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni",13.3), (20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains",18.9), (20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)",20.99);
insert into customers values(20210211,100105,'2021-02-11','A','Steve & Leif Garlic Powder',10.5),
(20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6),
(20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8),
(20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3),
(20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce",14.05),
(20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce",24.46),
(20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g",11.35),
(20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder",25),
(20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)",16.5),
(20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni",13.3),
(20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains",18.9),
(20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)",20.99);
insert into customers values(20210211,100105,'2021-02-11','A','Steve & Leif Garlic Powder',10.5), (20211108,100106,'2021-01-08','C',"Sweet Baby Ray's Honey Chipotle BBQ Sauce",21.6), (20211028,100107,'2021-03-12','B',"Chamkar Damnak Kampot Red Pepper 100g",8), (20210211,100108,'2021-04-18','B',"Chamkar Damnak Kampot Black Pepper 100g",24.3), (20211028,100109,'2021-04-25','C',"Sweet Baby Ray's Sweet & Spicy BBQ Sauce",14.05), (20211108,100110,'2021-05-29','A',"Sweet Baby Ray's Original BBQ Sauce",24.46), (20210519,100111,'2021-06-24','B',"Chamkar Damnak Kampot White Pepper 100g",11.35), (20210211,100112,'2021-07-19','C',"Steve & Leif Onion Powder",25), (20211215,100113,'2021-08-21','B',"Satisfyer - Royal One Ring App-Controlled Bluetooth Cock Ring \134(Blue\134)",16.5), (20210519,100114,'2021-10-15','A',"Alce Nero Organic Macaroni",13.3), (20211108,100115,'2021-09-09','C',"QUAKER Super Herbs and Cereals Beverages No Sugar 16 Grains",18.9), (20210211,100116,'2021-11-02','A',"Oral-B Kids Frozen Bundle Giftpack \134(Electric Toothbrush 1 count + Electric Toothbrush Heads 3 count + Toothpaste 92 g\134)",20.99);
select * from customers;
create table employees (
Employee_IDinteger, 
First_Namevarchar(255) , 
Last_Namevarchar(255),
Joining_Date date,
Salarydecimal,
Manager_IDinteger, 
Department_IDinteger);
create table employees ( Employee_IDinteger,  First_Namevarchar(255) ,  Last_Namevarchar(255), Joining_Date date, Salarydecimal, Manager_IDinteger,  Department_IDinteger);
create table employees (
Employee_ID integer, 
First_Name varchar(255) , 
Last_Name varchar(255),
Joining_Date date,
Salary decimal,
Manager_ID integer, 
Department_ID integer);
create table employees ( Employee_ID integer,  First_Name varchar(255) ,  Last_Name varchar(255), Joining_Date date, Salary decimal, Manager_ID integer,  Department_ID integer);
create table departments(
Department_ID integer,
Department_Name varchar(255),
Manager_ID intger,
Location_ID integer
);
create table departments( Department_ID integer, Department_Name varchar(255), Manager_ID intger, Location_ID integer );
create table departments(
Department_ID integer,
Department_Name varchar(255),
Manager_ID integer,
Location_ID integer
);
create table departments( Department_ID integer, Department_Name varchar(255), Manager_ID integer, Location_ID integer );
create table locations(
Location_ID integer,
Location_City varchar(255),
Location_State varchar(255),
Location_Country varchar(255)
);
create table locations( Location_ID integer, Location_City varchar(255), Location_State varchar(255), Location_Country varchar(255) );
Insert into employees values(100, 'Jon', 'Hamm','2021-07-19',2300, 11, 10),
(200, 'Jon', 'Snow','2021-08-11',2700, 11, 10),
(300, 'Tom', 'Hanks','2021-03-01',12300, 12, 20),
(100, 'Tom', 'Cruise','2021-11-09',5400, 12, 20);
Insert into employees values(100, 'Jon', 'Hamm','2021-07-19',2300, 11, 10), (200, 'Jon', 'Snow','2021-08-11',2700, 11, 10), (300, 'Tom', 'Hanks','2021-03-01',12300, 12, 20), (100, 'Tom', 'Cruise','2021-11-09',5400, 12, 20);
select * from employees;
Insert into departments values(10,'Statistics', 10, 1),(20,'Mathematics', 11, 2);
select * from departments;
Insert into locations values(1, 'Bangalore', 'Karnataka','India'),(2,'Chennai','TN','India');
select * from locations;
SELECT First_Name, Last_Name, Locations.city FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID JOIN Location on Locations.Location_ID=Departments.Location_ID where Location_city = Karnataka;
SELECT First_Name, Last_Name, Locations.city FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID JOIN Locations on Locations.Location_ID=Departments.Location_ID where Location_city = Karnataka;
SELECT First_Name, Last_Name, Location_city FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID JOIN Locations on Locations.Location_ID=Departments.Location_ID where Location_city = Karnataka;
SELECT First_Name, Last_Name, Location_city 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
where Location_city = 'Karnataka';
SELECT First_Name, Last_Name, Location_city  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  where Location_city = 'Karnataka';
SELECT First_Name, Last_Name, Location_city 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
where Location_city = 'Karnataka';
SELECT First_Name, Last_Name, Location_city  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  where Location_city = 'Karnataka';
SELECT First_Name, Last_Name, Location_city 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
where Location_state = 'Karnataka';
SELECT First_Name, Last_Name, Location_city  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  where Location_state = 'Karnataka';
exit
use practicedb;
select * from students;
alter table students add column marks integer after sname;
select * from students;
alter table students change column sid std_id integer;
select * from students;
alter table students drop column age;
select * from students;
desc students;
alter table students modify column sname char(20);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
select * from students;
rename table myclass to students;
show tables;
select * from students;
select * from myclass;
select * from students;
select sname, marks from students;
create table mytab(id integer, name char(10));
show tables;
drop table mytab;
show tables;
select sname, marks from students;
select * from students;
insert into students vlaues(300,'Pete', 55,'Mysql');
insert into students values(300,'Pete', 55,'Mysql');
select * from students;
insert into students values(400,'Elise',78,null);
insert into students (std_id, sname, marks) values(500,'Tom',78);
select * from students;
insert into students values(600,'Tim',66,'Mysql'),(700,'Jim',45,'Analytics'),(800,'John',98,'Magic');
select * from students;
update students set sname = 'Jonathan' where std_id = 100;
select * from students;
update students set sname = 'Tom' where std_id = 600;
select * from students;
update students set marks = 80 where sname='elise';
select * from students;
update students set marks = 0 where course = null;
update students set marks = 0 where course is null;
select * from students;
update students set marks = 50 where marks is null;
select * from students;
update students
set sname = 'Peter',
course = 'Analytics'
where std_id = 300;
update students set sname = 'Peter', course = 'Analytics' where std_id = 300;
select * from students;
update students set course='Data Science';
select * from students;
delete from students where std_id=800;
select * from students;
delete from students where sname = 'tom';
select * from students;
delete from students ;
select * from students;
exit
use practicedb;
select * from employees;
delet from employees where employee_id >= 1000;
delete from employees where employee_id >= 1000;
select * from employees;
select * from employees where first_name in ('Jon','Tom');
delete * from employees where first_name in ('Jon','Tom');
delete from employees where first_name in ('Jon','Tom');
select * from employees;
select * from departments;
delete from departments where department_name in ('statistics','mathematics');
select * from departments;
select * from customers;
SELECT Cust_First_Name, Cust_Last_Name, Cust_Suffix FROM Customers where Cust_Suffix is NULL;
SELECT First_Name, Last_Name, Cust_Suffix FROM Customers where Cust_Suffix is NULL;
SELECT First_Name, Last_Name, Location_city 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
where Location_state = 'Karnataka';
SELECT First_Name, Last_Name, Location_city  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  where Location_state = 'Karnataka';
select * from locations;
delete from locations where location_id < 1000;
select * from locations;
SELECT First_Name, Last_Name, Locations FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID JOIN Location on Locations.Location_ID=Departments.Location_ID SELECT LOCATION_CITY where Location_state = Karnataka;
SELECT concat(First_Name, Last_Name) , Location_state FROM Employees 
JOIN Departments ON Employees.Department_ID=Departments.Department.ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
WHERE  Location_state = 'Karnataka';
SELECT concat(First_Name, Last_Name) , Location_state FROM Employees  JOIN Departments ON Employees.Department_ID=Departments.Department.ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  WHERE  Location_state = 'Karnataka';
SELECT concat(First_Name, Last_Name) , Location_state FROM Employees 
JOIN Departments ON Employees.Department_ID=Departments.Department_ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
WHERE  Location_state = 'Karnataka';
SELECT concat(First_Name, Last_Name) , Location_state FROM Employees  JOIN Departments ON Employees.Department_ID=Departments.Department_ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  WHERE  Location_state = 'Karnataka';
select * from employees;
select * from employees limit 5;
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.employee_joining_date), emp.salary, emp.manager_ID, concat (mgr.first name , mgr.last name)
FROM Employees emp JOIN employees mgr ON emp.mgr_id = mgr.emp_id; 
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.employee_joining_date), emp.salary, emp.manager_ID, concat (mgr.first name , mgr.last name) FROM Employees emp JOIN employees mgr ON emp.mgr_id = mgr.emp_id;
select * from employees limit 5;
ELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first name , mgr.last name)
FROM Employees emp JOIN employees mgr 
ON emp.mgr_id = mgr.emp_id; 
ELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first name , mgr.last name) FROM Employees emp JOIN employees mgr  ON emp.mgr_id = mgr.emp_id;
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first_name , mgr.last_name)
FROM Employees emp JOIN employees mgr 
ON emp.mgr_id = mgr.emp_id; 
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first_name , mgr.last_name) FROM Employees emp JOIN employees mgr  ON emp.mgr_id = mgr.emp_id;
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first_name , mgr.last_name)
FROM Employees emp JOIN employees mgr 
ON emp.manager_id = mgr.employee_id; 
SELECT emp.Employee_ID, concat(emp.First_Name, emp.Last_Name ) Employee_Name, month(emp.joining_date), emp.salary, emp.manager_ID, concat (mgr.first_name , mgr.last_name) FROM Employees emp JOIN employees mgr  ON emp.manager_id = mgr.employee_id;
SELECT department_id, department_name, location_city, location_state 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
group by department_id;
SELECT department_id, department_name, location_city, location_state  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department_ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  group by department_id;
SELECT dep.department_id, dep.department_name, loc.location_city, loc.location_state 
FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID 
JOIN Locations loc on loc.Location_ID=dep.Location_ID 
group by dep.department_id;
SELECT dep.department_id, dep.department_name, loc.location_city, loc.location_state  FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID  JOIN Locations loc on loc.Location_ID=dep.Location_ID  group by dep.department_id;
SELECT dep.department_id, loc.location_city, loc.location_state 
FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID 
JOIN Locations loc on loc.Location_ID=dep.Location_ID 
group by dep.department_id;
SELECT dep.department_id, loc.location_city, loc.location_state  FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID  JOIN Locations loc on loc.Location_ID=dep.Location_ID  group by dep.department_id;
SELECT dep.department_id, loc.location_city, loc.location_state 
FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID 
JOIN Locations loc on loc.Location_ID=dep.Location_ID 
group by dep.department_id, loc.location_city
;
SELECT dep.department_id, loc.location_city, loc.location_state  FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID  JOIN Locations loc on loc.Location_ID=dep.Location_ID  group by dep.department_id, loc.location_city;
select department_id, department_name, count(*), avg(salary) from employees group by department_id
;
select department_id, count(*), avg(salary) from employees group by department_id;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from
select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id as dep,
join Locations loc on loc.Location_ID=dep.Location_ID ;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id as dep, join Locations loc on loc.Location_ID=dep.Location_ID;
SELECT dep.department_id, loc.location_city, loc.location_state 
FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID 
JOIN Locations loc on loc.Location_ID=dep.Location_ID 
group by dep.department_id, loc.location_city
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep,
join Locations loc on loc.Location_ID=dep.Location_ID ;
SELECT dep.department_id, loc.location_city, loc.location_state  FROM Employees emp JOIN Departments dep ON emp.Department_ID=dep.Department_ID  JOIN Locations loc on loc.Location_ID=dep.Location_ID  group by dep.department_id, loc.location_city   select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep, join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep,
join Locations loc on loc.Location_ID=dep.Location_ID ;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep, join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep
join Locations loc on loc.Location_ID=dep.Location_ID ;
select dep.department_id, crecs, asal, depart.department_id, depart.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep
join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, department_name count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep
join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, department_name count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, department_name, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep
join Locations loc on loc.Location_ID=dep.Location_ID;
select dep.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, department_name, count(*) as crecs, avg(salary) as asal from employees group by department_id) as dep join Locations loc on loc.Location_ID=dep.Location_ID;
select * from locations;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
join Locations loc on loc.Location_ID=dep.Location_ID
join departments dep on dep.location_id = loc.location_id;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp join Locations loc on loc.Location_ID=dep.Location_ID join departments dep on dep.location_id = loc.location_id;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
join Locations loc on loc.Location_ID=dep.Location_ID
join departments dep on dep.location_id = loc.location_id;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp join Locations loc on loc.Location_ID=dep.Location_ID join departments dep on dep.location_id = loc.location_id;
select * from departments;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
join Locations loc on loc.Location_ID=emp.Location_ID
join departments dep on dep.location_id = loc.location_id;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp join Locations loc on loc.Location_ID=emp.Location_ID join departments dep on dep.location_id = loc.location_id;
select * from locations;
SELECT Employee_ID,First_Name, Last_Name, Department_name, Employee_salary 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
Order by Employee_salary Desc;
SELECT Employee_ID,First_Name, Last_Name, Department_name, Employee_salary  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  Order by Employee_salary Desc;
SELECT Employee_ID,First_Name, Last_Name, Department_name, salary 
FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID 
JOIN Locations on Locations.Location_ID=Departments.Location_ID 
Order by salary Desc;
SELECT Employee_ID,First_Name, Last_Name, Department_name, salary  FROM Employees JOIN Departments ON Employees.Department_ID=Departments.Department.ID  JOIN Locations on Locations.Location_ID=Departments.Location_ID  Order by salary Desc;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
JOIN Locations loc on Loc.Location_ID=Departments.Location_ID 
JOIN departments as dep on dep.department_id = emp.department_id ;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp JOIN Locations loc on Loc.Location_ID=Departments.Location_ID  JOIN departments as dep on dep.department_id = emp.department_id;
select * from departments;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
JOIN departments as dep on dep.department_id = emp.department_id
JOIN Locations loc on Loc.Location_ID=Dep.Location_ID ;
select emp.department_id, crecs, asal, dep.department_id, dep.department_name, loc.location_state from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp JOIN departments as dep on dep.department_id = emp.department_id JOIN Locations loc on Loc.Location_ID=Dep.Location_ID;
select emp.department_id, dep.department_name, loc.location_country,loc.location_state, loc.location_city,  asal avg_sal ,crecs employee_count   
from
(select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp
JOIN departments as dep on dep.department_id = emp.department_id
JOIN Locations loc on Loc.Location_ID=Dep.Location_ID ;
select emp.department_id, dep.department_name, loc.location_country,loc.location_state, loc.location_city,  asal avg_sal ,crecs employee_count    from (select department_id, count(*) as crecs, avg(salary) as asal from employees group by department_id) as emp JOIN departments as dep on dep.department_id = emp.department_id JOIN Locations loc on Loc.Location_ID=Dep.Location_ID;
SELECT emp.department_id, dep.department_name, loc.location_country, loc.location_state, loc.location_city,  avg_sal , employee_count   
FROM
(SELECT department_id, count(*) as employee_count, avg(salary) as avg_sal FROM employees GROUP BY department_id) AS emp
JOIN departments AS dep on dep.department_id = emp.department_id
JOIN Locations AS loc on Loc.Location_ID=Dep.Location_ID ;
SELECT emp.department_id, dep.department_name, loc.location_country, loc.location_state, loc.location_city,  avg_sal , employee_count    FROM (SELECT department_id, count(*) as employee_count, avg(salary) as avg_sal FROM employees GROUP BY department_id) AS emp JOIN departments AS dep on dep.department_id = emp.department_id JOIN Locations AS loc on Loc.Location_ID=Dep.Location_ID;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select department_id, department_name, avg(salary) from departments group by department_id);
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select department_id, department_name, avg(salary) from departments group by department_id);
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select department_id, department_name, avg(salary) from departments group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select department_id, department_name, avg(salary) from departments group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select department_id, department_name, avg(salary) from departments join employees on department.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select department_id, department_name, avg(salary) from departments join employees on department.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select departments .department_id, department_name, avg(salary) from departments join employees on department.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select departments .department_id, department_name, avg(salary) from departments join employees on department.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select departments .department_id, department_name, avg(salary) from departments join employees on departments.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select departments .department_id, department_name, avg(salary) from departments join employees on departments.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal 
FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id, department_name) as t1;
Select t1.department_id , t1.department_name, t1.avg_sal  FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id, department_name) as t1;
Select t1.department_name, t1.avg_sal 
FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1;
Select t1.department_name, t1.avg_sal  FROM (select departments .department_id, department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1;
Select t1.department_name, t1.avg_sal 
FROM (select department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1;
Select t1.department_name, t1.avg_sal  FROM (select department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1;
Select t1.department_name, t1.avg_sal 
FROM (select department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1
Join employees on employees.department_id = t1.department_id;
Select t1.department_name, t1.avg_sal  FROM (select department_name, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_name) as t1 Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, ‘ ‘, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal 
FROM (select department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1
Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, ‘ ‘, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal  FROM (select department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1 Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal 
FROM (select department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1
Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal  FROM (select department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1 Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1
Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1 Join employees on employees.department_id = t1.department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1
Join employees on employees.department_id = t1.department_id
Where t1.avg_sal = (select max(avg_sal) from t1 );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, t1.avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1 Join employees on employees.department_id = t1.department_id Where t1.avg_sal = (select max(avg_sal) from t1 );
select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id;
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1
Join employees on employees.department_id = t1.department_id
Where avg_sal = (select max(avg_sal) from t1 );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id) as t1 Join employees on employees.department_id = t1.department_id Where avg_sal = (select max(avg_sal) from t1 );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1
Join employees on employees.department_id = t1.department_id
Where avg_sal = (select max(avg(salary)) from employees group by department_id );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1 Join employees on employees.department_id = t1.department_id Where avg_sal = (select max(avg(salary)) from employees group by department_id );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1
Join employees on employees.department_id = t1.department_id
Where avg_sal = max((select avg(salary) from employees group by department_id ));
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1 Join employees on employees.department_id = t1.department_id Where avg_sal = max((select avg(salary) from employees group by department_id ));
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal 
FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1
Join employees on employees.department_id = t1.department_id
Where avg_sal = (select max(avg_sal) from t1 group by department_id );
Select employees.employee_id, concat(employees.first_name, employees.last_name) as employee_name , employees.salary, t1.department_id, avg_sal  FROM (select departments.department_id, avg(salary) as avg_sal from departments join employees on departments.department_id = employees.department_id group by department_id ) as t1 Join employees on employees.department_id = t1.department_id Where avg_sal = (select max(avg_sal) from t1 group by department_id );
use practicedb;
select * from students;
insert into students values(600,'Tim',66,'Mysql'),(700,'Jim',45,'Analytics'),(800,'John',98,'Magic');
select * from students;
delete from students ;
select * from students;
insert into students values(600,'Tim',66,'Mysql'),(700,'Jim',45,'Analytics'),(800,'John',98,'Magic');
select * from students;
truncate students;
select * from students;
show create table students;
create table patients(pid integer, pname varchar(255), dob date, toa datetime);
desc patients;
insert into patients(100,'Harry', '1997-07-17', '2022-01-27 08:30:00');
insert into patients values(100,'Harry', '1997-07-17', '2022-01-27 08:30:00');
insert into patients values(200,'Potter', '2000-08-12', '2022-01-27 20:30:00');
select * from patients;
select year(dob) from patients;
select month(dob) from patients;
select adddate(dob, interval 31 day) from patients;
select adddate('2021-02-03', interval 30 day);
select curdate();
select curtime();
select now();
select * from patients;
insert into patients values(300,'Larry','1990-09-09', now());
select * from patients;
select monthname(dob) from patients;
show tables;
select * from myemp;
select * from myemp limit 10;
select first_name, last_name, job_id from myemp;
select first_name, last_name, job_id from myemp limit 10;
select * from myemp limit 10;
select first_name, last_name, job_id from myemp limit 10;
select first_name, last_name, salary, salary*0.15 from myemp limit 10;
select concat(first_name,' ', last_name), salary, salary*0.15 from myemp limit 10;
select concat(first_name,' ', last_name) as employee_name, salary, salary*0.15 as bonus from myemp limit 10;
exit
use anadb;
create table patients(pid integer, pname varchar(30), dob date, toa datetime);
desc patients;
insert into patients values(100, 'Harry', '1998-02-21', '2022-01-29 07:30:00');
insert into patients values(200, 'Potter', '2000-08-17', '2022-01-29 19:30:00');
select * from patients;
select now();
select curdate();
select curtime();
insert into patients values(300,'Larry', '1990-12-04', now() );
select * from patients;
select 4 + 5;
select 678*789;
select 4 + null;
select 4 = 5;
select 4 = 4;
select 4 = null;
select * from students;
insert into students values(300,'Jon', 34, null);
select * from students;
insert into students values(300,'Jon', 34, '');
select * from students;
select * from students where course='';
select * from students where course=null;
select * from students where course is null;
select 4 is null;
select * from students where course is not null;
exit
use practicedb;
show tables;
select * from myemp limit 10;
select emp_id, last_name, job_id from myemp limit 10;
select emp_id, last_name, job_id , salary , salary*0.2 ̦as bonus from myemp limit 10;
select emp_id, last_name, job_id , salary , salary*0.2 as bonus from myemp limit 10;
select * from myemp where emp_id = 200;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date > '2000-01-01';
select * from myemp where dep_id != 80;
select * from myemp where first_name like 'J%'; 
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like 'j____';
select * from myemp where salary between 10000 and 15000;
select * from myemp where salary > 8000 and dep_id = 80;
select * from myemp where salary > 10000 and dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 50;
select * from myemp where salary > 10000 or dep_id = 40;
select * from myemp where dep_id = 40 or dep_id = 60 or dep_id = 20;
select * from myemp where dep_id in (20,40,60);
select * from myemp where emp_id%2=0;
select * from myemp where emp_id%7=0;
select * from students;
select * from patients;
select len(pname) from patients;
select length(pname) from patients;
select * from patients;
select pname, year(dob) from patients;
select pname, dob, year(dob) from patients;
select pname, dob, month(dob) from patients;
select pname, dob, monthname(dob) from patients;
select year('2022-01-31');
select * from patients;
select adddate(dob, interval 30 day) from patients;
select dayname(dob) from patients;
select * from patients;
select left(pname,1) from patients;
select left(pname,2) from patients;
select first_name from myemp where left(ename,1) IN ('j','c','n');
select first_name from myemp where left(first_name,1) IN ('j','c','n');
select * from patients;
select length(pname) from patients;
select pname,length(pname) from patients;
select sum(salary) from myemp;
select avg(salary) from myemp;
select min(salary) from myemp;
select max(salary) from myemp;
select count(*) from myemp;
select count(*) from patients;
select round(avg(salary),2) from myemp
;
exit
use practicedb;
select max(salary) from myemp;
select * from myemp limit 5;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, round(avg(salary),2) avg_sal from myemp group by dep_id;
select mgr_id, max(salary) from myemp group by mgr_id;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id;
select mgr_id, max(salary) from myemp group by mgr_id;
select mgr_id, max(salary) from myemp group by mgr_id having mgr_id = 108;
select mgr_id, max(salary) from myemp group by mgr_id having mgr_id IN (100,101,103);
select * from myemp limit 20;
select * from myemp order by dep_id ;
select * from myemp order by dep_id,mgr_id ;
select dep_id, mgr_id order by dep_id, mgr_id;
select dep_id, mgr_id from myemp order by dep_id, mgr_id;
select * from myemp order by dep_id desc ;
select * from myemp order by hire_date desc;
select * from myemp order by last_name;
select dep_id, mgr_id from myemp order by dep_id desc, mgr_id;
select * from myemp order by last_name;
select * from myemp order by last_name desc;
select dep_id, mgr_id from myemp order by dep_id desc, mgr_id;
select dep_id, mgr_id from myemp order by dep_id desc, mgr_id desc;
select dep_id, mgr_id from myemp order by hire_date desc limit 1;
select * from myemp order by hire_date desc limit 1;
select * from myemp order by hire_date  limit 1;
select * from myemp limit 10;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select * from person;
select distinct fname,lname from person;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id , mgr_id;
select * from movies;
select * from members;
select id, title, first_name from movies join members on id = movieid;
select id, title, first_name from movies left join members on id = movieid;
select memid, first_name, last_name, id, title from members right join movies on id = movieid;
select memid, first_name, last_name, id, title from  movies right join members on id = movieid;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname , rate from meals cross join drinks;
select * from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate, drinks.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate+ drinks.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate+ drinks.rate as total from meals cross join drinks;
select mv.id, mv.title, mm.first_name, mm.last_name
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname ifnull(mm.last_name,'-') as lname
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname , ifnull(mm.last_name,'-') as lname
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname , ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
exit
use practicedb;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age > 18),
course varchar(30));
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(100, 'Tom', 23,'Mysql');
select * from students;
insert into students values(100, 'Jon', 23,'Mysql');
insert into students values(200, 'Jon', 23,'Mysql');
select * from students;
insert into students values(300, 'Pat', 16,'Analytics');
insert into students values(300, 'Pat', 19,'Analytics');
select * from students;
insert into students values(400,null, 34,'Magic');
insert into students (sid, age, course) values (500, 36,'Analytics');
desc students;
alter table students modify column sname varchsr(30) NOT NULL DEFAULT 'Smith';
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Smith';
desc students;
insert into students values(400,null, 34,'Magic');
insert into students (sid, age, course) values (500, 36,'Analytics');
select * from students;
select * from authors;
desc authors;
select * from books;
insert into books values(15,'My Book', 10);
delete from authors where authorid = 1;
drop table authors;
drop table books;
drop table authors;
create table authors (authorid integer PRIMARY KEY,  name varchar(30));
desc authors;
CREATE TABLE books(
bookid integer PRIMARY KEY,
Title varchar(255),
Authorid  integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE );
CREATE TABLE books( bookid integer PRIMARY KEY, Title varchar(255), Authorid  integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
desc books;
show create table books;
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 88 where authorid = 8;
select * from authors;
select * from books;
exit
use practicedb;
show tables;
create table mytab (id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc mytab;
insert into mytab (name, age) values('Tom', 34);
select * from mytab;
insert into mytab (name, age) values('Jon',56);
select * from mytab;
insert into mytab (name, age) values('Tim',32),('Jim',45);
select * from mytab;
alter table mytab auto_increment = 100;
insert into mytab (name, age) values('James', 77);
select * from mytab;
insert into mytab (name, age) values('Jones',17);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tim',32),('Jim',45);
select * from mytab;
truncate mytab;
insert into mytab (name, age) values('Tim',32),('Jim',45);
select * from mytab;
select * from myemp limit 5;
select sum(salary) from myemp where job_id='ad_vp';
select sum(salary) from myemp where job_id in ('ad_vp','It_prog');
select job_id, sum(salary) from myemp group by job_id having job_id in ('ad_vp','It_prog');
select * from students;
insert into students values(600,'Lara', 22,'Cooking');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(700, 'Clara', 12,'Dance');
insert into students values(700, 'Clara', 22,'Dance');
select * from students;
rollback;
select * from students;
insert into students values(700, 'Clara', 22,'Dance');
commit;
rollback;
select * from students;
set autocommit = 1;
create table tt(id char);
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
seelect * from tt;
select * from tt;
rollback;
select * from tt;
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('f');
rollback;
select * from tt;
show databases;
use employees;
drop index hdx from employees;
drop index hdx on employees;
show indexes on employees;
show indexes from employees;
drop index hidx on employees;
use practicedb;
show indexes from students;
desc students;
show create table students;
use employees;
select count(*) from employees;
select * from employees limit 5;
select * from employees where hire_date > '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date > '2000-01-01';
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
use practicedb;
select * from myemp limit 10;
select first_name , last_name, job_id from myemp limit 10;
create view myview as select first_name , last_name, job_id from myemp;
select * from myview limit 10;
select * from movies;
select * from members;
select mv.id, mv.title, ifnull(mm.first_name, '-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid; 
create view rentals as select mv.id, mv.title, ifnull(mm.first_name, '-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp limit 10;
create view dep_60 as select * from myemp where dep_id = 60;
select * from dep_60;
select * from authors;
create view aview as select * from authors where authorid < 10;
select * from aview;
insert into aview values(11,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jon Snow')
;
insert into aview values(1,'Jon Snow');
select * from aview;
exit
use anadb;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column marks;
select * from students;
alter table students add column marks integer default 0;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
alter table students change column std_id sid tinyint;
alter table students change column std_id sid float;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
alter table students rename to myclass;
show tables;
select * from students;
select * from myclass;
rename table myclass to students;
show tables;
select * from myclass;
select * from students;
select * from mytab;
show tables;
drop table mytab;
show tables;
select 8 from students;
select * from students;
insert into students values(400, 'Analytics', 'Pat', 56);
select * from students;
insert into students values(500,'Harry', Null, 67);
select * from students;
insert into students (sid, sname, marks) values(600,'Pete',88);
select * from students;
insert into students values(800,'Sam', 'Mysql', 66),(900,'Samantha','Analytics', 87),(1000,'Lara','Mysql',78);
select * from students;
insert into students (sid, sname, marks) values(700,'Peter',88);
select * from students;
update students set sname = 'Thomas' where sid = 100;
select * from students;
select * from students where course='';
update students set course = 'Data Science' where marks=0;
select * from students where course='';
select * from students ;
update students set course = 'Mysql' where course = null;
update students set course = 'Mysql' where course is null;
select * from students ;
update students set sname='Pat', course='Analytics' where sid = 400;
select * from students ;
update students set course = 'Mysql' ;
select * from students ;
delete from students where sid = 800;
select * from students ;
delete from students where marks= 0;
select * from students ;
delete from students;
select * from students ;
insert into students values(800,'Sam', 'Mysql', 66),(900,'Samantha','Analytics', 87),(1000,'Lara','Mysql',78);
select * from students;
truncate students;
select * from students;
show create table students;
select * from myemp;
select * from myemp limit 10;
select count(*) from myemp;
select * from myemp limit 10;
select first_name, last_name, job_id from myemp limit 10;
select first_name, last_name, salary, salary*0.2  from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus  from myemp limit 10;
select first_name as fname, last_name lname, salary, salary*0.2 as bonus  from myemp limit 10;
select first_name as fname, last_name lname, salary, salary*0.2 as bonus , salary+bonus from myemp limit 10;
select first_name as fname, last_name lname, salary, salary*0.2 as bonus , salary+salary*0.2 from myemp limit 10;
select * from myemp limit 10;
select first_name as fname, last_name as lname, salary, salary*0.2 as bonus, salary+salary*0.2 as total_salary from myemp;
select * from myemp limit 10;
select concat(first_name,' ',last_name), job_id, salary, salary*15 from myemp;
select concat(first_name,' ',last_name) as Name, job_id, salary, salary*15 as bonus from myemp;
select * from myemp limit 10;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id,mgr_id from myemp;
select * from person;
select distinct fname,lname from person;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select distinct dep_id from myemp order by dep_id asc;
select distinct dep_id from myemp order by dep_id desc;
select * from myemp;
select * from myemp order by dep_id;
select * from myemp order by last_name;
select * from myemp order by hire_date desc;
select * from myemp order by salary desc;
select * from myemp order by dep_id, mgr_id;
select dep_id,mgr_id from myemp order by dep_id, mgr_id;
select dep_id,mgr_id from myemp order by dep_id, salary;
select dep_id, salary from myemp order by dep_id, salary;
select dep_id, salary from myemp order by dep_id, salary desc;
select dep_id, salary from myemp order by dep_id desc, salary desc;
select * from myemp where dep_id = 60;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp
where HIRE_DATE >=2000-01-01;
select * from myemp where HIRE_DATE >=2000-01-01;
select * from myemp where hire_date >'2000-01-01';
select * from students;
select * from patients;
insert into patients values(400,'Peter',null, now());
select * from patients;
select * from patients where dob = null;
select * from patients where dob is null;
select * from patients where dob is not null;
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'J____';
select * from myemp where first_name like 'J___';
select * from myemp where emp_id % 2 =0;
select * from myemp where emp_id % 7 =0;
select * from myemp where dep_id = 80 and salary>8000;
select * from myemp where dep_id = 80 and salary>12000;
select * from myemp where dep_id = 60 or salary>12000;
select * from myemp where dep_id = 60 or dep_id = 70 or dep_id = 40;
select first_name, last_name, concat(first_name,' ', last_name) from myemp limit 10;
select * from patients;
select dob, adddate(dob, interval 31 day) from patients;
select *, adddate(dob, interval 31 day) from patients;
select *, adddate('2022-02-06', interval 31 day) ;
select adddate('2022-02-06', interval 31 day) ;
select adddate('2022-02-06', interval 31 day) as result;
select curdate();
select current_date();
select current_date;
select current_time;
select current_time();
select cur_time();
select curtime();
select now();
select * from patients;
insert into patients values(500,'Mary', '2001-09-07', now() );
select * from patients;
select dob, year(dob) from patients;
select dob, month(dob) from patients;
select dob, monthname(dob) from patients;
select dob, day(dob) from patients;
select dob, dayofweek(dob) from patients;
select dob, dayname(dob) from patients;
select pname, length(pname) from patients;
select pname, left(pname,1) from patients;
select first_name from myemp where left(first_name,1) IN ('h','j','l');
select pname, left(pname,1) from patients;
select count(*) from myemp;
select avg(salary) from myemp;
select sum(salary) from myemp;
select max(salary) from myemp;
select min(salary) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id having dep-id = 60;
select dep_id, max(salary) from myemp group by dep_id having dep_id = 60;
select dep_id, max(salary) from myemp group by dep_id where dep_id = 60;
select dep_id, max(salary) from myemp where dep_id = 60;
select dep_id, max(salary) from myemp where dep_id = 60 or dep_id = 80;
select dep_id, max(salary) from myemp where dep_id in(60, 80);
select dep_id, avg(salary) from myemp where dep_id in (60, 80);
select dep_id, sum(salary) from myemp where dep_id in (60, 80);
select sum(salary) from myemp where dep_id in (60, 80);
select dep_id, sum(salary) from myemp group by dep_id having dep_id in (60,80,30);
use practicedb;
select * from books;
call myproc();
call myproc(5);
call myproc(7);
select * from books;
call myproc(5);
call myproc(7);
call myproc(10);
call proc_if(9);
call proc_if(-9);
call proc_if(9);
call proc_if(-9);
call proc_if(5);
call proc_if(15);
call proc_simpleloop();
call proc_simpleloop(4);
call proc_simpleloop(7);
call proc_simpleloop(2);
call proc_repeat(4);
call proc_repeat(3);
call proc+while(6);
call proc_while(6);
select * from tttt;
exit
show tables;
use practicedb;
show tables;
select * from tryrt;
call proc_ex();
select * from payments;
desc payments;
insert into payments values(1,500);
select * from payments;
insert into payments values(2, null);
select * from fraud;
desc fraud;
call make_payment(2,350);
select * from payments;
call make_payment(3,null);
desc fraud;
call make_payment(3,null);
select * from payments;
select * from fraud;
call make_payment(4,275);
select * from payments;
select * from fraud;
select title from authors;
call proc_ex();
call proc_ex(1);
call proc_ex(2);
select * from hhhh;
call proc_signal(9);
call proc_signal(-9);
call proc_signal(9);
call proc_signal(-9);
call proc_cursor();
exit
call proc_cursor1();
use practicedb;
call proc_cursor1();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call proc_order();
call proc_orders();
select * from orders;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select first_name, last_name, experience(emp_id) from myemp limit 10;
select first_name, last_name, experience(emp_id) as experience from myemp limit 10;
select first_name, last_name, experience(emp_id) as experience from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
exit
use practicedb;
select * from products;
select first_name, last_name, salary from myemp e1 where salary > (select avg(salary) from myemp where dep_id = e1.dep_id);
select * from products p1 where mrp > (select avg(mrp) from products where productline = p1.productline);
select * from employees;
desc employees;
show tables;
select * from departments;
select * from locations;
use employees;
select * from employees limit 10;
use analytics;
select * from employees limit 10;
select * from offices;
select * from employees where office code in (select officecode from offices where country='usa');
select * from employees where office codein (select officecode from offices where country='usa');
select * from employees where officecode in (select officecode from offices where country='usa');
use practicedb;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 12;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 6;
select * from books;
select * from book_sales;
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
use analytics;
select * from employees;
select * from offices;
select * from employees limit 5;
select * from offices;
select officecode from offices where country='usa';
select * from employees where officecode IN (select officecode from offices where country='usa');
select * from employees where officecode NOT IN (select officecode from offices where country='usa');
use practicedb;
select * from myemp limit 15;
select * from products limit 20;
select * from myemp e1 where salary > (select avg(salary) from myemp where dep_id = e1.dep_id);
select * from products p1 where mrp > (select avg(mrp) from products where productline = p1.productline);
show tables;
desc accounts;
select * from accounts;
desc transactions;
select * from accounts;
select * frrom transactions;
select * from transactions;
select * from accounts;
select * from transactions;
SELECT * FROM books 
      WHERE authorid = 5;
SELECT * FROM books        WHERE authorid = 5;
exit
use anadb;
select * from movies;
select * from members;
select first_name, last_name , title from movies inner join members on movieid=id;
select id, title, first_name,last_name from movies left join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname , rate from meals cross join drinks;
select mealname, drinkname , meals.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname , meals.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select m.mealname, d.drinkname, m.rate+d.rate total_rate from meals as m cross join drinks as d;
select * from myemp limit 15;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.emp_id, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
select * from myemp limit 10;
select * from students;
desc students;
insert into students values(1,'Tom','Mysql', 78),(2,'Jon','Analytics', 67);
select * from students;
insert into students values(3, 'Mary', 'Mysql', 77);
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(4,'Sam','Mysql',90);
select * from students;
rollback;
select * from students;
insert into students values(4,'Sam','Mysql',90);
select * from students;
commit;
rollback;
select * from students;
set autocommit = 1;
insert into students values(5,'Larry','Analytics',56);
select * from students;
rollback;
select * from students;
create table tt(id char);
insert imto tt values('a');
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('cd');
insert into tt values('d');
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
drop table students;
create table students(sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(1,'Tom', 23, 'Mysql');
select * from students;
insert into students values(1,'Jon', 23, 'Mysql');
insert into students values(2,'Jon', 23, 'Mysql');
select * from students;
insert into students values(3,'Mary', 16,'Analytics');
insert into students values(3,'Mary', 19,'Analytics');
select * from students;
insert into students values(4,null,23,90);
insert into students (sid, age,course) values(5,45,'Mysql');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age,course) values(5,45,'Mysql');
select * from students;
insert into students values(4,null,23,90);
exit
use practicedb;
select * from movies full join members on id = movieid;
select dep_id, emp_name, salary, avg(salary) over( partition by dep_id) from myemp;
select dep_id, first_name, salary, avg(salary) over( partition by dep_id) from myemp;
select dep_id, first_name, salary, avg(salary) over( ) from myemp;
select dep_id, first_name, salary, avg(salary) over(order by salary ) from myemp;
seelect salary from myemp where salary <= 2200;
select salary from myemp where salary <= 2200;
select avg(salary) from myemp where salary <= 2200;
select avg(salary) from myemp where salary <= 2400;
select avg(salary) from myemp where salary <= 2800;
CREATE TABLE t (
    val INT
);
CREATE TABLE t (     val INT );
INSERT INTO t(val)
VALUES(1),(2),(2),(3),(4),(4),(5);
INSERT INTO t(val) VALUES(1),(2),(2),(3),(4),(4),(5);
SELECT * FROM t;
select dep_id, first_name, salary, avg(salary) , rank() over(order by salary ) from myemp;
select dep_id, first_name, salary, rank() over(order by salary ) from myemp;
select dep_id, first_name, salary, rank() over() from myemp;
select dep_id, first_name, salary, rank(), dense_rank() over() from myemp;
select dep_id, first_name, salary, rank() over(order by salary) , dense_rank over(order by salary) from myemp;
select dep_id, first_name, salary, rank() over (order by salary) , dense_rank() over(order by salary) from myemp;
select dep_id, first_name, salary, rank() over (order by salary) , dense_rank() over(order by salary) , row_number() over (order by salary) from myemp;
select dep_id, first_name, salary, rank() over w , dense_rank() over w, row_number() over w from myemp
window w as (order by salary);
select dep_id, first_name, salary, rank() over w , dense_rank() over w, row_number() over w from myemp window w as (order by salary);
select dep_id, first_name, salary, rank() over w , dense_rank() over w, row_number() over w from myemp window w as (partition by salary order by salary);
select dep_id, first_name, salary, rank() over w , dense_rank() over w, row_number() over w from myemp window w as (partition by salary );
select dep_id, first_name, salary, avg(salary) from myemp window w as (partition by salary );
select dep_id, first_name, salary, avg(salary) from myemp window w as (partition by dep_id );
select dep_id, first_name,  avg(salary) from myemp window w as (partition by dep_id );
select dep_id, first_name, salary, avg(salary) over w from myemp window w as (partition by dep_id );
select dep_id, first_name, salary, avg(salary) over w , row_number() over w from myemp window w as (partition by dep_id );
select dep_id, avg(salary) from myemp group by dep_id;
select * from uber_logs;
select request_date,distance_to_travel,monetary_cost, avg(monetary_cost) avg_cost over ( partition by month(request_date)) from uber_logs where monetary_cost > avg_cost;
select request_date,distance_to_travel,monetary_cost, avg(monetary_cost) over ( partition by month(request_date)) avg_cost from uber_logs where monetary_cost > avg_cost;
select request_date,distance_to_travel,monetary_cost, avg(monetary_cost) over ( partition by month(request_date)) avg_cost from uber_logs;
select request_date,distance_to_travel,monetary_cost - avg(monetary_cost) over ( partition by month(request_date)) avg_cost from uber_logs;
select request_date, monetary_cost/distance_to_travel - avg(monetary_cost/monetary_cost) over ( partition by month(request_date)) avg_cost from uber_logs ;
select request_date, monetary_cost/distance_to_travel - avg(monetary_cost/distance_to_travel) over ( partition by month(request_date)) avg_cost from uber_logs ;
select request_date, distance_to_travel/monetary_cost - avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) avg_cost from uber_logs ;
select request_date, round(distance_to_travel/monetary_cost - avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) ) avg_cost from uber_logs ;
select request_date, abs(round(distance_to_travel/monetary_cost - avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) , 2) ) avg_cost from uber_logs 
;
select * from twitter_salary;
select distinct salary over ( partition by department order by salary desc) from twitter_salary;
select distinct max(salary) over ( partition by department order by salary desc) from twitter_salary;
select distinct max(salary) over ( partition by department ) from twitter_salary;
select distinct salary over ( partition by department ) from twitter_salary;
select distinct rank() over ( partition by department order by department,salary) from twitter_salary;
select salary, rank() over ( partition by department order by department,salary) from twitter_salary;
select distinct salary, rank() over ( partition by department order by department,salary) from twitter_salary;
select dep_id, distinct salary, rank() over ( partition by department order by department,salary) from twitter_salary;
select distinct dep_id,  salary, rank() over ( partition by department order by department,salary) from twitter_salary;
select distinct department,  salary, rank() over ( partition by department order by department,salary) from twitter_salary;
select distinct department,  salary, dense_rank() over ( partition by department order by department,salary) from twitter_salary;
select distinct department,  salary, dense_rank() over ( partition by department order by department,salary) as rank from twitter_salary;
select distinct department,  salary, dense_rank() over ( partition by department order by department,salary) myrank from twitter_salary;
select distinct department,  salary, dense_rank() over ( partition by department order by department,salary) myrank from twitter_salary where myrank < 4;
select distinct department,  salary, myrank from
(select   department,  salary, dense_rank() over ( partition by department order by department,salary) myrank from twitter_salary) a
where myrank < 4;
select distinct department,  salary, myrank from (select   department,  salary, dense_rank() over ( partition by department order by department,salary) myrank from twitter_salary) a where myrank < 4;
select distinct department,  salary, myrank from
(select   department,  salary, dense_rank() over ( partition by department order by department,salary desc) myrank from twitter_salary) a
where myrank < 4;
select distinct department,  salary, myrank from (select   department,  salary, dense_rank() over ( partition by department order by department,salary desc) myrank from twitter_salary) a where myrank < 4;
select request_date, abs(round(distance_to_travel/monetary_cost - avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) , 2) ) avg_cost from uber_logs;
select * from netflix_fraud;
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score) from netflix_fraud; 
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score) from netflix_fraud where state='ca';
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score) cum_score from netflix_fraud where state='ca' order by cum_score;
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score) cum_score from netflix_fraud where state='ca' order by state, cum_score desc;
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score) cum_score from netflix_fraud ;
select top 10 from myemp;
select top  from myemp;
select top 10 * from myemp;
select state, claim_cost, fraud_score, cume_dist() over (partition by state order by fraud_score limit 5) cum_score from netflix_fraud ;
with (select  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud ) as a
select state, claim_cost, fraud_score, cum_score from a ;
with (select  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud ) as a select state, claim_cost, fraud_score, cum_score from a;
with a as (select  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud ) 
select state, claim_cost, fraud_score, cum_score from a ;
with a as (select  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select state, claim_cost, fraud_score, cum_score from a;
with a as (select state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud ) 
select state, claim_cost, fraud_score, cum_score from a where cum_score > 0.95;
with a as (select state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select state, claim_cost, fraud_score, cum_score from a where cum_score > 0.95;
with a as (select state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select state, claim_cost, fraud_score, cum_score from a where cum_score < 0.05;
with a as (select state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select state, claim_cost, fraud_score, cum_score from a where cum_score > 0.95;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select policy_num state, claim_cost, fraud_score from a where cum_score > 0.95 order by cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, dense_rank() over(partition by state) from a where cum_score > 0.95 order by cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, dense_rank() over(partition by state order by fraud_score) from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, dense_rank() over(partition by state order by fraud_score) from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score) myrank from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score) myrank from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score desc) myrank from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score desc) myrank from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score desc) myrank from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score , dense_rank() over(partition by state order by fraud_score desc) myrank from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score where cum_score > 0.95 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score where cum_score > 0.95 order by state, myrank;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, myrank;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, myrank;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud ) 
select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, dense_rank() over(partition by state order by fraud_score) from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num, state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )
;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score desc) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score, dense_rank() over(partition by state order by fraud_score) from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  
select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )   select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over w cum_score , dense_rank() over w myrank from netflix_fraud window as w) 
select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over w cum_score , dense_rank() over w myrank from netflix_fraud window as w)  select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over w cum_score , dense_rank() over w myrank from netflix_fraud window w as (partition by state order by fraud_score desc)  ) 
select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over w cum_score , dense_rank() over w myrank from netflix_fraud window w as (partition by state order by fraud_score desc)  )  select policy_num, state, claim_cost, fraud_score, myrank from a where myrank <= 5 order by state, myrank;
with a as (
select policy_num,state, claim_cost, fraud_score,  
cume_dist() over w cum_score , 
dense_rank() over w percentile 
from netflix_fraud
 window w as (partition by state order by fraud_score desc) 
 ) 
select policy_num, state, claim_cost, fraud_score, percentile 
from a 
where percentile <= 5 
order by state, percentile;
with a as ( select policy_num,state, claim_cost, fraud_score,   cume_dist() over w cum_score ,  dense_rank() over w percentile  from netflix_fraud  window w as (partition by state order by fraud_score desc)   )  select policy_num, state, claim_cost, fraud_score, percentile  from a  where percentile <= 5  order by state, percentile;
SELECT first_name, last_name, salary, 
NTH_VALUE(salary, 2) OVER  ( ORDER BY salary DESC) second_highest_salary
FROM myemp;
SELECT first_name, last_name, salary,  NTH_VALUE(salary, 2) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp;
SELECT first_name, last_name, salary, 
NTH_VALUE(first_name, 2) OVER  ( ORDER BY salary DESC) second_highest_salary
FROM myemp;
SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 2) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp;
SELECT NTH_VALUE(first_name, 2) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp;
SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp)
select first_name, last_name, salary where first_name = second_highest_salary;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp) select first_name, last_name, salary where first_name = second_highest_salary;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp)
select first_name, last_name, salary where first_name = second_highest_salary from a;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp) select first_name, last_name, salary where first_name = second_highest_salary from a;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp)
select first_name, last_name, salary from a where first_name = second_highest_salary;
with a as (SELECT first_name, last_name, salary,  NTH_VALUE(first_name, 3) OVER  ( ORDER BY salary DESC) second_highest_salary FROM myemp) select first_name, last_name, salary from a where first_name = second_highest_salary;
select salary from myemp order by salary;
select first_name, salary from myemp order by salary;
select first_name, salary from myemp order by salary desc;
with a as (SELECT first_name, last_name, salary,  dense_rank() OVER  ( ORDER BY salary DESC) myrank FROM myemp)
select first_name, last_name, salary from a where myrank=2;
with a as (SELECT first_name, last_name, salary,  dense_rank() OVER  ( ORDER BY salary DESC) myrank FROM myemp) select first_name, last_name, salary from a where myrank=2;
with a as (SELECT first_name, last_name, salary,  dense_rank() OVER  ( ORDER BY salary DESC) myrank FROM myemp) select first_name, last_name, salary from a where myrank=3;
select * from authors;
select * from books;
use anadb;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books (bookid integer,
;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) RFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) RFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
);
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authoid = 1;
delete from authors where authorid = 1;
select * from authors;
select * from books;
show create table books;
select * from authors;
show create table books;
select * from authors;
select * from books;
update authors set authorid = 88 where authorid = 8;
select * from authors;
select * from books;
show tables;
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20) , age integer);
desc mytab;
insert into mytabe (name,age) values('Jon',45);
insert into mytab (name,age) values('Jon',45);
select * from mytab;
insert into mytab (name,age) values('Tom',34);
insert into mytab (name,age) values('Tim',34);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name,age) values('Jon',45);
select * from mytab;
insert into mytab (name,age) values('Tim',34);
insert into mytab (name,age) values('Tom',34);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name,age) values('Tom',34);
select * from mytab;
show create table students;
show indexes on authors;
show indexes from authors;
desc students;
show indexes from students;
use employees;
select count(*) from employees;
drop index hidx on employees;
select * from employees limit 10;
select * from employees where hire_date > '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date > '2000-01-01';
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
use anadb;
select * from myemp limit 10;
select first_name, last_name , job_id from myemp limit 10;
create view myview as select first_name, last_name, job_id from myemp;
select * from myview limit 10;
select * from movies;
select * from members;
select mv.id,mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm ON mv.id = mm.movieid;
select mv.id,mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
create view rentals as select mv.id,mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select * from rentals;
show tables;
create view aview on authors as select * from authors where authorid < 10;
create view aview  as select * from authors where authorid < 10;
select * from authors;
select * from aview;
insert into aview values(11,'Jon Snow');
select * from aview;
select * from authors;
create view dep_60 as select * from myemp where dep_id = 60;
select * from dep_60;
drop view aview;
create view aview  as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jon HAMM');
use practicedb;
create database workshop;
use workshop;
select * from myemp;
select count(*) from myemp group by dep_id;
select dep_id, count(*) from myemp group by dep_id;
select right(dep_id,1);
select right(dep_id,1) from myemp;
select right(emp_id,1) from myemp;
select distinct right(emp_id,1) from myemp;
update myemp set dep_id = 100 where right(emp_id,1) = 0;
update myemp set dep_id = 10 where right(emp_id,1) = 1;
update myemp set dep_id = 20 where right(emp_id,1) = 2;
update myemp set dep_id = 30 where right(emp_id,1) = 3;
update myemp set dep_id = 40 where right(emp_id,1) = 4;
update myemp set dep_id = 50 where right(emp_id,1) = 5;
update myemp set dep_id = 60 where right(emp_id,1) = 6;
update myemp set dep_id = 70 where right(emp_id,1) = 7;
update myemp set dep_id = 80 where right(emp_id,1) = 8;
update myemp set dep_id = 90 where right(emp_id,1) = 9;
select dep_id, count(*) from myemp group by dep_id;
show tables;
CREATE TABLE sales(
    sales_employee VARCHAR(50) NOT NULL,
    fiscal_year INT NOT NULL,
    sale DECIMAL(14,2) NOT NULL,
    PRIMARY KEY(sales_employee,fiscal_year)
);
CREATE TABLE sales(     sales_employee VARCHAR(50) NOT NULL,     fiscal_year INT NOT NULL,     sale DECIMAL(14,2) NOT NULL,     PRIMARY KEY(sales_employee,fiscal_year) );
INSERT INTO sales(sales_employee,fiscal_year,sale)
VALUES('Bob',2016,100),
      ('Bob',2017,150),
      ('Bob',2018,200),
      ('Alice',2016,150),
      ('Alice',2017,100),
      ('Alice',2018,200),
       ('John',2016,200),
      ('John',2017,150),
      ('John',2018,250);
INSERT INTO sales(sales_employee,fiscal_year,sale) VALUES('Bob',2016,100),       ('Bob',2017,150),       ('Bob',2018,200),       ('Alice',2016,150),       ('Alice',2017,100),       ('Alice',2018,200),        ('John',2016,200),       ('John',2017,150),       ('John',2018,250);
CREATE TABLE t (
    val INT
);
CREATE TABLE t (     val INT );
INSERT INTO t(val)
VALUES(1),(2),(2),(3),(4),(4),(5);
INSERT INTO t(val) VALUES(1),(2),(2),(3),(4),(4),(5);
SELECT * FROM t;
select val, rank() over ( order by val) from t;
select val, rank() over ( order by val) rank from t;
select val, rank() over ( order by val) myrank from t;
select val, dense_rank() over ( order by val) myrank from t;
select salary, dense_rank() over ( order by salary) myrank from myemp;
select salary, dense_rank() over ( order by salary desc) myrank from myemp;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank from myemp;
with a as (select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank from myemp)
select emp_id, first_name, last_name, salary, cume_dist() ;
with a as (select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank from myemp) select emp_id, first_name, last_name, salary, cume_dist();
(select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , cume_dist() over (order by salary desc) from myemp;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , cume_dist() over (order by salary desc) from myemp;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , cume_dist() over (order by salary ) from myemp;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , cume_dist() over (order by salary ) percentile from myemp
order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , cume_dist() over (order by salary ) percentile from myemp order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , round(cume_dist() over (order by salary )*100,2) percentile from myemp
order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , round(cume_dist() over (order by salary )*100,2) percentile from myemp order by percentile;
select ceil(0.2);
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , round(cume_dist() over (order by salary )*100) percentile from myemp
order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , round(cume_dist() over (order by salary )*100) percentile from myemp order by percentile;
select floor(0.7);
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , floor(cume_dist() over (order by salary )*100) percentile from myemp
order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , floor(cume_dist() over (order by salary )*100) percentile from myemp order by percentile;
select emp_id, first_name, last_name, salary, dense_rank() over ( order by salary desc) myrank , round(cume_dist() over (order by salary )*100) percentile from myemp order by percentile;
select * from sales;
select *, dense_rank() over ( partition by fiscal_year order by sale desc) from sales;
select *, dense_rank() over ( partition by fiscal_year order by sale desc) as myrank from sales;
select *, dense_rank() over ( partition by dep_id order by salary desc) as myrank from myemp;
select * from myemp where emp_id like '%3%';
select emp_id, first_name, row_number() over () from myemp;
select emp_id, first_name, row_number() over (order by hire_date desc) from myemp;
select emp_id, first_name, hire_date, row_number() over (order by hire_date desc) from myemp;
select emp_id, first_name, hire_date, row_number() over (order by hire_date ) from myemp;
select emp_id, first_name, hire_date, row_number() over (order by hire_date ) from myemp where row_muner() over (order by hire_date) = 5;
select emp_id, first_name, hire_date, row_number() over (partition by dep_id order by hire_date ) from myemp ;
with as as (select emp_id, first_name, hire_date, row_number() over (order by hire_date ) rnum from myemp) select * from a where rnum = 5;
with a as (select emp_id, first_name, hire_date, row_number() over (order by hire_date ) rnum from myemp) select * from a where rnum = 5;
select * from t;
CREATE TABLE dup (
    id INT,
    name VARCHAR(10) NOT NULL
);
CREATE TABLE dup (     id INT,     name VARCHAR(10) NOT NULL );
INSERT INTO t(id,name) 
VALUES(1,'A'),
      (2,'B'),
      (3,'C'),
      (4,'D');
INSERT INTO t(id,name)  VALUES(1,'A'),       (2,'B'),       (2,'B'),       (3,'C'),       (3,'C'),       (3,'C'),       (4,'D');
INSERT INTO dup(id,name) 
VALUES(1,'A'),
      (2,'B'),
      (3,'C'),
      (4,'D');
INSERT INTO dup(id,name)  VALUES(1,'A'),       (2,'B'),       (2,'B'),       (3,'C'),       (3,'C'),       (3,'C'),       (4,'D');
   SELECT 
    id,
    name,
    ROW_NUMBER() OVER (PARTITION BY id, name ORDER BY id) AS row_num
FROM dup;
SELECT      id,     name,     ROW_NUMBER() OVER (PARTITION BY id, name ORDER BY id) AS row_num FROM dup;
with a as (select row_num() over(partition by id, name order by id) as rnum from dup) 
delete from a where rnum > 1;
with a as (select row_num() over(partition by id, name order by id) as rnum from dup)  delete from a where rnum > 1;
with a as (select row_num() over(partition by id, name order by id) as rnum from dup) delete from a where rnum > 1;
with a as (select row_number() over ( partition by id, name order by id) as rnum from dup) delete from a where rnum > 1;
with a as (select id, row_number() over ( partition by id, name order by id) as rnum from dup) delete from dup join a usinf id where rnum > 1;
with a as (select id, row_number() over ( partition by id, name order by id) as rnum from dup) delete from dup join a using id where rnum > 1;
CREATE TABLE scores (
    name VARCHAR(20) PRIMARY KEY,
    score INT NOT NULL
);
CREATE TABLE scores (     name VARCHAR(20) PRIMARY KEY,     score INT NOT NULL );
INSERT INTO
scores(name, score)
VALUES
('Smith',81),
('Jones',55),
('Williams',55),
('Taylor',62),
('Brown',62),
('Davies',84),
('Evans',87),
('Wilson',72),
('Thomas',72),
('Johnson',100);
INSERT INTO scores(name, score) VALUES ('Smith',81), ('Jones',55), ('Williams',55), ('Taylor',62), ('Brown',62), ('Davies',84), ('Evans',87), ('Wilson',72), ('Thomas',72), ('Johnson',100);
select * from scores;
CREATE TABLE overtime (
    employee_name VARCHAR(50) NOT NULL,
    department VARCHAR(50) NOT NULL,
    hours INT NOT NULL,
    PRIMARY KEY (employee_name , department)
);
CREATE TABLE overtime (     employee_name VARCHAR(50) NOT NULL,     department VARCHAR(50) NOT NULL,     hours INT NOT NULL,     PRIMARY KEY (employee_name , department) );
INSERT INTO overtime(employee_name, department, hours)
VALUES('Diane Murphy','Accounting',37),
('Mary Patterson','Accounting',74),
('Jeff Firrelli','Accounting',40),
('William Patterson','Finance',58),
('Gerard Bondur','Finance',47),
('Anthony Bow','Finance',66),
('Leslie Jennings','IT',90),
('Leslie Thompson','IT',88),
('Julie Firrelli','Sales',81),
('Steve Patterson','Sales',29),
('Foon Yue Tseng','Sales',65),
('George Vanauf','Marketing',89),
('Loui Bondur','Marketing',49),
('Gerard Hernandez','Marketing',66),
('Pamela Castillo','SCM',96),
('Larry Bott','SCM',100),
('Barry Jones','SCM',65);
INSERT INTO overtime(employee_name, department, hours) VALUES('Diane Murphy','Accounting',37), ('Mary Patterson','Accounting',74), ('Jeff Firrelli','Accounting',40), ('William Patterson','Finance',58), ('Gerard Bondur','Finance',47), ('Anthony Bow','Finance',66), ('Leslie Jennings','IT',90), ('Leslie Thompson','IT',88), ('Julie Firrelli','Sales',81), ('Steve Patterson','Sales',29), ('Foon Yue Tseng','Sales',65), ('George Vanauf','Marketing',89), ('Loui Bondur','Marketing',49), ('Gerard Hernandez','Marketing',66), ('Pamela Castillo','SCM',96), ('Larry Bott','SCM',100), ('Barry Jones','SCM',65);
select * from overtime;
select *, first_val() over (order by hours ) least from scores;
select *, first_val() over (order by hours ) least from overtime;
select *, first_value() over (order by hours ) least from overtime;
select * from overtime;
select *, first_value(employee_name) over (order by hours ) least from overtime;
select *, first_value(employee_name) over (partition by department order by hours ) least from overtime;
with a as (select *, first_value(employee_name) over (partition by department order by hours ) least from overtime) select * from a where employee_name = least;
select * from movies;
DROP TABLE IF EXISTS `movies`;
CREATE TABLE `movies` (
  `id` int DEFAULT NULL,
  `title` varchar(50) DEFAULT NULL,
  `category` varchar(25) DEFAULT NULL
) ;
CREATE TABLE `movies` (   `id` int DEFAULT NULL,   `title` varchar(50) DEFAULT NULL,   `category` varchar(25) DEFAULT NULL );
INSERT INTO `movies` VALUES (1,'ASSASSIN\134'S CREED: EMBERS','Animations'),(2,'Real Steel','Animations'),(3,'Alvin and the Chipmunks','Animations'),(4,'The Adventures of Tin Tin','Animations'),(5,'Safe','Action'),(6,'Safe House','Action'),(7,'GIA','18+'),(8,'Deadline 2009','18+'),(9,'The Dirty Picture','18+'),(10,'Marley and me','Romance');
DROP TABLE IF EXISTS `members`;
CREATE TABLE `members` (
  `memid` int DEFAULT NULL,
  `first_name` varchar(25) DEFAULT NULL,
  `last_name` varchar(25) DEFAULT NULL,
  `movieid` int DEFAULT NULL
) ;
CREATE TABLE `members` (   `memid` int DEFAULT NULL,   `first_name` varchar(25) DEFAULT NULL,   `last_name` varchar(25) DEFAULT NULL,   `movieid` int DEFAULT NULL );
INSERT INTO `members` VALUES (1,'Alicia','Alarcon',1),(2,'Don','Draper',2),(3,'Lizzie','Moss',5),(4,'Eldon','Chance',8),(5,'Jenny','Patterson',10),(6,'Craig','Daniels',NULL),(7,'Denny','Peters',NULL),(8,'Patty','Pattinson',NULL);
DROP TABLE IF EXISTS `meals`;
CREATE TABLE `meals` (
  `mealname` varchar(50) DEFAULT NULL,
  `rate` float(5,2) DEFAULT NULL
) ;
CREATE TABLE `meals` (   `mealname` varchar(50) DEFAULT NULL,   `rate` float(5,2) DEFAULT NULL );
INSERT INTO `meals` VALUES ('OmletINSERT INTO `meals` VALUES ('OmletkeINSERT INTO `meals` VALUES ('OmletINrinks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `drinks` (
  `drinkname` varchar(50) DEFAULT NULL,
  `rate` float(5,2) DEFAULT NULL
) ;
INSERT INTO `drinks` VALUES ('Tea',5.00),('Coffee',15.00),('Pepsi',20.00);
;
select * from meals;
INSERT INTO `meals` VALUES ('Omlet',10.50),('Sausage',15.50),('Pancake',40.75);
INSERT INTO `drinks` VALUES ('Tea',5.00),('Coffee',15.00),('Pepsi',20.00);
CREATE TABLE `drinks` (
  `drinkname` varchar(50) DEFAULT NULL,
  `rate` float(5,2) DEFAULT NULL
) ;
CREATE TABLE `drinks` (   `drinkname` varchar(50) DEFAULT NULL,   `rate` float(5,2) DEFAULT NULL );
INSERT INTO `drinks` VALUES ('Tea',5.00),('Coffee',15.00),('Pepsi',20.00);
select * from movies;
select * from members;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname , rate from meals cross join drinks;
select m.mealname, d.drinkname , m.rate, d.rate from meals m cross join drinks d;
select * from myemp;
select * from myemp  limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp JOIN myemp as mgr
ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp JOIN myemp as mgr ON emp.mgr_id = mgr.emp_id;
select sum(salary) from mep;
select sum(salary) from myemp;
select hire_date, year(hire_date) from myemp limit 10;
select dep_id, avg(sal) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select emp_id, first_name, last_name, dep_id , avg(salary) over( partition by dep_id) from myemp;
select * frrom sales;
select * from sales;
select sales_employee, fiscal_year, avg(sale) over ( partition by fiscal_year) as avg_sale from sales;
select * from t;
select val, rank() over( order by val) from t;
select val, rank() over( order by val) myrank from t;
select val, dense_rank() over( order by val) myrank from t;
select *, dense_rank() over(order by salary desc) as myrank from myemp;
select *, dense_rank() over(partition by dep_id order by salary desc) as myrank from myemp;
select *, row_number() over(partition by dep_id order by salary desc) as myrank from myemp;
select *, row_number() over(order by salary desc) as myrank from myemp;
exit
use exampledb;
create table students(id integer);
create table if not exists students(id integer);
select * from students;
show databases;
show tables;
desc students;
create table patients(pid integer, pname varchar(50), dob date, toa datetime);
desc patients;
insert into patients values(1, 'Harry', '1997-01-12', '2022-02-15 07:30:00');
insert into patients values(2,'Potter', '1992-08-17', '2022-02-15 19:30:00');
select * from patients;
exit
use exampledb;
2 + 4
;
select 3+9;
select 675*890;
select 4 + null;
select 4 = 4;
select 4 = 6;
select 4 = null;
select 4 is null;
select 4 is not null;
select * from students;
alter table students add column marks integer ;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
select * from myclass;
show tables;
select * from students;
create table mytab(id integer);
show tables;
drop table mytab;
show tables;
select * from students;
insert into students values(3,'Pete', null, 56);
select * from students;
insert into students (std_id, sname, marks) values(4,'Harry',90);
select * from students;
insert into students values(5,'Potter','Magic',77),(6,'Larry','Mysql',65),(7,'Gene', 'Analytics', 88);
select * from students;
update students set sname = 'Jonathan' where std_id = 1;
select * from students;
update students set marks = 97 where sname = 'potter';
select * from students;
update students set marks = 50 where marks = null;
select * from students;
update students set marks = 50 where marks is null;
select * from students;
update students set sname = 'Lara', course = 'Magic' where std_id = 6;
select * from students;
update students set marks = 100;
select * from students;
exit
use exampledb;
select * from students;
delete from students where std_id = 1;
select * from students;
delete from students where course is null;
select * from students;
delete from students;
select * from students;
show variables like %safe%;
set sql_safe_updates = 0;
insert into students values(5,'Potter','Magic',77),(6,'Larry','Mysql',65),(7,'Gene', 'Analytics', 88);
select * from students;
truncate table students;
select * from students;
select * from myemp;
select * from myemp limit 10;
select * from myemp limit 5;
select emp_id, first_name, last_name, job_id from myemp;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select * from myemp limit 5;
select emp_id, first_name, last_name, salary, salary*0.15 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.15 , salary + salary*0.15 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.15 , round(salary + salary*0.15,2) from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.15 as bonus, round(salary + salary*0.15,2) as total_salary from myemp limit 10;
select emp_id, first_name as fname, last_name as lname, salary, salary*0.15 as bonus, round(salary + salary*0.15,2) as total_salary from myemp limit 10;
select * from myemp limit 5;
select * from myemp limit 20;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id , mgr_id from myemp;
select * from person;
select distinct fname,lname from person;
select * from myemp where dep_id = 60;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary < 3000;
select * from myemp where salary <= 3000;
select * from myemp where hire_date >= '2000-01-01';
select * from myemp where dep_id <> 80;
select * from myemp where dep_id = 80 and salary > 10000;
select * from myemp where dep_id = 60 or salary > 10000;
select * from myemp where dep_id = 60 or dep_id = 20 or dep_id = 40;
select * from myemp where dep_id  IN (60,20,40,70);
select 5%2;
select * from myemp where emp_id%2 = 0;
create table myemp2 as select * from myemp;
select * from myemp2;
exit
use anadb;
select hire_date, year(hire_date) from myemp limit 10;
select * from students;
select * from patients;
select pname, ifnull(dob, '-') as birthday from patients;
call myproc();
call myproc('Jon');
call myproc('Mary');
call get_book(5);
select * from books;
call get_book(10);
call proc_if(8);
call proc_if(-8);
call proc_if(8);
call proc_if(-8);
call proc_if2(4);
call proc_if2(1);
call proc_if2(9);
call proc_simpleloop();
call proc_simpleloop(3);
call proc_simpleloop(7);
call proc_repeat(4);
call proc_repeat(2);
call proc_while();
call proc_while(4);
call proc_while(3);
exit;
use anadb;
select * from ss;
select topic from books;
call sql_ex1();
select topic from books;
call sql_ex1(1);
call sql_ex1(2);
select * from payments;
desc payments;
insert into payments values(1,null);
call make_payment(1,500);
select * from payments;
call make_payment(2,null);
desc fraud;
select * from fraud;
call make_payment(2,null);
select * from fraud;
call make_payment(3,400);
select * from payments;
select * from fraud;
call make_payment(4,null);
select * from payments;
select * from fraud;
call proc_cursor();
select * from authors;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
call place_orders();
select * from orders;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select emp-id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp where experience(emp_id) < 10;
use exampledb;
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'J____';
select * from myemp where dep_id != 80;
select * from myemp where dep_id <> 80;
select * from myemp where dep_id in (40,20,10);
select * from myemp where dep_id not in (40,20,80);
select * from myemp where job_id = 'IT_PROG' or job_id = 'ST_CLERK';
select * from myemp where job_id IN ('IT_PROG' ,'ST_CLERK');
select * from myemp where job_id NOT IN ('IT_PROG' ,'ST_CLERK');
select * from myemp where job_id like '%CLERK';
select distinct job_id from myemp where job_id not like '%clerk';
select emp_id, first_name, last_name , hire_date, year(hire_date) from myemp limit 10;
select dob, adddate(dob, interval 31 day) from patients;
select dob, year(dob), month(dob) , monthname(dob) from patients;
select dob, year(dob), month(dob) , monthname(dob), dayofweek(dob)  from patients;
select dob, year(dob), month(dob) , monthname(dob), dayofweek(dob), dayname(dob)  from patients;
select now();
select curdate(), current_date;
select curtime(), current_time;
select * from patients;
select * from myemp limt 10;
select * from myemp limit 10;
select concat(first_name,last_name) from myemp limit 10;
select concat(first_name,' ',last_name) from myemp limit 10;
select left(first_name, 1) from myemp limit 10;
select right(first_name, 1) from myemp limit 10;
select first_name from myemp where left(first_name, 1) IN ('s','c','j','l');
select lower(first_name), reverse(first_name) from myemp limit 10;
select weight_string('alph');
select weight_string('alph'), weight_string('beta');
select count(*) from myemp;
select sum(salary) from myemp;
select avg(salary) from myemp;
select round(avg(salary)) from myemp;
select round(avg(salary),2) from myemp;
select round(123.456, 2);
select min(salary), max(salary) from myemp;
select dep_id, avg(dep_id) from myemp ;
select dep_id, avg(dep_id) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, round(avg(salary)) from myemp group by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, job_id, avg(salary) from myemp group by dep_id, job_id;
select dep_id, job_id, avg(salary) from myemp group by dep_id, job_id having dep_id in (80,50);
select * from myemp;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by first_name;
select * from myemp order by hire_date;
select * from myemp order by dep_id, hire_date;
select first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date;
select distinct dep_id from myemp order by dep_id;
select dep_id, count(*) from myemp group by dep_id;
select dep_id, count(*) as num_emp from myemp group by dep_id order by num_emp;
select * from myemp limit 10;
select count(salary) from myemp;
select count(distinct dep_id) from myemp;
select count(distinct job_id) from myemp;
select first_name, dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
exit
use anadb;
show tables;
use exampledb;
show tables;
select * from movies;
select * from members;
select first_name, last_name, title from movies inner join members on movieid = id;
select * from movies inner join members on movieid = id;
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select * from movies;
select * from members;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select * from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, drinks.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate,d.rate from meals as m cross join drinks as d;
select * from movies;
select * from members;
select mv.title, mm.first_name, mm.last_name 
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name  from movies as mv left join members as mm on mv.id = mm.movieid;
select * from myemp;
select emp_id, first_name, last_name, mgr_id from myemp limit 15;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name 
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
drop table students;
create table students (sid integer UNIQUE, sname varchar(50) NOT NULL, age integer CHECK(age > 18) , course varchar(30));
desc students;
insert into students values(1,'Tom', 35,'Mysql');
select * from students;
insert into students values(1,'Tim', 35,'Mysql');
insert into students values(2,'Tim', 35,'Mysql');
select * from students;
insert into students values(3,'Jon', 17, 'Analytics');
insert into students values(3,'Jon', 19, 'Analytics');
select * from students;
insert into students values(4,null, 23,'Mysql');
insert into students (sid, age, course) values(5,37,'Analytics');
desc students;
alter table students modify column sname varchar(50) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(5,37,'Analytics');
select * from students;
insert into students values(4,null, 23,'Mysql');
exit
use anadb;
select * from authors;
select * from books;
use exampledb;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
DESC books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
show tables;
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc mytab;
insert into mytab (name, age) values('Tom',57);
select * from mytab;
insert into mytab (name, age) values('Jon',75),('Mary',34);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tom',57);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Tom',57);
select * from mytab;
insert into mytab (name, age) values('Jon',76);
select * from mytab;
rollback;
select * from mytab;
set autocommit = 0;
insert into mytab (name, age) values('Mary',34);
select * from mytab;
rollback;
select * from mytab;
set autocommit = 1;
insert into mytab (name, age) values('Mary',34);
select * from mytab;
rollback;
select * from mytab;
create table tt(id char);
insert imto tt values('a');
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b);
;
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
start transaction;
insert into tt values('a'),('b');
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
select * from tt;
rolback to sd;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('e'),('f');
select * from tt;
rollback;
select * from tt;
exit
use anadb;
show tables;
use exampledb;
show tables;
use employees;
drop index hidx on employees;
use exampledb;
desc students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
use exampledb;
show create table students;
select count(*), count(distinct(dep_id)) from myemp;
exit
use exampledb;
show tables;
select * from myemp limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
create view myview as select first_name, last_name, job_id, salalry from myemp;
create view myview as select first_name, last_name, job_id, salary from myemp;
select * from myview;
select * from myemp limit 10;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep_60;
select * from dep60;
show tables;
select * from movies;
select * from members;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from authors;
create view aview as select * from authors where authorid < 10;
select * from aview;
insert into aview values(11,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jon Snow');
insert into aview values(1,'Jon Snow');
select * from aview;
call myproc();
call myproc(6);
call myproc(7);
call myproc(8);
call myproc(10);
call proc_if(9);
call proc_if(0);
call proc_if(9);
exit
use anadb;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 2 where bookid =8;
select * from books;
desc book_sales;
select * from book_sales;
update books set sales = sales + 3 where bookid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 10;
select * from books;
select * from book_sales;
show tables;
desc accounts;
select 8 from accounts;
select * from accounts;
show tables;
desc transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
SELECT * FROM books 
      WHERE authorid = 5;
SELECT * FROM books        WHERE authorid = 5;
select * from myemp limit 10;
select max(salalry) from myemp;
select max(salary) from myemp;
select * from myemp limit 10;
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
select * from products;
select * from products where mrp > (select avg(mrp) from products);
select avg(mrp) from products;
select * from employees;
use practicedb;
select * from employees;
use anadb
show tables;
use practicedb;
show tables;
use anadb;
DROP TABLE IF EXISTS `employees`;
DROP TABLE IF EXISTS `offices`;
CREATE TABLE `offices` (
  `officeCode` varchar(10) NOT NULL,
  `city` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50) DEFAULT NULL,
  `state` varchar(50) DEFAULT NULL,
  `country` varchar(50) NOT NULL,
  `postalCode` varchar(15) NOT NULL,
  `territory` varchar(10) NOT NULL,
  PRIMARY KEY (`officeCode`)
) ;
CREATE TABLE `offices` (   `officeCode` varchar(10) NOT NULL,   `city` varchar(50) NOT NULL,   `phone` varchar(50) NOT NULL,   `addressLine1` varchar(50) NOT NULL,   `addressLine2` varchar(50) DEFAULT NULL,   `state` varchar(50) DEFAULT NULL,   `country` varchar(50) NOT NULL,   `postalCode` varchar(15) NOT NULL,   `territory` varchar(10) NOT NULL,   PRIMARY KEY (`officeCode`) );
INSERT INTO `offices` VALUES ('1','San Francisco','+1 650 219 4782','100 Market Street','Suite 300','CA','USA','94080','NA'),('2','Boston','+1 215 837 0825','1550 Court Place','Suite 102','MA','USA','02107','NA'),('3','NYC','+1 212 555 3000','523 East 53rd Street','apt. 5A','NY','USA','10022','NA'),('4','Paris','+33 14 723 4404','43 Rue Jouffroy D\134'abbans',NULL,NULL,'France','75017','EMEA'),('5','Tokyo','+81 33 224 5000','4-1 Kioicho',NULL,'Chiyoda-Ku','Japan','102-8578','Japan'),('6','Sydney','+61 2 9264 2451','5-11 Wentworth Avenue','Floor #2',NULL,'Australia','NSW 2010','APAC'),('7','London','+44 20 7877 2041','25 Old Broad StreeINSERT INTO `offices` V'EINSERT INTO `offices` VALUES ('1','`eINSERT INTO `offices` VALUES ` INSERT INTO `offices` VALUES rchINSERT INTO `offices` VALUES ('1','har(INSERT INTO `offices` VALUES ('1','San FrOTINSERT INTO `offices` VALUES ('1T NUINSERT INTO `offices` VALU(10) NOT NULL,
  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int ',1143sicmodelcars.com','4',1102,'Sales Rep'),(1501,'Bott','Larry','x2311','lbott@classicmodelcars.com','7',1102,'Sales Rep'),(1504,'Jones','Barry','x102','bjones@classicmodelcars.com','7',1102,'Sales Rep'),(1611,'Fixter','Andy','x101','afixter@classicmodelcars.com','6',1088,'Sales Rep'),(1612,'Marsh','Peter','x102','pmarsh@classicmodelcars.com','6',1088,'Sales Rep'),(1619,'King','Tom','x103','tking@classicmodelcars.com','6',1088,'Sales Rep'),(1621,'Nishi','Mami','x101','mnishi@classicmodelcars.com','5',1056,'Sales Rep'),(1625,'Kato','Yoshimi','x102','ykato@classicmodelcars.com','5',1621,'Sales Rep'),(1702,'Gerard','Martin','x2312','mgerard@classicmodelcars.com','4',1102,'Sales Rep');
INSERT INTO `offices` VALUES ('1','San Francisco','+1 650 219 4782','100 Market Street','Suite 300','CA','USA','94080','NA'),('2','Boston','+1 215 837 0825','1550 Court Place','Suite 102','MA','USA','02107','NA'),('3','NYC','+1 212 555 3000','523 East 53rd Street','apt. 5A','NY','USA','10022','NA'),('4','Paris','+33 14 723 4404','43 Rue Jouffroy D\134'abbans',NULL,NULL,'France','75017','EMEA'),('5','Tokyo','+81 33 224 5000','4-1 Kioicho',NULL,'Chiyoda-Ku','Japan','102-8578','Japan'),('6','Sydney','+61 2 9264 2451','5-11 Wentworth Avenue','Floor #2',NULL,'Australia','NSW 2010','APAC'),('7','London','+44 20 7877 2041','25 Old Broad StreeINSERT INTO `offices` V'EINSERT INTO `offices` VALUES ('1','`eINSERT INTO `offices` VALUES ` INSERT INTO `offices` VALUES rchINSERT INTO `offices` VALUES ('1','har(INSERT INTO `offices` VALUES ('1','San FrOTINSERT INTO `offices` VALUES ('1T NUINSERT INTO `offices` VALU(10) NOT NULL,   `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int ',1143sicmodelcars.com','4',1102,'Sales Rep'),(1501,'Bott','Larry','x2311','lbott@classicmodelcars.com','7',1102,'Sales Rep'),(1504,'Jones','Barry','x102','bjones@classicmodelcars.com','7',1102,'Sales Rep'),(1611,'Fixter','Andy','x101','afixter@classicmodelcars.com','6',1088,'Sales Rep'),(1612,'Marsh','Peter','x102','pmarsh@classicmodelcars.com','6',1088,'Sales Rep'),(1619,'King','Tom','x103','tking@classicmodelcars.com','6',1088,'Sales Rep'),(1621,'Nishi','Mami','x101','mnishi@classicmodelcars.com','5',1056,'Sales Rep'),(1625,'Kato','Yoshimi','x102','ykato@classicmodelcars.com','5',1621,'Sales Rep'),(1702,'Gerard','Martin','x2312','mgerard@classicmodelcars.com','4',1102,'Sales Rep');
select * from employees
;
show tables;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `offices` (
  `officeCode` varchar(10) NOT NULL,
  `city` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50) DEFAULT NULL,
  `state` varchar(50) DEFAULT NULL,
  `country` varchar(50) NOT NULL,
  `postalCode` varchar(15) NOT NULL,
  `territory` varchar(10) NOT NULL,
  PRIMARY KEY (`officeCode`)
) ;
CREATE TABLE `offices` (   `officeCode` varchar(10) NOT NULL,   `city` varchar(50) NOT NULL,   `phone` varchar(50) NOT NULL,   `addressLine1` varchar(50) NOT NULL,   `addressLine2` varchar(50) DEFAULT NULL,   `state` varchar(50) DEFAULT NULL,   `country` varchar(50) NOT NULL,   `postalCode` varchar(15) NOT NULL,   `territory` varchar(10) NOT NULL,   PRIMARY KEY (`officeCode`) );
INSERT INTO `offices` VALUES ('1','San Francisco','+1 650 219 4782','100 Market Street','Suite 300','CA','USA','94080','NA'),('2','Boston','+1 215 837 0825','1550 Court Place','Suite 102','MA','USA','02107','NA'),('3','NYC','+1 212 555 3000','523 East 53rd Street','apt. 5A','NY','USA','10022','NA'),('4','Paris','+33 14 723 4404','43 Rue Jouffroy D\134'abbans',NULL,NULL,'France','75017','EMEA'),('5','Tokyo','+81 33 224 5000','4-1 Kioicho',NULL,'Chiyoda-Ku','Japan','102-8578','Japan'),('6','Sydney','+61 2 9264 2451','5-11 Wentworth Avenue','Floor #2',NULL,'Australia','NSW 2010','APAC'),('7','London','+44 20 7877 2041','25 Old Broad Street','Level 7',NULL,'UK','EC2N 1HN','EMEA');
drop table employees;
drop table offices;
CREATE TABLE `offices` (
  `officeCode` varchar(10) NOT NULL,
  `city` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50) DEFAULT NULL,
  `state` varchar(50) DEFAULT NULL,
  `country` varchar(50) NOT NULL,
  `postalCode` varchar(15) NOT NULL,
  `territory` varchar(10) NOT NULL,
  PRIMARY KEY (`officeCode`)
) ;
CREATE TABLE `offices` (   `officeCode` varchar(10) NOT NULL,   `city` varchar(50) NOT NULL,   `phone` varchar(50) NOT NULL,   `addressLine1` varchar(50) NOT NULL,   `addressLine2` varchar(50) DEFAULT NULL,   `state` varchar(50) DEFAULT NULL,   `country` varchar(50) NOT NULL,   `postalCode` varchar(15) NOT NULL,   `territory` varchar(10) NOT NULL,   PRIMARY KEY (`officeCode`) );
INSERT INTO `offices` VALUES ('1','San Francisco','+1 650 219 4782','100 Market Street','Suite 300','CA','USA','94080','NA'),('2','Boston','+1 215 837 0825','1550 Court Place','Suite 102','MA','USA','02107','NA'),('3','NYC','+1 212 555 3000','523 East 53rd Street','apt. 5A','NY','USA','10022','NA'),('4','Paris','+33 14 723 4404','43 Rue Jouffroy D\134'abbans',NULL,NULL,'France','75017','EMEA'),('5','Tokyo','+81 33 224 5000','4-1 Kioicho',NULL,'Chiyoda-Ku','Japan','102-8578','Japan'),('6','Sydney','+61 2 9264 2451','5-11 Wentworth Avenue','Floor #2',NULL,'Australia','NSW 2010','APAC'),('7','London','+44 20 7877 2041','25 Old Broad Street','Level 7',NULL,'UK','EC2N 1HN','EMEA');
CREATE TABLE `employees` (
  `employeeNumber`   `employeeNumber`   `employeech  `employeeNumber`   `employeeNumber`r(  `employeeNumber`   `employeeNumber`   `OT  `employeeNumber`   `employeeNumbNU  `employeeNumber`   `employeeNuOT NULL,
  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` iGerard  `reportsTo` int DEFAULTcm  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `reportsTo` int DEFAULT NULL  `reportsTo` int DEFAULT NULL  `rL,  `reportsTo` int DEFAULT Nmb  `),  `repor43','lbott@classicmodelcars.com','7',1102,'Sales Rep'),(1504,'Jones','Barry','x102','bjones@classicmodelcars.com','7',1102,'Sales Rep'),(1611,'Fixter','Andy','x101','afixter@classicmodelcars.com','6',1088,'Sales Rep'),(1612,'Marsh','Peter','x102','pmarsh@classicmodelcars.com','6',1088,'Sales Rep'),(1619,'King','Tom','x103','tking@classicmodelcars.com','6',1088,'Sales Rep'),(1621,'Nishi','Mami','x101','mnishi@classicmodelcars.com','5',1056,'Sales Rep'),(1625,'Kato','Yoshimi','x102','ykato@classicmodelcars.com','5',1621,'Sales Rep'),(1702,'Gerard','Martin','x2312','mgerard@classicmodelcars.com','4',1102,'Sales Rep');
;
select * from employees;
CREATE TABLE `employees` (
  `employeeNumber` int NOT NULL,
  `lastName` varchar(50) NOT NULL,
  `firstName` varchar(50) NOT NULL,
  `extension` varchar(10) NOT NULL,
  `email` varchar(100) NOT NULL,
  `officeCode` varchar(10) NOT NULL,
  `reportsTo` int DEFAULT NULL,
  `jobTitle` varchar(50) NOT NULL,
  PRIMARY KEY (`employeeNumber`),
  KEY `reportsTo` (`reportsTo`),
  KEY `officeCode` (`officeCode`),
  CONSTRAINT `employees_ibfk_1` FOREIGN KEY (`reportsTo`) REFERENCES `employees` (`employeeNumber`),
  CONSTRAINT `employees_ibfk_2` FOREIGN KEY (`officeCode`) REFERENCES `offices` (`officeCode`)
) ;
CREATE TABLE `employees` (   `employeeNumber` int NOT NULL,   `lastName` varchar(50) NOT NULL,   `firstName` varchar(50) NOT NULL,   `extension` varchar(10) NOT NULL,   `email` varchar(100) NOT NULL,   `officeCode` varchar(10) NOT NULL,   `reportsTo` int DEFAULT NULL,   `jobTitle` varchar(50) NOT NULL,   PRIMARY KEY (`employeeNumber`),   KEY `reportsTo` (`reportsTo`),   KEY `officeCode` (`officeCode`),   CONSTRAINT `employees_ibfk_1` FOREIGN KEY (`reportsTo`) REFERENCES `employees` (`employeeNumber`),   CONSTRAINT `employees_ibfk_2` FOREIGN KEY (`officeCode`) REFERENCES `offices` (`officeCode`) );
INSERT INTO `employees` VALUES (1002,'Murphy','Diane','x5800','dmurphy@classicmodelcars.com','1',NULL,'President'),(1056,'Patterson','Mary','x4611','mpatterso@classicmodelcars.com','1',1002,'VP Sales'),(1076,'Firrelli','Jeff','x9273','jfirrelli@classicmodelcars.com','1',1002,'VP Marketing'),(1088,'Patterson','William','x4871','wpatterson@classicmodelcars.com','6',1056,'Sales Manager (APAC)'),(1102,'Bondur','Gerard','x5408','gbondur@classicmodelcars.com','4',1056,'Sale Manager (EMEA)'),(1143,'Bow','Anthony','x5428','abow@classicmodelcars.com','1',1056,'Sales Manager (NA)'),(1165,'Jennings','Leslie','x3291','ljennings@classicmodelcars.com','1',1143,'Sales Rep'),(1166,'Thompson','Leslie','x4065','lthompson@classicmodelcars.com','1',1143,'Sales Rep'),(1188,'Firrelli','Julie','x2173','jfirrelli@classicmodelcars.com','2',1143,'Sales Rep'),(1216,'Patterson','Steve','x4334','spatterson@classicmodelcars.com','2',1143,'Sales Rep'),(1286,'Tseng','Foon Yue','x2248','ftseng@classicmodelcars.com','3',1143,'Sales Rep'),(1323,'Vanauf','George','x4102','gvanauf@classicmodelcars.com','3',1143,'Sales Rep'),(1337,'Bondur','Loui','x6493','lbondur@classicmodelcars.com','4',1102,'Sales Rep'),(1370,'Hernandez','Gerard','x2028','ghernande@classicmodelcars.com','4',1102,'Sales Rep'),(1401,'Castillo','Pamela','x2759','pcastillo@classicmodelcars.com','4',1102,'Sales Rep'),(1501,'Bott','Larry','x2311','lbott@classicmodelcars.com','7',1102,'Sales Rep'),(1504,'Jones','Barry','x102','bjones@classicmodelcars.com','7',1102,'Sales Rep'),(1611,'Fixter','Andy','x101','afixter@classicmodelcars.com','6',1088,'Sales Rep'),(1612,'Marsh','Peter','x102','pmarsh@classicmodelcars.com','6',1088,'Sales Rep'),(1619,'King','Tom','x103','tking@classicmodelcars.com','6',1088,'Sales Rep'),(1621,'Nishi','Mami','x101','mnishi@classicmodelcars.com','5',1056,'Sales Rep'),(1625,'Kato','Yoshimi','x102','ykato@classicmodelcars.com','5',1621,'Sales Rep'),(1702,'Gerard','Martin','x2312','mgerard@classicmodelcars.com','4',1102,'Sales Rep');
select * from offices;
select * from employees;
select * from employees limit 10;
select * from offices;
select officecode from offices where country='usa';
select * from employees where officecode in (select officecode from offices where country='usa');
select dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select first_name, last_name, dep_id, salary from myemp as e where salary > (select avg(salary) from myemp where dep_id = e,dep_id);
select first_name, last_name, dep_id, salary from myemp as e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name, last_name, dep_id, salary from myemp as e where salary > (select avg(salary) from myemp where dep_id = e.dep_id) order by dep_id;
exit
use anadb;
select * from students;
alter table students add  column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid student_id integer;
select * from students;
desc students;
alter table students modify column sname char(50);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
show tables;
select * from myclass;
select * from students;
use workshop;
select first_name, sum(salalry) over() from myemp;
select first_name, sum(salary) over() from myemp;
select first_value() over(order by salary desc) from myemp;
select first_value(*) over(order by salary desc) from myemp;
select first_value (*) over(order by salary desc) from myemp;
select first_value (first_name, last_name) over(order by salary desc) from myemp;
select first_name, last_name, first_value (first_name) over(order by salary desc) from myemp;
select first_name, last_name, first_value (first_name) over(partition by dep_id, order by salary desc) from myemp;
select first_name, last_name, first_value (first_name) over(partition by dep_id order by salary desc) from myemp;
select first_name, last_name, last_value (first_name) over(partition by dep_id order by salary ) from myemp;
select first_name, last_name, , dep_id, last_value (first_name) over(partition by dep_id order by salary ) from myemp;
select first_name, last_name, dep_id, last_value (first_name) over(partition by dep_id order by salary ) from myemp;
CREATE TABLE basic_pays (
employee_id int,
fiscal_year INT,
salary DECIMAL(10 , 2 ),
PRIMARY KEY (employee_id, fiscal_year)
);
CREATE TABLE basic_pays ( employee_id int, fiscal_year INT, salary DECIMAL(10 , 2 ), PRIMARY KEY (employee_id, fiscal_year) );
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(100,2017,24000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(101,2017,17000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(102,2017,17000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(103,2017,9000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(104,2017,6000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(105,2017,4800);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(106,2017,4800);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(107,2017,4200);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(108,2017,12000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(109,2017,9000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(110,2017,8200);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(111,2017,7700);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2017,INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2017,INSERT,6INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2017,INSERT11INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2017,INSERT31INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2017,INSE,29INSERT INTO basic_pays(emps(employee_id, fiscal_year,salary) VALUES(117,2017,2800);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(118,2017,26INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUESALUES(119,2017,2500);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INS820INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,017,790INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(12S(123,2017,650INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUVALUES(126,2017,270INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INS820INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,017,790INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(12S(123,2017,650INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUVALUES(126,2017,270INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INSERT I62INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2017,80INS820IN39TO basic_pays(employee_id, fiscal_year,salary) VALUES(204,2017,10000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(205,2017,12000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(206,2017,8300);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(100,2018,25920);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(101,2018,18190);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(102,2018,18360);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(103,2018,9720);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(104,2018,6060);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(105,2018,4992);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(106,2018,5040);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(107,2018,4284);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(108,2018,12360);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(109,2018,9540);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(110,2018,8692);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(111,2018,7931);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2018,8580);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(113,2018,7107);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(114,2018,11440);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(115,2018,3131);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(116,2018,3161);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(117,2018,2940);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(118,2018,2652);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(119,2018,2650);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2018,8800);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(121,2018,8364);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(122,2018,8611);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(123,2018,6565);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(126,2018,2808);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(145,2018,14560);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(146,2018,14580);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(176,2018,9202);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(177,2018,8988);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(178,2018,7630);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(179,2018,6448);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(192,2018,4320);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(193,2018,4173);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(200,2018,4620);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(201,2018,13000);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(202,2018,6360);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(203,2018,7085);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(204,2018,10100);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(205,2018,12360);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(206,2018,8632);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(100,2020,26179.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(101,2020,19463.3);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(102,2020,19278);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(103,2020,10206);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(104,2020,6605.4);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(105,2020,5391.36);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(106,2020,5191.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(107,2020,4498.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(108,2020,13472.4);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(109,2020,9826.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(110,2020,9561.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(111,2020,8248.24);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(112,2020,9352.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(113,2020,7107);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(114,2020,12012);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(115,2020,3224.93);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(116,2020,3287.44);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(117,2020,3175.2);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(118,2020,2864.16);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(119,2020,2782.5);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(120,2020,9152);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(121,2020,8531.28);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(122,2020,8697.11);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(123,2020,6630.65);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(126,2020,2920.32);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(145,2020,16016);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(146,2020,14871.6);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(176,2020,9938.16);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(177,2020,9167.76);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(178,2020,7858.9);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(179,2020,6641.44);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(192,2020,4406.4);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(193,2020,4339.92);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(200,2020,4712.4);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(201,2020,14040);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(202,2020,6614.4);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(203,2020,7155.85);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(204,2020,10908);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(205,2020,12730.8);
INSERT INTO basic_pays(employee_id, fiscal_year,salary) VALUES(206,2020,8890.96);
select * from basic_pays;
select emp_id, fiscal_year, salary, lag(salary) over (partition by emp_id order by fiscal_year) from basic_pays;
select employee_id, fiscal_year, salary, lag(salary) over (partition by emp_id order by fiscal_year) from basic_pays;
select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) from basic_pays;
select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays;
select employee_id, fiscal_year, salary - lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays;
select employee_id, fiscal_year, salary , lag(salary) over (partition by employee_id order by fiscal_year), salary - lag(salary) over (partition by employee_id order by fiscal_year) prev_salary from basic_pays;
select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays;
with (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) as a
select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from basic_pay;
with (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) as a select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from basic_pay;
with (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) as a select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) 
select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from basic_pay;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays)  select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from basic_pay;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) 
select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays)  select emp_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays) 
select employee_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salalry from basic_pays)  select employee_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary) over (partition by employee_id order by fiscal_year) prev_salary from basic_pays) select employee_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
select eid, fname, lname from ( select emp_id as eid, first_name as fname, last_name as lname from myemp e);
select eid, fname, lname from ( select emp_id as eid, first_name as fname, last_name as lname from myemp ) e;
with e as ( select emp_id as eid, first_name as fname, last_name as lname from myemp ) select eid, fname, lname from e;
select first_name, last_name, dep_id, last_value (first_name) over(partition by dep_id order by salary ) from myemp;
select first_name, last_name, dep_id, last_value (first_name) over(partition by dep_id order by salary RANGE BETWEEN UNBOUNDED PRECEDING AND 
        UNBOUNDED FOLLOWING) from myemp;
select first_name, last_name, dep_id, last_value (first_name) over(partition by dep_id order by salary RANGE BETWEEN UNBOUNDED PRECEDING AND          UNBOUNDED FOLLOWING) from myemp;
with a as (select employee_id, fiscal_year, salary, lag(salary,1) over (partition by employee_id order by fiscal_year) prev_salary from basic_pays) select employee_id, fiscal_year, salary, (salary - prev_salary)/prev_salary*100 as increment from a;
with a as (select employee_id, fiscal_year, salary, lag(salary,2) over (partition by employee_id order by fiscal_year) prev_salary from basic_pays) select employee_id, fiscal_year, salary, prev_salary, (salary - prev_salary)/prev_salary*100 as increment from a;
CREATE TABLE tt (
col INT NOT NULL
);
CREATE TABLE tt ( col INT NOT NULL );
INSERT INTO tt(col) 
VALUES(1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
INSERT INTO tt(col)  VALUES(1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
SELECT * FROM tt;
SELECT 
col, 
NTILE (3) OVER (
;
SELECT  col,  NTILE (3) OVER (;
SELECT 
col, 
NTILE (3) OVER (
ORDER BY col
) buckets
FROM 
t;
SELECT  col,  NTILE (3) OVER ( ORDER BY col ) buckets FROM  t;
SELECT 
col, 
NTILE (3) OVER (
ORDER BY col
) buckets
FROM 
tt;
SELECT  col,  NTILE (3) OVER ( ORDER BY col ) buckets FROM  tt;
select * from tt;
SELECT  col,  NTILE (4) OVER ( ORDER BY col ) buckets FROM  tt;
select sum(salary) from myemp;
select dep_id, sum(salary) from myemp group by dep_id;
select count(*) from myemp;
select * from myemp limit 10;
select first_name, last_name, salary, first_value() over( order by salary desc) as highest_salary from myemp;
select first_name, last_name, salary, first_value over( order by salary desc) as highest_salary from myemp;
select first_name, last_name, salary, first_value(first_name) over( order by salary desc) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, first_value(first_name) over( partition by dep_id, order by salary desc) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, first_value(first_name) over( partition by dep_id order by salary desc) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, first_value(first_name) over( partition by dep_id order by salary) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over( partition by dep_id order by salary) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over( partition by dep_id ) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over( ) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over( partition by dep_id ) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) , max(salary) over( partition by dep_id ) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) , max(salary) over( partition by dep_id ) as highest_salary from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp
window w as (patition dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp window w as (patition dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp window w as (patition by dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp
window w as (partition dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp window w as (partition dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp
window w as (partition by dep_id);
select first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w as highest_salary from myemp window w as (partition by dep_id);
show tables;
select * from basic_pays;
select * from basic_pays limit 10;
select employee_id, fiscal_year, salary, lag(salary) over( partition by employee_id ) prev_salary from basic_pays;
select emp_id, first_name, last_name from (select emp_id, first_name, last_name from myemp) as e;
select emp_id, first_name, last_name from myemp;
select emp_id as eid, first_name as fname, last_name as lname from myemp;
with e as (select emp_id as eid, first_name as fname, last_name as lname from myemp) select select eid, fname, lname  from e;
with e as (select emp_id as eid, first_name as fname, last_name as lname from myemp)  select eid, fname, lname  from e;
select employee_id, fiscal_year, salary, lag(salary) over( partition by employee_id ) prev_salary from basic_pays;
with e as (select employee_id, fiscal_year, salary, lag(salary) over( partition by employee_id ) prev_salary from basic_pays) select employee_id, fiscal_year, salary, prev_salary, (salary - prev_salary)*100/ prev_salary as increment from e;
select employee_id, fiscal_year, salary, lag(salary) over( partition by employee_id ) prev_salary from basic_pays;
select employee_id, fiscal_year, salary, lag(salary,2) over( partition by employee_id ) prev_salary from basic_pays;
select employee_id, fiscal_year, salary, lead(salary,1) over( partition by employee_id ) prev_salary from basic_pays;
select * from tt;
select col, ntile(2) over() as bins from tt;
select col, ntile(3) over() as bins from tt;
select first_name, last_name, salary, first_values(first_name) over ( order by salary desc) from myemp;
select first_name, last_name, salary, first_value(first_name) over ( order by salary desc) from myemp;
select first_name, last_name, salary, first_value(first_name) over ( partition by dep_id order by salary desc) from myemp;
select first_name, last_name, salary, first_value(first_name) over ( partition by dep_id order by salary) from myemp;
select first_name, last_name, salary, last_value(first_name) over ( partition by dep_id order by salary desc range between unbounded preceding and unbounded following) from myemp;
select first_name, last_name, salary, last_value(first_name) over ( partition by dep_id order by salary desc range between unbounded preceding and unbounded following) as fname from myemp;
exit
use anadb;
help
\134c
create table patients (pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1, 'Harry', '1993-06-05', '2022-02-26 09:30:00');
insert into patients values(2, 'Potter', '1989-02-13', '2022-02-26 21:30:00');
select * from patients;
select 5 + 6 as result;
select 5*6 as result;
select 5 + null as result;
select 5 = 5 as result;
select 5 = 4 as result;
select 5 = null as result;
select 5 is null as result;
select 5 is not null as result;
create table mytab(id integer, name char(30));
show tables;
drop table mytab;
show tables;
select * from students;
insert into students values(3, 'Mary', 'Analytics', 78);
select * from students;
insert into students values(4, 'Pete', null, 56);
insert into students(student_id, sname, marks) values (5,'Larry', 45);
select * from students;
insert into students values(6,'Harry', 'Magic', 87),(7,'King', 'Management', 77),(8,'Elise', 'Dance', 99);
select * from students;
update students set sname = 'Thomas' where sid = 1;
update students set sname = 'Thomas' where student_id = 1;
select * from students;
set sql_safe_updates= 0;
update students set sname = 'Parry' where sname ='Larry';
select * from students;
select 5 = null as result;
update students set course = 'Mysql' where course is null;
select * from students;
update students set marks = 50, course = 'Magic' where marks is null;
select * from students;
update students set course = 'Mysql';
select * from students;
delete from students where student_id = 1;
select * from students;
delete from students where sname = 'parry';
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry', 'Magic', 87),(7,'King', 'Management', 77),(8,'Elise', 'Dance', 99);
select * from students;
truncate students;
select * from students;
desc students;
alter table students  add column sid integer first;
desc students;
use exampledb;
call proc_if2(3);
call proc_if2(5);
call proc_if2(15);
call proc_case(1);
call proc_case(4);
call proc_simpleloop();
call proc_simpleloop(4);
call proc_simpleloop(2);
call proc_while(5);
call proc_while(3);
call proc_repeat(5)
;
call proc_repeat(5);
call proc_repeat(7);
select * from ss;
call proc_except();
select * from payments;
desc payments;
insert into payments values(1, null);
call make_payment(1,700);
select * from payments;
call make_payment(2, null);
desc fraud;
select * from fraud;
call make_payment(2, 350);
select * from payments;
select * from fraud;
call make_payment(3, null);
select * from payments;
select * from fraud;
call make_payment(4, 350);
select * from payments;
select * from fraud;
call make_payment(5, null);
select * from payments;
select * from fraud;
call make_payment(6, null);
select * from fraud;
exit
use exampledb;
select * from ss;
select name from books;
call proc_except2(1)
;
call proc_except2(2);
call proc_except2(1);
call proc_except2(2);
call proc_except2(1);
call proc_except2(2);
call proc_signal(9);
call proc_signal(-9);
select * from ss;
select * from products limit 10;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
alter table orders add column stock_left integer after vendor;
desc orders;
select * from orders;
call orders();
select * from orders;
delete from orders;
select * from orders;
call orders();
select * from orders;
select count(*) from products;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limt 10;
select * from myemp limit 10;
select first_name, last_name, experience(emp_id) as experience from myemp limit 10;
select first_name, last_name, experience(emp_id) as experience from myemp where experience(emp_id) < 10;
exit
use exampledb;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 12;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 7;
select * from books;
select * from book_sales;
select * from myemp limit 10;
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
show tables;
select * from employees limit 10;
select * from offices;
select officecode from offices where country = 'usa';
select * from employees where officecode in (select officecode from offices where country = 'usa');
select * from employees where officecode = (select officecode from offices where country = 'usa');
select * from employees where officecode in (select officecode from offices where country = 'usa');
select officecode from offices where country = 'usa';
select max(salary) from myemp;
select * from myemp where salalry > ( select avg(salary) from myemp);
select * from myemp where salary > ( select avg(salary) from myemp);
select dep_id, avg(salary) from myemp group by dep_id  order by dep_id; 
select first_name, last_name, dep_id, salary from myemp as e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select * from products limit 10;
show tables;
desc accounts;
select * from accounts;
desc transactions;
select * from transactions;
select * from accounts;
select * from transactions;
select * from accounts;
select * from transactions;
SELECT * FROM books 
      WHERE authorid = 5;
SELECT * FROM books        WHERE authorid = 5;
select * from universities;
exit
use analytics
select * from students group by user_id;
show tables;
select * from students_d group by user_id;
select * from students_d ;
with s as (
select user_id, date,aattendance as d1, 
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date)
) select user_id , date, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date,aattendance as d1,  lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date) ) select user_id , date, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id,aattendance as d1, 
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , date_id, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id,aattendance as d1,  lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , date_id, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id,attendance as d1, 
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , date_id, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id,attendance as d1,  lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , date_id, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id as d1, attendance
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id as d1, attendance lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id as d1, attendance,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id as d1, attendance, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id , attendance,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , d1, attendance from s where attendance='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , d1, attendance from s where attendance='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , d1, attendance from s where attendance='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , d1, attendance from s where attendance='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , d1, attendance from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
select * from students_d order by user_id;
update students_d set attendance = 'p' where user_id = 2 and date_id = '2022-02-15';
update students_d set attendance = 'a' where user_id = 2 and date_id = '2022-02-17';
select * from students_d order by user_id;
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id);
select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id);
delete from students_d;
insert into students_d values
('2022-02-14', 001, 'p'), ('2022-02-14', 002, 'p'),('2022-02-14', 003, 'a'), ('2022-02-14', 004, 'p'),
('2022-02-15', 001, 'p'), ('2022-02-15', 002, 'p'),('2022-02-15', 003, 'a'), ('2022-02-15', 004, 'p'),
('2022-02-16', 001, 'p'),('2022-02-16', 002, 'p'),('2022-02-16', 003, 'a'), ('2022-02-16', 004, 'p'),
('2022-02-17', 001, 'p'), ('2022-02-17', 002, 'a'), ('2022-02-17', 003, 'p'),('2022-02-17', 004, 'p');
insert into students_d values ('2022-02-14', 001, 'p'), ('2022-02-14', 002, 'p'),('2022-02-14', 003, 'a'), ('2022-02-14', 004, 'p'), ('2022-02-15', 001, 'p'), ('2022-02-15', 002, 'p'),('2022-02-15', 003, 'a'), ('2022-02-15', 004, 'p'), ('2022-02-16', 001, 'p'),('2022-02-16', 002, 'p'),('2022-02-16', 003, 'a'), ('2022-02-16', 004, 'p'), ('2022-02-17', 001, 'p'), ('2022-02-17', 002, 'a'), ('2022-02-17', 003, 'p'),('2022-02-17', 004, 'p');
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select user_id , date_id, d1 from s where d1='p' and d2='p' and d3 ='p';
with s as (
select user_id, date_id , attendance as d1,
lead(attendance) over(w) as d2,
lead(attendance,2) over(w) as d3
from students_d
window w as (partition by user_id order by date_id)
) select distinct user_id from s where d1='p' and d2='p' and d3 ='p';
with s as ( select user_id, date_id , attendance as d1, lead(attendance) over(w) as d2, lead(attendance,2) over(w) as d3 from students_d window w as (partition by user_id order by date_id) ) select distinct user_id from s where d1='p' and d2='p' and d3 ='p';
exit
use anadb;
select * from myemp;
select * from myemp limit 10;
select first_name, last_name, dep_id from myemp;
select first_name, last_name, dep_id from myemp limit 10;
select first_name, last_name, dep_id from myemp limit 15;
select * from myemp limit 10;
select first_name, last_name, salary, salary*0.20 from myemp;
select first_name, last_name, salary, salary*0.20 from myemp limit 10;
select first_name, last_name, salary, salary*0.20, salary+salary*0.20 from myemp;
select first_name, last_name, salary, salary*0.20, salary+salary*0.20 from myemp limit 10;
select first_name, last_name, salary, salary*0.20 as bonus, salary+salary*0.20 as total from myemp limit 10;
select first_name as fname, last_name as lname, salary, salary*0.20 as bonus, salary+salary*0.20 as total from myemp limit 10;
select * from myemp limit 10;
select distinct dep_id from myemp;
select * from person;
select distinct fname, lname from person;
desc person;
select * from person;
select distinct fname from person;
select distinct lname from person;
select distinct fname, lname from person;
select distinct dep_id,mgr_id;
select distinct dep_id,mgr_id from myemp;
select * from myemp where dep_id = 60;
select first_name, last_name, dep_id  from myemp where dep_id = 60;
select first_name, last_name, dep_id  from myemp where salary > 10000;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary < 3000;
select * from myemp where hire_date > '2000-01-01';
select * from myemp where dep_id != 80;
select * from myemp where dep_id = 80 and salary> 10000;
select * from myemp where dep_id = 80 or salary> 10000;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id = 20;
select * from myemp where dep_id IN (60,40,20);
select * from myemp where dep_id =60 or 40;
select 5 = 7;
select 5 <> 7;
select * from myemp where dep_id IN= (60,40,20);
select * from myemp where dep_id = 80 or salary> 10000;
select * from myemp where dep_id = 80 and salary> 10000;
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
select * from myemp;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by last_name;
select * from myemp order by hire_date;
select * from myemp order by dep_id, hire_date;
select first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date;
select hire_date, year(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select avg(salary), min(salary), max(salary), sum(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id order by dep_id, mgr_id
;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select first_bname, dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select first_name, dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select count(*) from myemp;
select dep_id, count(dep_id) from myemp group by dep_id;
select dep_id, count(*) from myemp group by dep_id;
select dep_id, count(*) as cnt from myemp group by dep_id order by cnt;
select dep_id, count(*) as cnt from myemp group by dep_id order by cnt desc;
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
selectn* from meals;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate, drinks.rate from meals cross join drinks;
select mealname, drinkname, meals.rate+drinks.rate from meals cross join drinks;
select mealname, drinkname, meals.rate+drinks.rate as total from meals cross join drinks;
select m.mealname, d.drinkname, m.rate+d.rate from meals as m cross join drinks as d;
select * from movies;
select * from members;
exit
use analytics;
select * from ab_nyc_2019 limit 10;
select
;
select * from ab_nyc_2019 limit 10;
select * from ab_nyc_2019 where room_type ='Private room' and price > 500;
select * from ab_nyc_2019 where room_type ='Private room' and price > 100;
select * from ab_nyc_2019 where availability_365 = 365;
use anadb;
select * from myemp;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 0;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.emp_id,mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.emp_id,mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.emp_id, concat(mgr.first_name,' ', mgr.last_name) as manager from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, concat( emp.first_name,' ', emp.last_name) as employee , mgr.emp_id, concat(mgr.first_name,' ', mgr.last_name) as manager from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, concat( emp.first_name,' ', emp.last_name) as employee , mgr.emp_id, concat(mgr.first_name,' ', mgr.last_name) as manager from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 10;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age > 18),
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
desc students;
insert into students values(1,'Tom', 23, 'Mysql');
insert into students values(1,'Jon', 23, 'Mysql');
insert into students values(2,'Jon', 23, 'Mysql');
select * from students;
insert into students values(3,'Mary, 16,'Analytics');
';
insert into students values(3,'Mary, 16,'Analytics');\012';
insert into students values(3,'Mary', 16,'Analytics');
insert into students values(3,'Mary', 96,'Analytics');
select * from students;
insert into students values(4,null, 34,'Mysql');
insert into students (sid, age,course) values(5, 34,'Mysql');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age,course) values(5, 34,'Mysql');
insert into students values(4,null, 34,'Mysql');
select * from students;
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
alter table students auto_increment = 100;
desc students;
select * from authors;
select * from books;
drop table authors;
drop table  books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50);
create table authors(authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
create table mytab (id integer primary key auto_increment, name char(30), age integer);
desc mytab;
insert into mytab (name, age) values('Tom', 25
);
insert into mytab (name, age) values('Tom', 25 );
select * from mytab;
insert into mytab (name, age) values('Harry', 56),('Potter', 45);
select * from mytab;
insert into mytab values (5,'Lara', 34);
select * from mytab;
insert into mytab (name, age) values('Larry', 23);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tom', 25 );
select * from mytab;
insert into mytab (name, age) values('Larry', 23);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Larry', 23);
select * from mytab;
truncate mytab;
select * from mytab;
alter table mytab auto_increment= 101;
insert into mytab (name, age) values('Larry', 23);
select * from mytab;
insert into mytab (name, age) values('Tom', 25 );
select * from mytab;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id from myemp;
select * from myemp limit 10;
create view myview as select emp_id, first_name, last_name, job_id from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from myemp limit 10;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
show tables;
create view aview as select * from authors where authorid < 10;
select * from authors;
select * from aview;
insert into aview values(11,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jon SNOW');
insert into aview values(1,'Jon SNOW');
select * from aview;
select * from authors;
SHOW CREATE TABLE STUDENTS;
SHOW CREATE TABLE BOOKS;
SHOW CREATE TABLE AVIEW;
exit
use exampledb;
create table patients(pid integer, pname varchar(30), dob date, toa datetime);
desc patients;
insert into patients values(1,'Harry', '1997-09-13', '2022-03-06 07:30:00');
insert into patients values(2,'Potter', '1998-07-23', '2022-03-06 19:30:00');
select * from patients;
select 3 + 4 as result;
select 367*567 as result;
select 5 + null as result;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(255);
desc students;
show tables;
alter table students rename to myclass;
show tables;
rename table myclass to students;
show tables;
create table mytab (id integer, name varchar(30));
show tables;
drop table mytab;
show tables;
select * from students;
insert into students  values(3,'Pete', 'Mysql', 78);
select * from students;
insert into students  values(4,'Lary', null, 89);
select * from students;
insert into students (sid, sname, marks) values(5,'Harry', 77);
insert into students (std_id, sname, marks) values(5,'Harry', 77);
select * from students;
insert into students values(6,'George', 'Analytics', 66),(7,'Lara', 'Dance', 98),(8,'King','Mgmnt', 88);
select * from students;
update students set sname ='Jonathan' where std_id = 1;
select * from students;
update students set course = 'Data Science' where sname = 'george';
select * from students;
update students set course = 'Dance', marks = 38 where std_id = 8;
select * from students;
update students set marks = 0 where course = null;
select * from students;
update students set marks = 0 where course is null;
select * from students;
update students set course = 'Mysql';
select * from students;
exit
use exampledb;
select * from students;
insert into students vaalues(9, 'Queen','Mysql',-9);
insert into students values(9, 'Queen','Mysql',-9);
select * from students;
create table test(id integer primary key , sal float(6,2), num unsigned decimal(4,2));
create table test(id integer primary key , sal float(6,2), num decimal(4,2) unsigned);
insert into test values(10, -2000.00, -13.00);
insert into test values(10, -2000.00, 13.00);
select * from test;
delete from students where std_id =9;
drop table test;
create table test(id integer primary key auto_increment, sal float(6,2), num decimal(4,2) unsigned);
alter table test auto_increment= -100;
alter table test auto_increment= 100;
alter table test auto_increment= -100;
alter table test auto_increment= (-100);
show tables;
drop table test;
show tables;
select * from students;
delete from students where std_id = 3;
select * from students;
delete from students where sname= 'King';
select * from students;
delete from students where marks is null;
select * from students;
delete from students ;
select * from students;
insert into students values(6,'George', 'Analytics', 66),(7,'Lara', 'Dance', 98),(8,'King','Mgmnt', 88);
select * from students;
truncate students;
select * from students;
show tables;
select * from myemp;
select count(*) from myemp;
select * from myemp limit 10;
select * from myemp limit 5;
select first_name, last_name, job_id, salary from myemp limit 10;
select first_name, last_name, job_id, salary, salary*0.2 from myemp limit 10;
select concat(first_name, last_name), job_id, salary, salary*0.2 from myemp limit 10;
select concat(first_name, ' ', last_name), job_id, salary, salary*0.2 from myemp limit 10;
select concat(first_name, ' ', last_name) as name, job_id, salary, salary*0.2 bonus from myemp limit 10;
select concat(first_name, ' ', last_name) as name, job_id role, salary, salary*0.2 bonus from myemp limit 10;
select * from myemp limit 5;
select * from myemp ;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from person;
select distinct fname,lname from person;
select * from myemp;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by last_name;
select * from myemp order by last_name desc;
select * from myemp order by hire_date;
select * from myemp order by hire_date desc;
,
;
select * from myemp where dep_id = 60;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where dep_id <> 80;
select * from myemp where salary between 10000 and 15000;
select * from myemp where salary >= 10000 and dep_id = 80;
select * from myemp where salary >= 10000 or dep_id = 80;
select * from myemp where salary dep_id = 60 or dep_id=20 or dep_id=40;
select * from myemp where dep_id = 60 or dep_id=20 or dep_id=40;
select * from myemp where dep_id in (20,40,60);
select hire_date, year(hire_date) from myemp limit 10;
select sum(salary) from myemp;
select avg(salary) from myemp;
select min(salary), max(salary), avg(salary) from myemp;
select avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id in (40,50,80);
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies;
select * from members;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select mealname, drinkname, meals.rate, drinks.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select * from movies;
select * from members;
select * from myemp limit 10;
select first_name, last_name, mgr_id from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, concat( emp.first_name,' ', emp.last_name) as emp_name, emp.mgr_id, concat(mgr.first_name, ' ',mgr.last_name) as mgr_name from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
select * from myemp;
select * from myemp limit 10;
select * emp_id, first_name, last_name, job_id from myemp ;
select emp_id, first_name, last_name, job_id from myemp ;
create view myview as select emp_id, first_name, last_name, job_id from myemp ;
select * from myview;
select * from myemp limit 10;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp limit 10;
ceate view dep60 as select * from myemp where dep_id = 60;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 8;
select * from aview;
insert into aview values(11,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 8 WITH CHECK OPTION;
DELETE FROM AUTHORS WHERE AUTHORID = 1;
DELETE FROM AUTHORS WHERE AUTHORID = 2;
select * from authors;
insert into aview values(12,'Jon Snow');
insert into aview values(2,'Jon Snow');
exit
use exampledb;
show tables;
drop view myview;
drop view rentals;
drop view aview;
select emp_id, first_name, last_name, mgr_id from myemp;
select emp_id, first_name, last_name, mgr_id from myemp limit 15;
select emp.emp_id , emp.first_name as efname, emp.last_name as elname, mgr.fname as mfname, mgr.lname as mlname from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id; 
select emp.emp_id , emp.first_name as efname, emp.last_name as elname, mgr.first_name as mfname, mgr.last_name as mlname from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
drop table students;
create table students ( sid integer UNIQUE, sname varchar(50) NOT NULL, age integer CHECK(age > 18) , course varchar(50) );
desc students;
insert into students vlaues(1,'Jon', 23,'MySql');
insert into students values(1,'Jon', 23,'MySql');
select * from students;
create table students2 as select * from students;
select * from students2;
select * from students;
insert into students values(1,'Tom', 23, 'Mysql');
insert into students values(2,'Tom', 23, 'Mysql');
select * from students;
insert into students values(3,'Lara', 16, 'Analytics');
insert into students values(3,'Lara', 26, 'Analytics');
select * from students;
insert into students values(4,null,28,'Analytics');
insert into students (sid, age, course) values(5,32,'Mysql');
desc students;
alter table students modify column sname varchar(50) NOT NULL DEFAULT 'Smith';
desc students;
insert into students (sid, age, course) values(5,32,'Mysql');
select * from students;
insert into students values(4,null,28,'Analytics');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors (authorid integer PRIMARY KEY, name varchar(255));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
show tables;
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc mytab;
insert into mytab (name, age) values('Tom', 23);
select * from mytab;
insert into mytab (name, age) values('Jon', 18),('Jim', 34);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tom', 23);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Jon', 18),('Jim', 34);
select * from mytab;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id, salary from myemp;
create view myview as select emp_id, first_name, last_name, job_id, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, if(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from myemp limit 15;
create view dep60 as select * from myemp where dep_id = 60;
drop view dep60;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
show tables;
create view aview as select * from authors where authorid < 10;
select * from authors;
select * from aview;
insert into aview values(11,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(12,'Jon Snow');
insert into aview values(1,'Jon Snow');
select * from aview;
select * from authors;
select * from students;
insert into students values(6,'King', 67,'Mysql');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'King', 67,'Mysql');
select * from students;
rollback;
select * from students;
insert into students values(7,'King', 67,'Mysql');
commit;
select * from students;
rollback;
select * from students;
call myproc();
exit
use exampledb;
call myproc();
call myproc(7);
call myproc(3);
call proc_if(7);
call proc_if(-7);
call proc_if(7);
call proc_if(-7);
call proc_if(0);
call proc_if2(0);
call proc_if2(1);
call proc_if2(4);
call proc_if2(14);
call proc_case(2);
exit
use exampledb;
call proc_simpleloop();
call proc_simpleloop(4);
call proc_simpleloop(3);
call proc_simpleloop(7);
call proc_repeat(4);
call proc_repeat(5);
call proc_while(2);
call proc_while(6);
select * from hghghg;
call proc_except1();
call proc_except1(1);
call proc_except1(2);
call proc_except1(1);
call proc_except1(2);
call proc_except1(1);
call proc_except1(2);
select * from payments;
desc payments;
insert into payments values(1,null);
desc fraud;
use anadb;
select exp(hire_date) from myemp;
use exampledb;
call make_payment(1,100);
select * from from payments;
select * from  payments;
call make_payment(2, null);
desc fraud;
call make_payment(2, 300);
select * from  payments;
select * from  fraud;
call make_payment(3, null);
select * from  payments;
select * from  fraud;
exit
use exampledb;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call orders();
select * from orders;
select * from products;
select hire_date, year(hire_date) from myemp limit 10;
select first_name, hire_date, experience(emp_id) from myemp limit 15;
select first_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
select * from book_sales;
update books set sales = sales + 3 where bookid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 7;
select * from books;
select * from book_sales;
show tables;
desc accounts;
select * from accounts;
SELECT * FROM books 
      WHERE authorid = 5;
SELECT * FROM books        WHERE authorid = 5;
exit
use anadb;
select * from students;
insert into students values(6,'Pete', 34,'Cooking');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7.'Else', 18,'Dance');
insert into students values(7,'Else', 18,'Dance');
insert into students values(7,'Else', 19,'Dance');
select * from students;
rollback;
select * from students;
insert into students values(7,'Elsa', 19,'Dance');
select * from students;
commit;
rollback;
select * from students;
set autocommit = 1;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
insert into tt values('e');
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
show create table students;
show indexes from students;
desc students;
show indexes from authors;
use employees;
select count(*) from employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date> '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date> '2000-01-01';
use  anadb;
call myproc('Tom');
call proc2();
call proc2(5);
select title, authorid from books where bookid = 7;
select name from authors where authorid = 5;
call proc_if(2);
call proc_if(-2);
call proc_if(2);
call proc_if(-2);
call proc_if2(2);
call proc_if2(5);
call proc_if2(7);
call proc_if2(17);
call proc_case(3);
call proc_case(13);
show tables;
call proc_if(100);
call proc_if3(100);
call proc_if3(105);
call proc_if3(209);
call proc_if3(120);
select * from myemp where salary > 9000;
call proc_if3(169);
call proc_simpleloop();
help
call proc_simpleloop(5);
call proc_simpleloop(3);
call proc_repeat(4);
call proc_while(6);
call proc_while(2);
select * from ghghg;
call proc_ex();
call proc_ex(1);
call proc_ex(2);
call proc_ex(1);
select * from payments;
desc payments;
insert into payments values(1, null);
desc fraud;
call make_payment(2,350);
select * from payments;
call make_payment(3, null);
select * from payments;
desc fraud;
call make_payment(3, null);
select * from payments;
select * from fraud;
call make_payment(4,500);
select * from payments;
select * from fraud;
call make_payment(5, null);
select * from payments;
select * from fraud;
exit
use analytics;
select * from data1 limit 10;
desc data1;
select count(*) from data1 where source_id like '%?%';
select count(*) from data1 ;
select count(*) from data2;
desc data2;
alter table data2 drop column myunknowncolumn;
alter table data2 drop column myunknowncolumn_[0];
desc data2;
alter table data2 drop column MyUnknownColumn_[0];
alter table data2 drop column `MyUnknownColumn_[0]`;
select source_id, supplier_number, Commercial_Gross_Margin,Operating_Profit from data1 left join data2 on supplier_number = surce_id;
select source_id, supplier_number, Commercial_Gross_Margin,Operating_Profit from data1 left join data2 on supplier_number = source_id;
select distinct source_id from data1;
select distinct supplier_number from data2;
select source_id, supplier_number, Commercial_Gross_Margin,Operating_Profit from data1 left join data2 on supplier_number = source_id;
select distinct source_id from data1;
select distinct source_id from data2;
select source_id, supplier_number, Commercial_Gross_Margin,Operating_Profit from data1 join data2 on supplier_number = source_id;
select count(*) from datat1;
select count(*) from data1;
select count(*) from data2;
desc data1;
desc data2;
select max(source_id) from data1;
select max(supplier_number) from data2;
select min(supplier_number) from data2;
select min(source_id) from data1;
select distinct source_id, supplier_number from data1 join data2 on supplier_number = source_id;
select distinct source_id, supplier_number from data1 join data2 on supplier_number = source_id order by source_id;
select supplier_number from data2 where supplier_number < 40000;
drop view if exists vi_view;
select distinct source_id, supplier_number from data1 join data2 on supplier_number = source_id  where supplier_number < 30000 ;
with d2 as (select * from data2 where supplier_number = 12160) select * from d2;
exit
use assignment;
select * from emp;
select * from emp where date_sub(date(now()), INTERVAL 20 MONTH) < hire_date and salary < 2000;
select * from emp where salary < 2000;
select * from emp where salary < 2000 order by hire_date;
select * from emp where salary > 2000 order by hire_date;
select * from emp where date_sub(date(now()), INTERVAL 20 MONTH) < hire_date and salary >2000;
select * from emp where date_sub(date(now()), INTERVAL 36 MONTH) < hire_date and salary >2000;
select * from emp where date_sub(date(now()), INTERVAL 36 MONTH) < hire_date and salary > 5000;
select * from orders;
call order_status(2005,11);
call order_status(2005,05);
show tables;
select * from employee;
SELECT
    fname,lname
    salary,
    NTH_VALUE(fname, 3) OVER  (
        ORDER BY salary DESC
    ) third_highest_salary
FROM
    employee;
SELECT     fname,lname     salary,     NTH_VALUE(fname, 3) OVER  (         ORDER BY salary DESC     ) third_highest_salary FROM     employee;
select * from employee order by salary desc;
select * from emp;
SELECT
    first_name,last_name
    salary,
    NTH_VALUE(first_name,last_name, 3) OVER  (partition by gender
        ORDER BY salary DESC
    ) third_highest_salary
FROM
    emp;
SELECT     first_name,last_name     salary,     NTH_VALUE(first_name,last_name, 3) OVER  (partition by gender         ORDER BY salary DESC     ) third_highest_salary FROM     emp;
SELECT
    first_name,last_name
    salary,
    NTH_VALUE(first_name,last_name, 3) OVER  (partition by gender
        ORDER BY salary DESC
    ) 
FROM
    emp;
SELECT     first_name,last_name     salary,     NTH_VALUE(first_name,last_name, 3) OVER  (partition by gender         ORDER BY salary DESC     )  FROM     emp;
SELECT
    first_name,last_name
    salary,
    NTH_VALUE(first_name, 3) OVER  (partition by gender
        ORDER BY salary DESC
    ) third_highest_salary
FROM
    emp;
SELECT     first_name,last_name     salary,     NTH_VALUE(first_name, 3) OVER  (partition by gender         ORDER BY salary DESC     ) third_highest_salary FROM     emp;
SELECT
    first_name,last_name, gender,
    salary,
    NTH_VALUE(first_name, 3) OVER  (partition by gender
        ORDER BY salary DESC
    ) third_highest_salary
FROM
    emp;
SELECT     first_name,last_name, gender,     salary,     NTH_VALUE(first_name, 3) OVER  (partition by gender         ORDER BY salary DESC     ) third_highest_salary FROM     emp;
SELECT
    fname,lname, salary
    DENSE_RANK() OVER (
                 ORDER BY
                     salary DESC
                ) emp_rank
FROM
    employee;
SELECT     fname,lname, salary     DENSE_RANK() OVER (                  ORDER BY                      salary DESC                 ) emp_rank FROM     employee;
SELECT
    fname,lname, salary,
    DENSE_RANK() OVER (
                 ORDER BY
                     salary DESC
                ) emp_rank
FROM
    employee;
SELECT     fname,lname, salary,     DENSE_RANK() OVER (                  ORDER BY                      salary DESC                 ) emp_rank FROM     employee;
SELECT first_name,last_name, gender,
    salary,
    NTH_VALUE(first_name, 3) OVER  (partition by gender
        ORDER BY salary DESC
    ) third_highest_salary
FROM
    emp;
SELECT first_name,last_name, gender,     salary,     NTH_VALUE(first_name, 3) OVER  (partition by gender         ORDER BY salary DESC     ) third_highest_salary FROM     emp;
SELECT fname,lname salary,
NTH_VALUE(fname, 3) OVER  ( ORDER BY salary DESC) third_highest_salary FROM emp;
SELECT fname,lname salary, NTH_VALUE(fname, 3) OVER  ( ORDER BY salary DESC) third_highest_salary FROM emp;
SELECT fname,lname salary, NTH_VALUE(fname, 3) OVER  ( ORDER BY salary DESC) third_highest_salary FROM employee;
select * from employee;
show tables;
select * from orders;
select * from orderdetails;
select * from orderdetails limit 5;
select * from orders limit 5;
select distinct ordernumber from orders;
select * from orders;
select distinct ordernumber from orderdetails;
select * from orderdetails limit 5;
select * from orders limit 5;
select * from customers limit 5;
select count(*) from customers;
select distinct customer number from orders;
select distinct customernumber from orders;
select distinct status from orders;
select * from customers limit 5;
select * from orders limit 5;
select ordernumber, status, comments, c.customernumber, c.customername from orders join customers on c.customernumber = o.customernumber;
select o.ordernumber, o.status, o.comments, c.customernumber, c.customername from orders o join customers c on c.customernumber = o.customernumber;
select o.ordernumber, o.status, o.comments, c.customernumber, c.customername from orders o join customers c on c.customernumber = o.customernumber where status like '%dispute%';
select o.ordernumber, o.status, o.comments, c.customernumber, c.customername from orders o join customers c on c.customernumber = o.customernumber where status='disputed';
exit
use learndb;
create table patients(pid integer, pname varchar(30), dob date, toa datetime);
desc patients;
show tables;
insert into patients values(1, 'Harry', '1999-09-19', '2022-03-17 08:30:00');
insert into patients values(2, 'Potter', '2000-02-09', '2022-03-17 20:30:00');
select * from patients;
create table patrients (id integer);
create table patients (id integer);
create table if not exists patients (id integer);
desc patients;
select * from patients;
use anadb;
call proc_cursor();
select * from products limit 10;
desc orders;
alter table orders add column qty integer after vendor;
desc orders;
select * from orders;
proc_orders();
call proc_orders();
select * from orders;
select * from products;
select * from orders;
call proc_signal(9);
call proc_signal(-9);
select hire_date, year(hire_date) from myemp limit 10;
select * from patients;
select adddate(dob, interval 31 day) from patients;
select * from patients;
select month(dob) from patients;
select monthname(dob) from patients;
select * from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) from myemp;
select first_name, last_name, hire_date, experience(emp_id) from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
desc authors;
select * from books;
desc book_sales;
alter table books add columns sales integer default 0;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 6;
select * from books;
select * from book_sales;
show tables;
desc accounts;
select * from accounts;
SELECT * FROM books 
      WHERE authorid = 5 ;
SELECT * FROM books        WHERE authorid = 5;
exit
use learndb;
select 3 + 2;
select 45*87
;
select 3 + null;
select 3 = 3 ;
select 3 = 2;
select 3 = null;
select 3 is null;
select 3 is not null;
select * from students;
alter table students add column marks integer default 0;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
select * from myclass;
select * from students;
create table mytab(id integer, name varchar(10));
show tables;
drop table mytab;
show tables;
lt * from students;
select * from students;
insert into students values(3, 'Jon', 'Mysql', 67);
select * from students;
insert into students values(4, 'Pete', 'Analytics', null);
select * from students;
insert into students (std_id, sname, course) values (5,'George','Music');
select * from students;
insert into students (std_id, sname, marks) values (6,'Harry', 89);
select * from students;
insert into students values(7,'Lara', 'Music', 78),(8,'Potter','Magic', 88),(9,'Sarah', 'Dance', 98);
select * from students;
exit
use learndb;
select * from students;
update students set sname = 'Thomas' where std_id = 1;
select * from students;
update students set course = 'Cooking' where sname = 'Potter';
select * from students;
update students set marks = 0 where course = null;
update students set marks = 0 where course is null;
select * from students;
update students set marks = 100 where marks is null;
select * from students;
update students set course = 'Analytics', marks = 85 where sname = 'thomas';
select * from students;
update students set course = 'Analytics';
select * from students;
delete from students where std_id = 1;
select * from students;
delete from students where sname = 'jon' ;
select * from students;
delete from students where marks = 0;
select * from students;
delete from students;
select * from students;
insert into students values(7,'Lara', 'Music', 78),(8,'Potter','Magic', 88),(9,'Sarah', 'Dance', 98);
select * from students;
truncate students;
select * from students;
desc students;
select * from myemp;
select count(*) from myemp;
select * from myemp limit 5;
select * from myemp limit 3;
show tables;
select * from members limit 3;
select * from myemp limit 3;
select first_name, last_name, job_id, salary from myemp;
select first_name, last_name, job_id, salary from myemp limit 10;
select * from myemp limit 3;
select first_name, last_name, job_id, salary, salary*0.2 from myemp limit 10;
select emp_id, last_name, job_id, salary, salary*0.2 , salary + 0.2*salary from myemp limit 10;
select emp_id, last_name, job_id, salary, salary*0.2 as bonus, salary + 0.2*salary as total_sal from myemp limit 10;
select emp_id, last_name, job_id as role, salary, salary*0.2 as bonus, salary + 0.2*salary as total_sal from myemp limit 10;
exit
use learndb;
select * from myemp;
select * from myemp limit 10;
select emp_id, last_name, job_id , salary from myemp limit 10;
select emp_id, last_name, job_id , salary, salary*0.2 , salary+0.2*salary from myemp;
select emp_id, last_name, job_id , salary, salary*0.2 , salary+0.2*salary from myemp limit 10;
select emp_id, last_name, job_id as role, salary, salary*0.2 as bonus, salary+0.2*salary as total_sal from myemp limit 10;
select * from myemp limit 10;
select * from myemp where dep_id = 60;
select * from myemp where mgr_id = 103;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where dep_id <> 80;
select * from myemp where hire_date > '2000-01-01';
select * from myemp where dep_id = 80 and salary > 10000;
select * from myemp where dep_id = 80 or salary > 10000;
select * from myemp where dep_id = 20 or dep_id = 40 or dep_id = 60;
select * from myemp where dep_id IN (20,40,60,50);
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'j%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
select * from myemp where first_name like '% %';
select * from students;
select * from patients;
select * from myemp limit 5;
select * from myemp limit 15;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by salary desc;
select * from myemp order by hire_date desc;
select * from myemp order by hire_date;
select * from myemp order by last_name;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select * from myemp where salary > 10000 order by salary desc;
select * from person;
select distinct fname, lname from person;
select hire_date, year(hire_date) from myemp limit 10;
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
select * from patients;
SELECT ADDDATE(dob, INTERVAL 31 DAY) FROM PATIENTS;
select year(dob) from patients;
select dob, year(dob), month(dob), monthname(dob) from patients;
select curdate(), curtime();
select now();
exit
use learndb;
select * from myemp limit 10;
select emp_id, concat(first_name, ' ', last_name), job_id from myemp limit 10;
select emp_id, concat(first_name, ' ', last_name) as name , job_id from myemp limit 10;
select lower(first_name), upper(last_name) from myemp limit 10;
select left(first_name, 1) from myemp limit 10;
select right(first_name, 1) from myemp limit 10;
select first_name from myemp where left(first_name,1) in ('s','l','r');
select first_name , left(first_name,1) from myemp where left(first_name,1) in ('s','l','r');
select sum(salary) from myemp;
select salary from myemp;
select avg(salary) from myemp;
select min(salary) from myemp;
select max(salary) from myemp;
select salary from myemp order by salary ;
select count(*) from myemp;
select max(hire_date) from myemp;
use workshop;
show tables;
select * from employees;
use learndb;
select max(hire_date) from myemp;
select min(hire_date) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select * from myemp limit 20;
select mgr_id, min(salary) from myemp group by mgr_id;
select mgr_id, min(salary) from myemp group by mgr_id order by salary desc;
select dep_id, mgr_id, min(salary) from myemp group by mgr_id;
select dep_id, avg(salary) from myemp group by dep_id ;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id order by dep_id;
select max(salary) from myemp;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id having dep_id = 50 and mgrId = 120;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id having dep_id = 50 and mgr_Id = 120;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id having dep_id = 50 and mgr_Id in (120,121);
select dep_id, avg(salary) from myemp group by dep_id ;
select dep_id, avg(salary) from myemp group by dep_id  having dep_id in (100,10);
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id having dep_id = 50 and mgr_id = 121;
select dep_id, mgr_id , avg(salary) from myemp group by dep_id, mgr_id having dep_id = 50 and mgr_id in (121,122);
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies right join members on id = movieid;
select dep_id ,avg(salary) from myemp group by dep_id;
select * from drinks;
select * from meals;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate  from meals cross join drinks;
select mealname, drinkname, meals.rate  from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select m.mealname, d.drinkname, m.rate + d.rate as total from meals as m cross join drinks as d;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
drop table students;
create table students (sid integer UNIQUE, sname varchar(30) NOT NULL , age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(1,'Tom', 34, 'Mysql');
insert into students values(1,'Jom', 34, 'Mysql');
insert into students values(2,'Jom', 34, 'Mysql');
select * from students;
insert into students values(3,'King', 14,'Analytics');
insert into students values(3,'King', 24,'Analytics');
select * from students;
insert into students values(4, null, 25,'Dance');
insert into students (sid, age, course) values(5,23,'Magic');
desc students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(5,23,'Magic');
select * from students;
insert into students values(4, null, 25,'Dance');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors (authorid integer PRIMARY KEY, name varchar(30));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
DESC BOOKS;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
SELECT * FROM AUTHORS;
SELECT * FROM books;
delete from authors where authorid = 1;
SELECT * FROM AUTHORS;
SELECT * FROM books;
update authors set authorid = 80 where authorid = 8;
SELECT * FROM AUTHORS;
SELECT * FROM books;
show create table books;
show create table students;
exit
use learndb;
show tables;
select * from students;
insert into students values(6,'Larry',34,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Lara',34,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 1;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback ;
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
select * from myemp limit 10;
select first_name, last_name, salary from myemp;
create view myview as select first_name, last_name, salary from myemp;
select * from myview;
select * from myemp limit 10;
show tables;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from myemp limit 10;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid <= 10;
select * from aview;
insert into aview values(12,'Jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid <= 10 WITH CHECK OPTION;
insert into aview values(13,'Jon Snow');
insert into aview values(1,'Jon Snow');
select * from aview;
select * from authors;
select * from movies;
select * from members;
exit
use learndb;
show tables;
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc mytab;
insert into mytab (name, age) values('Tom', 34);
select * from mytab;
insert into mytab (name, age) values('Tim', 45),('jim',23),('Jon', 45);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tom', 34);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Tom', 34);
select * from mytab;
insert into mytab (name, age) values('Tim', 45),('jim',23),('Jon', 45);
select * from mytab;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date > '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date > '2000-01-01';
use learndb;
call myproc();
exit
use learndb;
call proc_if();
call proc_if(7);
call proc_if(6);
call proc_if(-6);
call proc_if(6);
call proc_if(-6);
call proc_if(6);
call proc_if(-6);
call proc_if(0);
call proc_if2(4);
call proc_if2(7);
call proc_if2(17);
call proc_simpleloop();
call proc_siimpleloop();
call proc_siimpleloop(4);
call proc_siimpleloop(2);
call proc_siimpleloop(7);
call proc_repeat(3);
call proc_repeat(5);
call proc_while(5);
call proc_while(3);
exit
use learndb;
select * from authorss;
select title from authors;
call proc_except();
call proc_except(1);
call proc_except(11);
call proc_except(1);
call proc_except(11);
desc payments;
select * from payments;
call make_payment(1,250);
select * from payments;
call make_payment(2,750);
select * from payments;
call make_payment(3,null);
desc fraud;
call make_payment(3,450);
select * from payments;
select * from fraud;
call make_payment(4, null);
select * from payments;
select * from fraud;
call make_payment(4, 790);
select * from payments;
select * from fraud;
call make_payment(5, null);
select * from payments;
select * from fraud;
all proc_cursor();
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call place_order();
select * from orders;
exit
use learndb;
select * from employees;
SELECT ROW_NUMBER() OVER( ORDER BY salary DESC) `row_num`,first_name,last_name,salary FROM myemp;
use workshop;
show tables;
select * from sales;
select sum(sale) over (partition by sales_employee);
select sales_employee, sum(sale) over (partition by sales_employee) from sales;
CREATE TABLE t (
    val INT
);
CREATE TABLE t (     val INT );
INSERT INTO t(val)
VALUES(1),(2),(2),(3),(4),(4),(5);
INSERT INTO t(val) VALUES(1),(2),(2),(3),(4),(4),(5);
select * from t;
select val, rank() over(order by val);
select val, rank() over(order by val) from t;
show tables;
CREATE TABLE IF NOT EXISTS sales(
    sales_employee VARCHAR(50) NOT NULL,
    fiscal_year INT NOT NULL,
    sale DECIMAL(14,2) NOT NULL,
    PRIMARY KEY(sales_employee,fiscal_year)
);
CREATE TABLE IF NOT EXISTS sales(     sales_employee VARCHAR(50) NOT NULL,     fiscal_year INT NOT NULL,     sale DECIMAL(14,2) NOT NULL,     PRIMARY KEY(sales_employee,fiscal_year) );
 
INSERT INTO sales(sales_employee,fiscal_year,sale)
VALUES('Bob',2016,100),
      ('Bob',2017,150),
      ('Bob',2018,200),
      ('Alice',2016,150),
      ('Alice',2017,100),
      ('Alice',2018,200),
       ('John',2016,200),
      ('John',2017,150),
      ('John',2018,250);
INSERT INTO sales(sales_employee,fiscal_year,sale) VALUES('Bob',2016,100),       ('Bob',2017,150),       ('Bob',2018,200),       ('Alice',2016,150),       ('Alice',2017,100),       ('Alice',2018,200),        ('John',2016,200),       ('John',2017,150),       ('John',2018,250);
 
SELECT * FROM sales;
exit
use learndb;
select hire_date , year(hire_date) from myemp limit 10;
select first_name, last_name, experience(emp_id) as exp from myemp limit 10;
select first_name, last_name, experience(emp_id) as exp from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
exit
use learndb;
drop table if exists t ;
CREATE TABLE t (
    val INT
);
CREATE TABLE t (     val INT );
INSERT INTO t(val)
VALUES(1),(2),(2),(3),(4),(4),(5);
INSERT INTO t(val) VALUES(1),(2),(2),(3),(4),(4),(5);
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 3 where bookid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 12;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 7;
select * from books;
select * from book_sales;
CREATE TABLE `customers` (
  `customerNumber` int(11) NOT NULL,
  `customerName` varchar(50) NOT NULL,
  `contactLastName` varchar(50) NOT NULL,
  `contactFirstName` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50) DEFAULT NULL,
  `city` varchar(50) NOT NULL,
  `state` varchar(50) DEFAULT NULL,
  `postalCode` varchar(15) DEFAULT NULL,
  `country` varchar(50) NOT NULL,
  `salesRepEmployeeNumber` int(11) DEFAULT NULL,
  `creditLimit` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`customerNumber`)
) 
/*Data for the table `customers` */
insert  into `customers`(`customerNumber`,`customerName`,`contactLastName`,`contactFirstName`,`phone`,`addressLine1`,`addressLine2`,`city`,`state`,`postalCode`,`country`,`salesRepEmployeeNumber`,`creditLimit`) values 
(103,'Atelier graphique','Schmitt','Carine ','40.32.2555','54, rue Royale',NULL,'Nantes',NULL,'44000','France',1370,'21000.00'),
(112,'Signal Gift Stores','King','Jean','7025551838','8489 Strong St.',NULL,'Las Vegas','NV','83030','USA',1166,'71800.00'),
(114,'Australian Collectors, Co.','Ferguson','Peter','03 9520 4555','636 St Kilda R(114,'Australian Collectors, Co.','Fergus04(114,'Australian Collectors, C),(114,'Australian Collectors, Co.','Fe'J(114,'Australian Collectors, Co.','Fergunte(114,'Australian Collectors,'44(114,'Australian Collectors, Co.',(1(114,'Australian Collectors, Co.','FerJonas ','07-98 9555','Erling Skakkes (114,'Australian Collectors, Co.','Ferguson','P04,'81700.00'),
(124,'Mini Gifts Distributors Ltd.','Nelson','Susan','4155551450','5677 Strong St.',NULL,'San Rafael','CA','97562','USA',1165,'210500.00'),
(125,'Havel & Zbyszek Co','Piestrzeniewicz','Zbyszek ','(26) 642-7555','ul. Filtrowa 68',NULL,'Warszawa',NULL,'01-012','Poland',NULL,'0.00'),
(128,'Blauer See Auto, Co.','Keitel','Roland','+49 69 66 90 2555','Lyonerstr. 34',NULL,'Frankfurt',NULL,'60528','Germany',1504,'59700.00'),
(129,'Mini Wheels Co.','Murphy','Julie','6505555787','5557 North Pendale Street',NULL,'San Francisco','CA','94217','USA',1165,'64600.00'),
(131,'Land of Toys Inc.','Lee','Kwai','2125557818','897 Long Airport Avenue',NULL,'NYC','NY','10022','USA',1323,'114900.00'),
(141,'Euro+ Shopping Channel','Freyre','Diego ','(91) 555 94 44','C/ Moralzarzal, 86',NULL,'Madrid',NULL,'28034','Spain',1370,'227600.00'),
(144,'Volvo Model Replicas, Co','Berglund','Christina ','0921-12 3555','Berguvsvägen  8',NULL,'Luleå',NULL,'S-958 22','Sweden',1504,'53100.00'),
(145,'Danish Wholesale Imports','Petersen','Jytte ','31 12 3555','Vinbæltet 34',NULL,'Kobenhavn',NULL,'1734','Denmark',1401,'83400.00'),
(146,'Saveley & Henriot, Co.','Saveley','Mary ','78.32.5555','2, rue du Commerce',NULL,'Lyon',NULL,'69004','France',1337,'123900.00'),
(148,'Dragon Souveniers, Ltd.','Natividad','Eric','+65 221 7555','Bronz Sok.','Bronz Apt. 3/6 Tesvikiye','Singapore',NULL,'079903','Singapore',1621,'103800.00'),
(151,'Muscle Machine Inc','Young','Jeff','2125557413','4092 Furth Circle','Suite 400','NYC','NY','10022','USA',1286,'138500.00'),
(157,'Diecast Classics Inc.','Leong','Kelvin','2155551555','7586 Pompton St.',NULL,'Allentown','PA','70267','USA',1216,'100600.00'),
(161,'Technics Stores Inc.','Hashimoto','Juri','6505556809','9408 Furth Circle',NULL,'Burlingame','CA','94217','USA',1165,'84600.00'),
(166,'Handji Gifts& Co','Victorino','Wendy','+65 224 1555','106 Linden Road Sandown','2nd Floor','Singapore',NULL,'069045','Singapore',1612,'97900.00'),
(167,'Herkku Gifts','Oeztan','Veysel','+47 2267 3215','Brehmen St. 121','PR 334 Sentrum','Bergen',NULL,'N 5804','Norway  ',1504,'96800.00'),
(168,'American Souvenirs Inc','Franco','Keith','2035557845','149 Spinnaker Dr.','Suite 101','New Haven','CT','97823','USA',1286,'0.00'),
(169,'Porto Imports Co.','de Castro','Isabel ','(1) 356-5555','Estrada da saúde n. 58',NULL,'Lisboa',NULL,'1756','Portugal',NULL,'0.00'),
(171,'Daedalus Designs Imports','Rancé','Martine ','20.16.1555','184, chaussée de Tournai',NULL,'Lille',NULL,'59000','France',1370,'82900.00'),
(172,'La Corne D\134'abondance, Co.','Bertrand','Marie','(1) 42.34.2555','265, boulevard Charonne',NULL,'Paris',NULL,'75012','France',1337,'84300.00'),
(173,'Cambridge Collectables Co.','Tseng','Jerry','6175555555','4658 Baden Av.',NULL,'Cambridge','MA','51247','USA',1188,'43400.00'),
(175,'Gift Depot Inc.','King','Julie','2035552570','25593 South Bay Ln.',NULL,'Bridgewater','CT','97562','USA',1323,'84300.00'),
(177,'Osaka Souveniers Co.','Kentary','Mory','+81 06 6342 5555','1-6-20 Dojima',NULL,'Kita-ku','Osaka',' 530-0003','Japan',1621,'81200.00'),
(181,'Vitachrome Inc.','Frick','Michael','2125551500','2678 Kingston Rd.','Suite 101','NYC','NY','10022','USA',1286,'76400.00'),
(186,'Toys of Finland, Co.','Karttunen','Matti','90-224 8555','Keskuskatu 45',NULL,'Helsinki',NULL,'21240','Finland',1501,'96500.00'),
(187,'AV Stores, Co.','Ashworth','Rachel','(171) 555-1555','Fauntleroy Circus',NULL,'Manchester',NULL,'EC2 5NT','UK',1501,'136800.00'),
(189,'Clover Collections, Co.','Cassidy','Dean','+353 1862 1555','25 Maiden Lane','Floor No. 4','Dublin',NULL,'2','Ireland',1504,'69400.00'),
(198,'Auto-Moto Classics Inc.','Taylor','Leslie','6175558428','16780 Pompton St.',NULL,'Brickhaven','MA','58339','USA',1216,'23000.00'),
(201,'UK Collectables, Ltd.','Devon','Elizabeth','(171) 555-2282','12, Berkeley Gardens Blvd',NULL,'Liverpool',NULL,'WX1 6LT','UK',1501,'92700.00'),
(202,'Canadian Gift Exchange Network','Tamuri','Yoshi ','(604) 555-3392','1900 Oak St.',NULL,'Vancouver','BC','V3F 2K1','Canada',1323,'90300.00'),
(204,'Online Mini Collectables','Barajas','Miguel','6175557555','7635 Spinnaker Dr.',NULL,'Brickhaven','MA','58339','USA',1188,'68700.00'),
(205,'Toys4GrownUps.com','Young','Julie','6265557265','78934 Hillside Dr.',NULL,'Pasadena','CA','90003','USA',1166,'90700.00'),
(206,'Asian Shopping Network, Co','Walker','Brydey','+612 9411 1555','Suntec Tower Three','8 Temasek','Singapore',NULL,'038988','Singapore',NULL,'0.00'),
(209,'Mini Caravy','Citeaux','Frédérique ','88.60.1555','24, place Kléber',NULL,'Strasbourg',NULL,'67000','France',1370,'53800.00'),
(211,'King Kong Collectables, Co.','Gao','Mike','+852 2251 1555','Bank of China Tower','1 Garden Road','Central Hong Kong',NULL,NULL,'Hong Kong',1621,'58600.00'),
(216,'Enaco Distributors','Saavedra','Eduardo ','(93) 203 4555','Rambla de Cataluña, 23',NULL,'Barcelona',NULL,'08022','Spain',1702,'60300.00'),
(219,'Boards & Toys Co.','Young','Mary','3105552373','4097 Douglas Av.',NULL,'Glendale','CA','92561','USA',1166,'11000.00'),
(223,'Natürlich Autos','Kloss','Horst ','0372-555188','Taucherstraße 10',NULL,'Cunewalde',NULL,'01307','Germany',NULL,'0.00'),
(227,'Heintze Collectables','Ibsen','Palle','86 21 3555','Smagsloget 45',NULL,'Århus',NULL,'8200','Denmark',1401,'120800.00'),
(233,'Québec Home Shopping Network','Fresnière','Jean ','(514) 555-8054','43 rue St. Laurent',NULL,'Montréal','Québec','H1J 1C3','Canada',1286,'48700.00'),
(237,'ANG Resellers','Camino','Alejandra ','(91) 745 6555','Gran Vía, 1',NULL,'Madrid',NULL,'28001','Spain',NULL,'0.00'),
(239,'Collectable Mini Designs Co.','Thompson','Valarie','7605558146','361 Furth Circle',NULL,'San Diego','CA','91217','USA',1166,'105000.00'),
(240,'giftsbymail.co.uk','Bennett','Helen ','(198) 555-8888','Garden House','Crowther Way 23','Cowes','Isle of Wight','PO31 7PJ','UK',1501,'93900.00'),
(242,'Alpha Cognac','Roulet','Annette ','61.77.6555','1 rue Alsace-Lorraine',NULL,'Toulouse',NULL,'31000','France',1370,'61100.00'),
(247,'Messner Shopping Network','Messner','Renate ','069-0555984','Magazinweg 7',NULL,'Frankfurt',NULL,'60528','Germany',NULL,'0.00'),
(249,'Amica Models & Co.','Accorti','Paolo ','011-4988555','Via Monte Bianco 34',NULL,'Torino',NULL,'10100','Italy',1401,'113000.00'),
(250,'Lyon Souveniers','Da Silva','Daniel','+33 1 46 62 7555','27 rue du Colonel Pierre Avia',NULL,'Paris',NULL,'75508','France',1337,'68100.00'),
(256,'Auto Associés & Cie.','Tonini','Daniel ','30.59.8555','67, avenue de l\134'Europe',NULL,'Versailles',NULL,'78000','France',1370,'77900.00'),
(259,'Toms Spezialitäten, Ltd','Pfalzheim','Henriette ','0221-5554327','Mehrheimerstr. 369',NULL,'Köln',NULL,'50739','Germany',1504,'120400.00'),
(260,'Royal Canadian Collectables, Ltd.','Lincoln','Elizabeth ','(604) 555-4555','23 Tsawassen Blvd.',NULL,'Tsawassen','BC','T2F 8M4','Canada',1323,'89600.00'),
(273,'Franken Gifts, Co','Franken','Peter ','089-0877555','Berliner Platz 43',NULL,'München',NULL,'80805','Germany',NULL,'0.00'),
(276,'Anna\134's Decorations, Ltd','O\134'Hara','Anna','02 9936 8555','201 Miller Street','Level 15','North Sydney','NSW','2060','Australia',1611,'107800.00'),
(278,'Rovelli Gifts','Rovelli','Giovanni ','035-640555','Via Ludovico il Moro 22',NULL,'Bergamo',NULL,'24100','Italy',1401,'119600.00'),
(282,'Souveniers And Things Co.','Huxley','Adrian','+61 2 9495 8555','Monitor Money Building','815 Pacific Hwy','Chatswood','NSW','2067','Australia',1611,'93300.00'),
(286,'Marta\134's Replicas Co.','Hernandez','Marta','6175558555','39323 Spinnaker Dr.',NULL,'Cambridge','MA','51247','USA',1216,'123700.00'),
(293,'BG&E Collectables','Harrison','Ed','+41 26 425 50 01','Rte des Arsenaux 41 ',NULL,'Fribourg',NULL,'1700','Switzerland',NULL,'0.00'),
(298,'Vida Sport, Ltd','Holz','Mihael','0897-034555','Grenzacherweg 237',NULL,'Genève',NULL,'1203','Switzerland',1702,'141300.00'),
(299,'Norway Gifts By Mail, Co.','Klaeboe','Jan','+47 2212 1555','Drammensveien 126A','PB 211 Sentrum','Oslo',NULL,'N 0106','Norway  ',1504,'95100.00'),
(303,'Schuyler Imports','Schuyler','Bradley','+31 20 491 9555','Kingsfordweg 151',NULL,'Amsterdam',NULL,'1043 GR','Netherlands',NULL,'0.00'),
(307,'Der Hund Imports','Andersen','Mel','030-0074555','Obere Str. 57',NULL,'Berlin',NULL,'12209','Germany',NULL,'0.00'),
(311,'Oulu Toy Supplies, Inc.','Koskitalo','Pirkko','981-443655','Torikatu 38',NULL,'Oulu',NULL,'90110','Finland',1501,'90500.00'),
(314,'Petit Auto','Dewey','Catherine ','(02) 5554 67','Rue Joseph-Bens 532',NULL,'Bruxelles',NULL,'B-1180','Belgium',1401,'79900.00'),
(319,'Mini Classics','Frick','Steve','9145554562','3758 North Pendale Street',NULL,'White Plains','NY','24067','USA',1323,'102700.00'),
(320,'Mini Creations Ltd.','Huang','Wing','5085559555','4575 Hillside Dr.',NULL,'New Bedford','MA','50553','USA',1188,'94500.00'),
(321,'Corporate Gift Ideas Co.','Brown','Julie','6505551386','7734 Strong St.',NULL,'San Francisco','CA','94217','USA',1165,'105000.00'),
(323,'Down Under Souveniers, Inc','Graham','Mike','+64 9 312 5555','162-164 Grafton Road','Level 2','Auckland  ',NULL,NULL,'New Zealand',1612,'88000.00'),
(324,'Stylish Desk Decors, Co.','Brown','Ann ','(171) 555-0297','35 King George',NULL,'London',NULL,'WX3 6FW','UK',1501,'77000.00'),
(328,'Tekni Collectables Inc.','Brown','William','2015559350','7476 Moss Rd.',NULL,'Newark','NJ','94019','USA',1323,'43000.00'),
(333,'Australian Gift Network, Co','Calaghan','Ben','61-7-3844-6555','31 Duncan St. West End',NULL,'South Brisbane','Queensland','4101','Australia',1611,'51600.00'),
(334,'Suominen Souveniers','Suominen','Kalle','+358 9 8045 555','Software Engineering Center','SEC Oy','Espoo',NULL,'FIN-02271','Finland',1501,'98800.00'),
(335,'Cramer Spezialitäten, Ltd','Cramer','Philip ','0555-09555','Maubelstr. 90',NULL,'Brandenburg',NULL,'14776','Germany',NULL,'0.00'),
(339,'Classic Gift Ideas, Inc','Cervantes','Francisca','2155554695','782 First Street',NULL,'Philadelphia','PA','71270','USA',1188,'81100.00'),
(344,'CAF Imports','Fernandez','Jesus','+34 913 728 555','Merchants House','27-30 Merchant\134's Quay','Madrid',NULL,'28023','Spain',1702,'59600.00'),
(347,'Men \134'R\134' US Retailers, Ltd.','Chandler','Brian','2155554369','6047 Douglas Av.',NULL,'Los Angeles','CA','91003','USA',1166,'57700.00'),
(348,'Asian Treasures, Inc.','McKenna','Patricia ','2967 555','8 Johnstown Road',NULL,'Cork','Co. Cork',NULL,'Ireland',NULL,'0.00'),
(350,'Marseille Mini Autos','Lebihan','Laurence ','91.24.4555','12, rue des Bouchers',NULL,'Marseille',NULL,'13008','France',1337,'65000.00'),
(353,'Reims Collectables','Henriot','Paul ','26.47.1555','59 rue de l\134'Abbaye',NULL,'Reims',NULL,'51100','France',1337,'81100.00'),
(356,'SAR Distributors, Co','Kuger','Armand','+27 21 550 3555','1250 Pretorius Street',NULL,'Hatfield','Pretoria','0028','South Africa',NULL,'0.00'),
(357,'GiftsForHim.com','MacKinlay','Wales','64-9-3763555','199 Great North Road',NULL,'Auckland',NULL,NULL,'New Zealand',1612,'77700.00'),
(361,'Kommission Auto','Josephs','Karin','0251-555259','Luisenstr. 48',NULL,'Münster',NULL,'44087','Germany',NULL,'0.00'),
(362,'Gifts4AllAges.com','Yoshido','Juri','6175559555','8616 Spinnaker Dr.',NULL,'Boston','MA','51003','USA',1216,'41900.00'),
(363,'Online Diecast Creations Co.','Young','Dorothy','6035558647','2304 Long Airport Avenue',NULL,'Nashua','NH','62005','USA',1216,'114200.00'),
(369,'Lisboa Souveniers, Inc','Rodriguez','Lino ','(1) 354-2555','Jardim das rosas n. 32',NULL,'Lisboa',NULL,'1675','Portugal',NULL,'0.00'),
(376,'Precious Collectables','Urs','Braun','0452-076555','Hauptstr. 29',NULL,'Bern',NULL,'3012','Switzerland',1702,'0.00'),
(379,'Collectables For Less Inc.','Nelson','Allen','6175558555','7825 Douglas Av.',NULL,'Brickhaven','MA','58339','USA',1188,'70700.00'),
(381,'Royale Belge','Cartrain','Pascale ','(071) 23 67 2555','Boulevard Tirou, 255',NULL,'Charleroi',NULL,'B-6000','Belgium',1401,'23500.00'),
(382,'Salzburg Collectables','Pipps','Georg ','6562-9555','Geislweg 14',NULL,'Salzburg',NULL,'5020','Austria',1401,'71700.00'),
(385,'Cruz & Sons Co.','Cruz','Arnold','+63 2 555 3587','15 McCallum Street','NatWest Center #13-03','Makati City',NULL,'1227 MM','Philippines',1621,'81500.00'),
(386,'L\134'ordine Souveniers','Moroni','Maurizio ','0522-556555','Strada Provinciale 124',NULL,'Reggio Emilia',NULL,'42100','Italy',1401,'121400.00'),
(398,'Tokyo Collectables, Ltd','Shimamura','Akiko','+81 3 3584 0555','2-2-8 Roppongi',NULL,'Minato-ku','Tokyo','106-0032','Japan',1621,'94400.00'),
(406,'Auto Canal+ Petit','Perrier','Dominique','(1) 47.55.6555','25, rue Lauriston',NULL,'Paris',NULL,'75016','France',1337,'95000.00'),
(409,'Stuttgart Collectable Exchange','Müller','Rita ','0711-555361','Adenauerallee 900',NULL,'Stuttgart',NULL,'70563','Germany',NULL,'0.00'),
(412,'Extreme Desk Decorations, Ltd','McRoy','Sarah','04 499 9555','101 Lambton Quay','Level 11','Wellington',NULL,NULL,'New Zealand',1612,'86800.00'),
(415,'Bavarian Collectables Imports, Co.','Donnermeyer','Michael',' +49 89 61 08 9555','Hansastr. 15',NULL,'Munich',NULL,'80686','Germany',1504,'77000.00'),
(424,'Classic Legends Inc.','Hernandez','Maria','2125558493','5905 Pompton St.','Suite 750','NYC','NY','10022','USA',1286,'67500.00'),
(443,'Feuer Online Stores, Inc','Feuer','Alexander ','0342-555176','Heerstr. 22',NULL,'Leipzig',NULL,'04179','Germany',NULL,'0.00'),
(447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (44ars(447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (447,'Gift (44e','Frick','Sue','4085553659','3086 Ingle Ln.',NULL,'San Jose','CA','94217','USA',1165,'77600.00'),
(452,'Mini Auto Werke','Mendel','Roland ','7675-3555','Kirchgasse 6',NULL,'Graz',NULL,'8010','Austria',1401,'45300.00'),
(455,'Super Scale Inc.','Murphy','Leslie','2035559545','567 North Pendale Street',NULL,'New Haven','CT','97823','USA',1286,'95400.00'),
(456,'Microscale Inc.','Choi','Yu','2125551957','5290 North Pendale Street','Suite 200','NYC','NY','10022','USA',1286,'39800.00'),
(458,'Corrida Auto Replicas, Ltd','Sommer','Martín ','(91) 555 22 82','C/ Araquil, 67',NULL,'Madrid',NULL,'28023','Spain',1702,'104600.00'),
(459,'Warburg Exchange','Ottlieb','Sven ','0241-039123','Walserweg 21',NULL,'Aachen',NULL,'52066','Germany',NULL,'0.00'),
(462,'FunGiftIdeas.com','Benitez','Violeta','5085552555','1785 First Street',NULL,'New Bedford','MA','50553','USA',1216,'85800.00'),
(465,'Anton Designs, Ltd.','Anton','Carmen','+34 913 728555','c/ Gobelas, 19-1 Urb. La Florida',NULL,'Madrid',NULL,'28023','Spain',NULL,'0.00'),
(471,'Australian Collectables, Ltd','Clenahan','Sean','61-9-3844-6555','7 Allen Street',NULL,'Glen Waverly','Victoria','3150','Australia',1611,'60300.00'),
(473,'Frau da Collezione','Ricotti','Franco','+39 022515555','20093 Cologno Monzese','Alessandro Volta 16','Milan',NULL,NULL,'Italy',1401,'34800.00'),
(475,'West Coast Collectables Co.','Thompson','Steve','3105553722','3675 Furth Circle',NULL,'Burbank','CA','94019','USA',1166,'55400.00'),
(477,'Mit Vergnügen & Co.','Moos','Hanna ','0621-08555','Forsterstr. 57',NULL,'Mannheim',NULL,'68306','Germany',NULL,'0.00'),
(480,'Kremlin Collectables, Co.','Semenov','Alexander ','+7 812 293 0521','2 Pobedy Square',NULL,'Saint Petersburg',NULL,'196143','Russia',NULL,'0.00'),
(481,'Raanan Stores, Inc','Altagar,G M','Raanan','+ 972 9 959 8555','3 Hagalim Blv.',NULL,'Herzlia',NULL,'47625','Israel',NULL,'0.00'),
(484,'Iberia Gift Imports, Corp.','Roel','José Pedro ','(95) 555 82 82','C/ Romero, 33',NULL,'Sevilla',NULL,'41101','Spain',1702,'65700.00'),
(486,'Motor Mint Distributors Inc.','Salazar','Rosa','2155559857','11328 Douglas Av.',NULL,'Philadelphia','PA','71270','USA',1323,'72600.00'),
(487,'Signal Collectibles Ltd.','Taylor','Sue','4155554312','2793 Furth Circle',NULL,'Brisbane','CA','94217','USA',1165,'60300.00'),
(489,'Double Decker Gift Stores, Ltd','Smith','Thomas ','(171) 555-7555','120 Hanover Sq.',NULL,'London',NULL,'WA1 1DP','UK',1501,'43300.00'),
(495,'Diecast Collectables','Franco','Valarie','6175552555','6251 Ingle Ln.',NULL,'Boston','MA','51003','USA',1188,'85100.00'),
(496,'Kelly\134's Gift Shop','Snowden','Tony','+64 9 5555500','Arenales 1938 3\134'A\134'',NULL,'Auckland  ',NULL,NULL,'New Zealand',1612,'110000.00');
select * from customers;
CREATE TABLE `customers` (
  `customerNumber` int(11) NOT NULL,
  `customerName` varchar(50) NOT NULL,
  `contactLastName` varchar(50) NOT NULL,
  `contactFirstName` varchar(50) NOT NULL,
  `phone` varchar(50) NOT NULL,
  `addressLine1` varchar(50) NOT NULL,
  `addressLine2` varchar(50) DEFAULT NULL,
  `city` varchar(50) NOT NULL,
  `state` varchar(50) DEFAULT NULL,
  `postalCode` varchar(15) DEFAULT NULL,
  `country` varchar(50) NOT NULL,
  `salesRepEmployeeNumber` int(11) DEFAULT NULL,
  `creditLimit` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`customerNumber`),
  KEY `salesRepEmployeeNumber` (`salesRepEmployeeNumber`),
  CONSTRAINT `customers_ibfk_1` FOREIGN KEY (`salesRepEmployeeNumber`) REFERENCES `employees` (`employeeNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TABLE `customers` (   `customerNumber` int(11) NOT NULL,   `customerName` varchar(50) NOT NULL,   `contactLastName` varchar(50) NOT NULL,   `contactFirstName` varchar(50) NOT NULL,   `phone` varchar(50) NOT NULL,   `addressLine1` varchar(50) NOT NULL,   `addressLine2` varchar(50) DEFAULT NULL,   `city` varchar(50) NOT NULL,   `state` varchar(50) DEFAULT NULL,   `postalCode` varchar(15) DEFAULT NULL,   `country` varchar(50) NOT NULL,   `salesRepEmployeeNumber` int(11) DEFAULT NULL,   `creditLimit` decimal(10,2) DEFAULT NULL,   PRIMARY KEY (`customerNumber`),   KEY `salesRepEmployeeNumber` (`salesRepEmployeeNumber`),   CONSTRAINT `customers_ibfk_1` FOREIGN KEY (`salesRepEmployeeNumber`) REFERENCES `employees` (`employeeNumber`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*Data for the table `customers` */
insert  into `customers`(`customerNumber`,`customerName`,`contactLastName`,`contactFirstName`,`phone`,`addressLine1`,`addressLine2`,`city`,`state`,`postalCode`,`country`,`salesRepEmployeeNumber`,`creditLimit`) values 
(103,'Atelier graphique','Schmitt','Carine ','40(103,'Atelier graphique','Schmitt','Ces(103,'Atelier graphique','Schmitt','Cari,
(103,'Atelier graphique','Schmitt','Carin'7(103,'Atelier graphique'St.',NUL(103,'Atelier graphique','Schmitt','C,'(103,'Atelier graphique','Schmitt','Carin C(103,'Atelier graphique','Sch20(103,'Atelier graphique','Schmitt'3'(103,'Atelier graphique','Schmitt','Caria(103,'Atelier graphique','Schmitoc(103,'Atelier graphique','Schmitt','Carin'7(10367, rue des Cinquante Otages',NULL,'Nantes',NULL,'44000','France',1370,'118200.00'),
(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baane Mini Imports','Berfael','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baa','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini ImpoMu(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baane Mini Imports','Berfael','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imist),
(198,'Auto-Moto Classics Inc.','Taylor','Leslie','6175558428','16780 Pompton St.',NULL,'Brickhaven','MA','58339','USA',1216,'23000.00'),
(201,'UK Collectables, Ltd.','Devon','Elizabeth','(171) 555-2282','12, Berkeley Gardens Blvd',NULL,'Liverpool',NULL,'WX1 6LT','UK',1501,'92700.00'),
(202,'Canadian Gift Exchange Network','Tamuri','Yoshi ','(604) 555-3392','1900 Oak St.',NULL,'Vancouver','BC','V3F 2K1','Canada',1323,'90300.00'),
(204,'Online Mini Collectables','Barajas','Miguel','6175557555','7635 Spinnaker Dr.',NULL,'Brickhaven','MA','58339','USA',1188,'68700.00'),
(205,'Toys4GrownUps.com','Young','Julie','6265557265','78934 Hillside Dr.',NULL,'Pasadena','CA','90003','USA',1166,'90700.00'),
(206,'Asian Shopping Network, Co','Walker','Brydey','+612 9411 1555','Suntec Tower Three','8 Temasek','Singapore',NULL,'038988','Singapore',NULL,'0.00'),
(209,'Mini Caravy','Citeaux','Frédérique ','88.60.1555','24, place Kléber',NULL,'Strasbourg',NULL,'67000','France',1370,'53800.00'),
(211,'King Kong Collectables, Co.','Gao','Mike','+852 2251 1555','Bank of China Tower','1 Garden Road','Central Hong Kong',NULL,NULL,'Hong Kong',1621,'58600.00'),
(216,'Enaco Distributors','Saavedra','Eduardo ','(93) 203 4555','Rambla de Cataluña, 23',NULL,'Barcelona',NULL,'08022','Spain',1702,'60300.00'),
(219,'Boards & Toys Co.','Young','Mary','3105552373','4097 Douglas Av.',NULL,'Glendale','CA','92561','USA',1166,'11000.00'),
(223,'Natürlich Autos','Kloss','Horst ','0372-555188','Taucherstraße 10',NULL,'Cunewalde',NULL,'01307','Germany',NULL,'0.00'),
(227,'Heintze Collectables','Ibsen','Palle','86 21 3555','Smagsloget 45',NULL,'Århus',NULL,'8200','Denmark',1401,'120800.00'),
(233,'Québec Home Shopping Network','Fresnière','Jean ','(514) 555-8054','43 rue St. Laurent',NULL,'Montréal','Québec','H1J 1C3','Canada',1286,'48700.00'),
(237,'ANG Resellers','Camino','Alejandra ','(91) 745 6555','Gran Vía, 1',NULL,'Madrid',NULL,'28001','Spain',NULL,'0.00'),
(239,'Collectable Mini Designs Co.','Thompson','Valarie','7605558146','361 Furth Circle',NULL,'San Diego','CA','91217','USA',1166,'105000.00'),
(240,'giftsbymail.co.uk','Bennett','Helen ','(198) 555-8888','Garden House','Crowther Way 23','Cowes','Isle of Wight','PO31 7PJ','UK',1501,'93900.00'),
(242,'Alpha Cognac','Roulet','Annette ','61.77.6555','1 rue Alsace-Lorraine',NULL,'Toulouse',NULL,'31000','France',1370,'61100.00'),
(247,'Messner Shopping Network','Messner','Renate ','069-0555984','Magazinweg 7',NULL,'Frankfurt',NULL,'60528','Germany',NULL,'0.00'),
(249,'Amica Models & Co.','Accorti','Paolo ','011-4988555','Via Monte Bianco 34',NULL,'Torino',NULL,'10100','Italy',1401,'113000.00'),
(250,'Lyon Souveniers','Da Silva','Daniel','+33 1 46 62 7555','27 rue du Colonel Pierre Avia',NULL,'Paris',NULL,'75508','France',1337,'68100.00'),
(256,'Auto Associés & Cie.','Tonini','Daniel ','30.59.8555','67, avenue de l\134'Europe',NULL,'Versailles',NULL,'78000','France',1370,'77900.00'),
(259,'Toms Spezialitäten, Ltd','Pfalzheim','Henriette ','0221-5554327','Mehrheimerstr. 369',NULL,'Köln',NULL,'50739','Germany',1504,'120400.00'),
(260,'Royal Canadian Collectables, Ltd.','Lincoln','Elizabeth ','(604) 555-4555','23 Tsawassen Blvd.',NULL,'Tsawassen','BC','T2F 8M4','Canada',1323,'89600.00'),
(273,'Franken Gifts, Co','Franken','Peter ','089-0877555','Berliner Platz 43',NULL,'München',NULL,'80805','Germany',NULL,'0.00'),
(276,'Anna\134's Decorations, Ltd','O\134'Hara','Anna','02 9936 8555','201 Miller Street','Level 15','North Sydney','NSW','2060','Australia',1611,'107800.00'),
(278,'Rovelli Gifts','Rovelli','Giovanni ','035-640555','Via Ludovico il Moro 22',NULL,'Bergamo',NULL,'24100','Italy',1401,'119600.00'),
(282,'Souveniers And Things Co.','Huxley','Adrian','+61 2 9495 8555','Monitor Money Building','815 Pacific Hwy','Chatswood','NSW','2067','Australia',1611,'93300.00'),
(286,'Marta\134's Replicas Co.','Hernandez','Marta','6175558555','39323 Spinnaker Dr.',NULL,'Cambridge','MA','51247','USA',1216,'123700.00'),
(293,'BG&E Collectables','Harrison','Ed','+41 26 425 50 01','Rte des Arsenaux 41 ',NULL,'Fribourg',NULL,'1700','Switzerland',NULL,'0.00'),
(298,'Vida Sport, Ltd','Holz','Mihael','0897-034555','Grenzacherweg 237',NULL,'Genève',NULL,'1203','Switzerland',1702,'141300.00'),
(299,'Norway Gifts By Mail, Co.','Klaeboe','Jan','+47 2212 1555','Drammensveien 126A','PB 211 Sentrum','Oslo',NULL,'N 0106','Norway  ',1504,'95100.00'),
(303,'Schuyler Imports','Schuyler','Bradley','+31 20 491 9555','Kingsfordweg 151',NULL,'Amsterdam',NULL,'1043 GR','Netherlands',NULL,'0.00'),
(307,'Der Hund Imports','Andersen','Mel','030-0074555','Obere Str. 57',NULL,'Berlin',NULL,'12209','Germany',NULL,'0.00'),
(311,'Oulu Toy Supplies, Inc.','Koskitalo','Pirkko','981-443655','Torikatu 38',NULL,'Oulu',NULL,'90110','Finland',1501,'90500.00'),
(314,'Petit Auto','Dewey','Catherine ','(02) 5554 67','Rue Joseph-Bens 532',NULL,'Bruxelles',NULL,'B-1180','Belgium',1401,'79900.00'),
(319,'Mini Classics','Frick','Steve','9145554562','3758 North Pendale Street',NULL,'White Plains','NY','24067','USA',1323,'102700.00'),
(320,'Mini Creations Ltd.','Huang','Wing','5085559555','4575 Hillside Dr.',NULL,'New Bedford','MA','50553','USA',1188,'94500.00'),
(321,'Corporate Gift Ideas Co.','Brown','Julie','6505551386','7734 Strong St.',NULL,'San Francisco','CA','94217','USA',1165,'105000.00'),
(323,'Down Under Souveniers, Inc','Graham','Mike','+64 9 312 5555','162-164 Grafton Road','Level 2','Auckland  ',NULL,NULL,'New Zealand',1612,'88000.00'),
(324,'Stylish Desk Decors, Co.','Brown','Ann ','(171) 555-0297','35 King George',NULL,'London',NULL,'WX3 6FW','UK',1501,'77000.00'),
(328,'Tekni Collectables Inc.','Brown','William','2015559350','7476 Moss Rd.',NULL,'Newark','NJ','94019','USA',1323,'43000.00'),
(333,'Australian Gift Network, Co','Calaghan','Ben','61-7-3844-6555','31 Duncan St. West End',NULL,'South Brisbane','Queensland','4101','Australia',1611,'51600.00'),
(334,'Suominen Souveniers','Suominen','Kalle','+358 9 8045 555','Software Engineering Center','SEC Oy','Espoo',NULL,'FIN-02271','Finland',1501,'98800.00'),
(335,'Cramer Spezialitäten, Ltd','Cramer','Philip ','0555-09555','Maubelstr. 90',NULL,'Brandenburg',NULL,'14776','Germany',NULL,'0.00'),
(339,'Classic Gift Ideas, Inc','Cervantes','Francisca','2155554695','782 First Street',NULL,'Philadelphia','PA','71270','USA',1188,'81100.00'),
(344,'CAF Imports','Fernandez','Jesus','+34 913 728 555','Merchants House','27-30 Merchant\134's Quay','Madrid',NULL,'28023','Spain',1702,'59600.00'),
(347,'Men \134'R\134' US Retailers, Ltd.','Chandler','Brian','2155554369','6047 Douglas Av.',NULL,'Los Angeles','CA','91003','USA',1166,'57700.00'),
(348,'Asian Treasures, Inc.','McKenna','Patricia ','2967 555','8 Johnstown Road',NULL,'Cork','Co. Cork',NULL,'Ireland',NULL,'0.00'),
(350,'Marseille Mini Autos','Lebihan','Laurence ','91.24.4555','12, rue des Bouchers',NULL,'Marseille',NULL,'13008','France',1337,'65000.00'),
(353,'Reims Collectables','Henriot','Paul ','26.47.1555','59 rue de l\134'Abbaye',NULL,'Reims',NULL,'51100','France',1337,'81100.00'),
(356,'SAR Distributors, Co','Kuger','Armand','+27 21 550 3555','1250 Pretorius Street',NULL,'Hatfield','Pretoria','0028','South Africa',NULL,'0.00'),
(357,'GiftsForHim.com','MacKinlay','Wales','64-9-3763555','199 Great North Road',NULL,'Auckland',NULL,NULL,'New Zealand',1612,'77700.00'),
(361,'Kommission Auto','Josephs','Karin','0251-555259','Luisenstr. 48',NULL,'Münster',NULL,'44087','Germany',NULL,'0.00'),
(362,'Gifts4AllAges.com','Yoshido','Juri','6175559555','8616 Spinnaker Dr.',NULL,'Boston','MA','51003','USA',1216,'41900.00'),
(363,'Online Diecast Creations Co.','Young','Dorothy','6035558647','2304 Long Airport Avenue',NULL,'Nashua','NH','62005','USA',1216,'114200.00'),
(369,'Lisboa Souveniers, Inc','Rodriguez','Lino ','(1) 354-2555','Jardim das rosas n. 32',NULL,'Lisboa',NULL,'1675','Portugal',NULL,'0.00'),
(376,'Precious Collectables','Urs','Braun','0452-076555','Hauptstr. 29',NULL,'Bern',NULL,'3012','Switzerland',1702,'0.00'),
(379,'Collectables For Less Inc.','Nelson','Allen','6175558555','7825 Douglas Av.',NULL,'Brickhaven','MA','58339','USA',1188,'70700.00'),
(381,'Royale Belge','Cartrain','Pascale ','(071) 23 67 2555','Boulevard Tirou, 255',NULL,'Charleroi',NULL,'B-6000','Belgium',1401,'23500.00'),
(382,'Salzburg Collectables','Pipps','Georg ','6562-9555','Geislweg 14',NULL,'Salzburg',NULL,'5020','Austria',1401,'71700.00'),
(385,'Cruz & Sons Co.','Cruz','Arnold','+63 2 555 3587','15 McCallum Street','NatWest Center #13-03','Makati City',NULL,'1227 MM','Philippines',1621,'81500.00'),
(386,'L\134'ordine Souveniers','Moroni','Maurizio ','0522-556555','Strada Provinciale 124',NULL,'Reggio Emilia',NULL,'42100','Italy',1401,'121400.00'),
(398,'Tokyo Collectables, Ltd','Shimamura','Akiko','+81 3 3584 0555','2-2-8 Roppongi',NULL,'Minato-ku','Tokyo','106-0032','Japan',1621,'94400.00'),
(406,'Auto Canal+ Petit','Perrier','Dominique','(1) 47.55.6555','25, rue Lauriston',NULL,'Paris',NULL,'75016','France',1337,'95000.00'),
(409,'Stuttgart Collectable Exchange','Müller','Rita ','0711-555361','Adenauerallee 900',NULL,'Stuttgart',NULL,'70563','Germany',NULL,'0.00'),
(412,'Extreme Desk Decorations, Ltd','McRoy','Sarah','04 499 9555','101 Lambton Quay','Level 11','Wellington',NULL,NULL,'New Zealand',1612,'86800.00'),
(415,'Bavarian Collectables Imports, Co.','Donnermeyer','Michael',' +49 89 61 08 9555','Hansastr. 15',NULL,'Munich',NULL,'80686','Germany',1504,'77000.00'),
(424,'Classic Legends Inc.','Hernandez','Maria','2125558493','5905 Pompton St.','Suite 750','NYC','NY','10022','USA',1286,'67500.00'),
(443,'Feuer Online Stores, Inc','Feuer','Alexander ','0342-555176','Heerstr. 22',NULL,'Leipzig',NULL,'04179','Germany',NULL,'0.00'),
(447,'Gift Ideas Corp.','Lewis','Dan','2035554407','2440 Pompton St.',NULL,'Glendale','CT','97561','USA',1323,'49700.00'),
(448,'Scandinavian Gift Ideas','Larsson','Martha','0695-34 6555','Åkergatan 24',NULL,'Bräcke',NULL,'S-844 67','Sweden',1504,'116400.00'),
(450,'The Sharp Gifts Warehouse','Frick','Sue','4085553659','3086 Ingle Ln.',NULL,'San Jose','CA','94217','USA',1165,'77600.00'),
(452,'Mini Auto Werke','Mendel','Roland ','7675-3555','Kirchgasse 6',NULL,'Graz',NULL,'8010','Austria',1401,'45300.00'),
(455,'Super Scale Inc.','Murphy','Leslie','2035559545','567 North Pendale Street',NULL,'New Haven','CT','97823','USA',1286,'95400.00'),
(456,'Microscale Inc.','Choi','Yu','2125551957','5290 North Pendale Street','Suite 200','NYC','NY','10022','USA',1286,'39800.00'),
(458,'Corrida Auto Replicas, Ltd','Sommer','Martín ','(91) 555 22 82','C/ Araquil, 67',NULL,'Madrid',NULL,'28023','Spain',1702,'104600.00'),
(459,'Warburg Exchange','Ottlieb','Sven ','0241-039123','Walserweg 21',NULL,'Aachen',NULL,'52066','Germany',NULL,'0.00'),
(462,'FunGiftIdeas.com','Benitez','Violeta','5085552555','1785 First Street',NULL,'New Bedford','MA','50553','USA',1216,'85800.00'),
(465,'Anton Designs, Ltd.','Anton','Carmen','+34 913 728555','c/ Gobelas, 19-1 Urb. La Florida',NULL,'Madrid',NULL,'28023','Spain',NULL,'0.00'),
(471,'Australian Collectables, Ltd','Clenahan','Sean','61-9-3844-6555','7 Allen Street',NULL,'Glen Waverly','Victoria','3150','Australia',1611,'60300.00'),
(473,'Frau da Collezione','Ricotti','Franco','+39 022515555','20093 Cologno Monzese','Alessandro Volta 16','Milan',NULL,NULL,'Italy',1401,'34800.00'),
(475,'West Coast Collectables Co.','Thompson','Steve','3105553722','3675 Furth Circle',NULL,'Burbank','CA','94019','USA',1166,'55400.00'),
(477,'Mit Vergnügen & Co.','Moos','Hanna ','0621-08555','Forsterstr. 57',NULL,'Mannheim',NULL,'68306','Germany',NULL,'0.00'),
(480,'Kremlin Collectables, Co.','Semenov','Alexander ','+7 812 293 0521','2 Pobedy Square',NULL,'Saint Petersburg',NULL,'196143','Russia',NULL,'0.00'),
(481,'Raanan Stores, Inc','Altagar,G M','Raanan','+ 972 9 959 8555','3 Hagalim Blv.',NULL,'Herzlia',NULL,'47625','Israel',NULL,'0.00'),
(484,'Iberia Gift Imports, Corp.','Roel','José Pedro ','(95) 555 82 82','C/ Romero, 33',NULL,'Sevilla',NULL,'41101','Spain',1702,'65700.00'),
(486,'Motor Mint Distributors Inc.','Salazar','Rosa','2155559857','11328 Douglas Av.',NULL,'Philadelphia','PA','71270','USA',1323,'72600.00'),
(487,'Signal Collectibles Ltd.','Taylor','Sue','4155554312','2793 Furth Circle',NULL,'Brisbane','CA','94217','USA',1165,'60300.00'),
(489,'Double Decker Gift Stores, Ltd','Smith','Thomas ','(171) 555-7555','120 Hanover Sq.',NULL,'London',NULL,'WA1 1DP','UK',1501,'43300.00'),
(495,'Diecast Collectables','Franco','Valarie','6175552555','6251 Ingle Ln.',NULL,'Boston','MA','51003','USA',1188,'85100.00'),
(496,'Kelly\134's Gift Shop','Snowden','Tony','+64 9 5555500','Arenales 1938 3\134'A\134'',NULL,'Auckland  ',NULL,NULL,'New Zealand',1612,'110000.00');
insert  into `customers`(`customerNumber`,`customerName`,`contactLastName`,`contactFirstName`,`phone`,`addressLine1`,`addressLine2`,`city`,`state`,`postalCode`,`country`,`salesRepEmployeeNumber`,`creditLimit`) values   (103,'Atelier graphique','Schmitt','Carine ','40(103,'Atelier graphique','Schmitt','Ces(103,'Atelier graphique','Schmitt','Cari,\012(103,'Atelier graphique','Schmitt','Carin'7(103,'Atelier graphique'St.',NUL(103,'Atelier graphique','Schmitt','C,'(103,'Atelier graphique','Schmitt','Carin C(103,'Atelier graphique','Sch20(103,'Atelier graphique','Schmitt'3'(103,'Atelier graphique','Schmitt','Caria(103,'Atelier graphique','Schmitoc(103,'Atelier graphique','Schmitt','Carin'7(10367, rue des Cinquante Otages',NULL,'Nantes',NULL,'44000','France',1370,'118200.00'),  (121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baane Mini Imports','Berfael','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baa','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini ImpoMu(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imports','Bergulfsen'0',(121,'Baane Mini Imports','Berfael','(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-9(121,bu(121,'Baane Mini Imist),  (198,'Auto-Moto Classics Inc.','Taylor','Leslie','6175558428','16780 Pompton St.',NULL,'Brickhaven','MA','58339','USA',1216,'23000.00'),  (201,'UK Collectables, Ltd.','Devon','Elizabeth','(171) 555-2282','12, Berkeley Gardens Blvd',NULL,'Liverpool',NULL,'WX1 6LT','UK',1501,'92700.00'),  (202,'Canadian Gift Exchange Network','Tamuri','Yoshi ','(604) 555-3392','1900 Oak St.',NULL,'Vancouver','BC','V3F 2K1','Canada',1323,'90300.00'),  (204,'Online Mini Collectables','Barajas','Miguel','6175557555','7635 Spinnaker Dr.',NULL,'Brickhaven','MA','58339','USA',1188,'68700.00'),  (205,'Toys4GrownUps.com','Young','Julie','6265557265','78934 Hillside Dr.',NULL,'Pasadena','CA','90003','USA',1166,'90700.00'),  (206,'Asian Shopping Network, Co','Walker','Brydey','+612 9411 1555','Suntec Tower Three','8 Temasek','Singapore',NULL,'038988','Singapore',NULL,'0.00'),  (209,'Mini Caravy','Citeaux','Frédérique ','88.60.1555','24, place Kléber',NULL,'Strasbourg',NULL,'67000','France',1370,'53800.00'),  (211,'King Kong Collectables, Co.','Gao','Mike','+852 2251 1555','Bank of China Tower','1 Garden Road','Central Hong Kong',NULL,NULL,'Hong Kong',1621,'58600.00'),  (216,'Enaco Distributors','Saavedra','Eduardo ','(93) 203 4555','Rambla de Cataluña, 23',NULL,'Barcelona',NULL,'08022','Spain',1702,'60300.00'),  (219,'Boards & Toys Co.','Young','Mary','3105552373','4097 Douglas Av.',NULL,'Glendale','CA','92561','USA',1166,'11000.00'),  (223,'Natürlich Autos','Kloss','Horst ','0372-555188','Taucherstraße 10',NULL,'Cunewalde',NULL,'01307','Germany',NULL,'0.00'),  (227,'Heintze Collectables','Ibsen','Palle','86 21 3555','Smagsloget 45',NULL,'Århus',NULL,'8200','Denmark',1401,'120800.00'),  (233,'Québec Home Shopping Network','Fresnière','Jean ','(514) 555-8054','43 rue St. Laurent',NULL,'Montréal','Québec','H1J 1C3','Canada',1286,'48700.00'),  (237,'ANG Resellers','Camino','Alejandra ','(91) 745 6555','Gran Vía, 1',NULL,'Madrid',NULL,'28001','Spain',NULL,'0.00'),  (239,'Collectable Mini Designs Co.','Thompson','Valarie','7605558146','361 Furth Circle',NULL,'San Diego','CA','91217','USA',1166,'105000.00'),  (240,'giftsbymail.co.uk','Bennett','Helen ','(198) 555-8888','Garden House','Crowther Way 23','Cowes','Isle of Wight','PO31 7PJ','UK',1501,'93900.00'),  (242,'Alpha Cognac','Roulet','Annette ','61.77.6555','1 rue Alsace-Lorraine',NULL,'Toulouse',NULL,'31000','France',1370,'61100.00'),  (247,'Messner Shopping Network','Messner','Renate ','069-0555984','Magazinweg 7',NULL,'Frankfurt',NULL,'60528','Germany',NULL,'0.00'),  (249,'Amica Models & Co.','Accorti','Paolo ','011-4988555','Via Monte Bianco 34',NULL,'Torino',NULL,'10100','Italy',1401,'113000.00'),  (250,'Lyon Souveniers','Da Silva','Daniel','+33 1 46 62 7555','27 rue du Colonel Pierre Avia',NULL,'Paris',NULL,'75508','France',1337,'68100.00'),  (256,'Auto Associés & Cie.','Tonini','Daniel ','30.59.8555','67, avenue de l\134'Europe',NULL,'Versailles',NULL,'78000','France',1370,'77900.00'),  (259,'Toms Spezialitäten, Ltd','Pfalzheim','Henriette ','0221-5554327','Mehrheimerstr. 369',NULL,'Köln',NULL,'50739','Germany',1504,'120400.00'),  (260,'Royal Canadian Collectables, Ltd.','Lincoln','Elizabeth ','(604) 555-4555','23 Tsawassen Blvd.',NULL,'Tsawassen','BC','T2F 8M4','Canada',1323,'89600.00'),  (273,'Franken Gifts, Co','Franken','Peter ','089-0877555','Berliner Platz 43',NULL,'München',NULL,'80805','Germany',NULL,'0.00'),  (276,'Anna\134's Decorations, Ltd','O\134'Hara','Anna','02 9936 8555','201 Miller Street','Level 15','North Sydney','NSW','2060','Australia',1611,'107800.00'),  (278,'Rovelli Gifts','Rovelli','Giovanni ','035-640555','Via Ludovico il Moro 22',NULL,'Bergamo',NULL,'24100','Italy',1401,'119600.00'),  (282,'Souveniers And Things Co.','Huxley','Adrian','+61 2 9495 8555','Monitor Money Building','815 Pacific Hwy','Chatswood','NSW','2067','Australia',1611,'93300.00'),  (286,'Marta\134's Replicas Co.','Hernandez','Marta','6175558555','39323 Spinnaker Dr.',NULL,'Cambridge','MA','51247','USA',1216,'123700.00'),  (293,'BG&E Collectables','Harrison','Ed','+41 26 425 50 01','Rte des Arsenaux 41 ',NULL,'Fribourg',NULL,'1700','Switzerland',NULL,'0.00'),  (298,'Vida Sport, Ltd','Holz','Mihael','0897-034555','Grenzacherweg 237',NULL,'Genève',NULL,'1203','Switzerland',1702,'141300.00'),  (299,'Norway Gifts By Mail, Co.','Klaeboe','Jan','+47 2212 1555','Drammensveien 126A','PB 211 Sentrum','Oslo',NULL,'N 0106','Norway  ',1504,'95100.00'),  (303,'Schuyler Imports','Schuyler','Bradley','+31 20 491 9555','Kingsfordweg 151',NULL,'Amsterdam',NULL,'1043 GR','Netherlands',NULL,'0.00'),  (307,'Der Hund Imports','Andersen','Mel','030-0074555','Obere Str. 57',NULL,'Berlin',NULL,'12209','Germany',NULL,'0.00'),  (311,'Oulu Toy Supplies, Inc.','Koskitalo','Pirkko','981-443655','Torikatu 38',NULL,'Oulu',NULL,'90110','Finland',1501,'90500.00'),  (314,'Petit Auto','Dewey','Catherine ','(02) 5554 67','Rue Joseph-Bens 532',NULL,'Bruxelles',NULL,'B-1180','Belgium',1401,'79900.00'),  (319,'Mini Classics','Frick','Steve','9145554562','3758 North Pendale Street',NULL,'White Plains','NY','24067','USA',1323,'102700.00'),  (320,'Mini Creations Ltd.','Huang','Wing','5085559555','4575 Hillside Dr.',NULL,'New Bedford','MA','50553','USA',1188,'94500.00'),  (321,'Corporate Gift Ideas Co.','Brown','Julie','6505551386','7734 Strong St.',NULL,'San Francisco','CA','94217','USA',1165,'105000.00'),  (323,'Down Under Souveniers, Inc','Graham','Mike','+64 9 312 5555','162-164 Grafton Road','Level 2','Auckland  ',NULL,NULL,'New Zealand',1612,'88000.00'),  (324,'Stylish Desk Decors, Co.','Brown','Ann ','(171) 555-0297','35 King George',NULL,'London',NULL,'WX3 6FW','UK',1501,'77000.00'),  (328,'Tekni Collectables Inc.','Brown','William','2015559350','7476 Moss Rd.',NULL,'Newark','NJ','94019','USA',1323,'43000.00'),  (333,'Australian Gift Network, Co','Calaghan','Ben','61-7-3844-6555','31 Duncan St. West End',NULL,'South Brisbane','Queensland','4101','Australia',1611,'51600.00'),  (334,'Suominen Souveniers','Suominen','Kalle','+358 9 8045 555','Software Engineering Center','SEC Oy','Espoo',NULL,'FIN-02271','Finland',1501,'98800.00'),  (335,'Cramer Spezialitäten, Ltd','Cramer','Philip ','0555-09555','Maubelstr. 90',NULL,'Brandenburg',NULL,'14776','Germany',NULL,'0.00'),  (339,'Classic Gift Ideas, Inc','Cervantes','Francisca','2155554695','782 First Street',NULL,'Philadelphia','PA','71270','USA',1188,'81100.00'),  (344,'CAF Imports','Fernandez','Jesus','+34 913 728 555','Merchants House','27-30 Merchant\134's Quay','Madrid',NULL,'28023','Spain',1702,'59600.00'),  (347,'Men \134'R\134' US Retailers, Ltd.','Chandler','Brian','2155554369','6047 Douglas Av.',NULL,'Los Angeles','CA','91003','USA',1166,'57700.00'),  (348,'Asian Treasures, Inc.','McKenna','Patricia ','2967 555','8 Johnstown Road',NULL,'Cork','Co. Cork',NULL,'Ireland',NULL,'0.00'),  (350,'Marseille Mini Autos','Lebihan','Laurence ','91.24.4555','12, rue des Bouchers',NULL,'Marseille',NULL,'13008','France',1337,'65000.00'),  (353,'Reims Collectables','Henriot','Paul ','26.47.1555','59 rue de l\134'Abbaye',NULL,'Reims',NULL,'51100','France',1337,'81100.00'),  (356,'SAR Distributors, Co','Kuger','Armand','+27 21 550 3555','1250 Pretorius Street',NULL,'Hatfield','Pretoria','0028','South Africa',NULL,'0.00'),  (357,'GiftsForHim.com','MacKinlay','Wales','64-9-3763555','199 Great North Road',NULL,'Auckland',NULL,NULL,'New Zealand',1612,'77700.00'),  (361,'Kommission Auto','Josephs','Karin','0251-555259','Luisenstr. 48',NULL,'Münster',NULL,'44087','Germany',NULL,'0.00'),  (362,'Gifts4AllAges.com','Yoshido','Juri','6175559555','8616 Spinnaker Dr.',NULL,'Boston','MA','51003','USA',1216,'41900.00'),  (363,'Online Diecast Creations Co.','Young','Dorothy','6035558647','2304 Long Airport Avenue',NULL,'Nashua','NH','62005','USA',1216,'114200.00'),  (369,'Lisboa Souveniers, Inc','Rodriguez','Lino ','(1) 354-2555','Jardim das rosas n. 32',NULL,'Lisboa',NULL,'1675','Portugal',NULL,'0.00'),  (376,'Precious Collectables','Urs','Braun','0452-076555','Hauptstr. 29',NULL,'Bern',NULL,'3012','Switzerland',1702,'0.00'),  (379,'Collectables For Less Inc.','Nelson','Allen','6175558555','7825 Douglas Av.',NULL,'Brickhaven','MA','58339','USA',1188,'70700.00'),  (381,'Royale Belge','Cartrain','Pascale ','(071) 23 67 2555','Boulevard Tirou, 255',NULL,'Charleroi',NULL,'B-6000','Belgium',1401,'23500.00'),  (382,'Salzburg Collectables','Pipps','Georg ','6562-9555','Geislweg 14',NULL,'Salzburg',NULL,'5020','Austria',1401,'71700.00'),  (385,'Cruz & Sons Co.','Cruz','Arnold','+63 2 555 3587','15 McCallum Street','NatWest Center #13-03','Makati City',NULL,'1227 MM','Philippines',1621,'81500.00'),  (386,'L\134'ordine Souveniers','Moroni','Maurizio ','0522-556555','Strada Provinciale 124',NULL,'Reggio Emilia',NULL,'42100','Italy',1401,'121400.00'),  (398,'Tokyo Collectables, Ltd','Shimamura','Akiko','+81 3 3584 0555','2-2-8 Roppongi',NULL,'Minato-ku','Tokyo','106-0032','Japan',1621,'94400.00'),  (406,'Auto Canal+ Petit','Perrier','Dominique','(1) 47.55.6555','25, rue Lauriston',NULL,'Paris',NULL,'75016','France',1337,'95000.00'),  (409,'Stuttgart Collectable Exchange','Müller','Rita ','0711-555361','Adenauerallee 900',NULL,'Stuttgart',NULL,'70563','Germany',NULL,'0.00'),  (412,'Extreme Desk Decorations, Ltd','McRoy','Sarah','04 499 9555','101 Lambton Quay','Level 11','Wellington',NULL,NULL,'New Zealand',1612,'86800.00'),  (415,'Bavarian Collectables Imports, Co.','Donnermeyer','Michael',' +49 89 61 08 9555','Hansastr. 15',NULL,'Munich',NULL,'80686','Germany',1504,'77000.00'),  (424,'Classic Legends Inc.','Hernandez','Maria','2125558493','5905 Pompton St.','Suite 750','NYC','NY','10022','USA',1286,'67500.00'),  (443,'Feuer Online Stores, Inc','Feuer','Alexander ','0342-555176','Heerstr. 22',NULL,'Leipzig',NULL,'04179','Germany',NULL,'0.00'),  (447,'Gift Ideas Corp.','Lewis','Dan','2035554407','2440 Pompton St.',NULL,'Glendale','CT','97561','USA',1323,'49700.00'),  (448,'Scandinavian Gift Ideas','Larsson','Martha','0695-34 6555','Åkergatan 24',NULL,'Bräcke',NULL,'S-844 67','Sweden',1504,'116400.00'),  (450,'The Sharp Gifts Warehouse','Frick','Sue','4085553659','3086 Ingle Ln.',NULL,'San Jose','CA','94217','USA',1165,'77600.00'),  (452,'Mini Auto Werke','Mendel','Roland ','7675-3555','Kirchgasse 6',NULL,'Graz',NULL,'8010','Austria',1401,'45300.00'),  (455,'Super Scale Inc.','Murphy','Leslie','2035559545','567 North Pendale Street',NULL,'New Haven','CT','97823','USA',1286,'95400.00'),  (456,'Microscale Inc.','Choi','Yu','2125551957','5290 North Pendale Street','Suite 200','NYC','NY','10022','USA',1286,'39800.00'),  (458,'Corrida Auto Replicas, Ltd','Sommer','Martín ','(91) 555 22 82','C/ Araquil, 67',NULL,'Madrid',NULL,'28023','Spain',1702,'104600.00'),  (459,'Warburg Exchange','Ottlieb','Sven ','0241-039123','Walserweg 21',NULL,'Aachen',NULL,'52066','Germany',NULL,'0.00'),  (462,'FunGiftIdeas.com','Benitez','Violeta','5085552555','1785 First Street',NULL,'New Bedford','MA','50553','USA',1216,'85800.00'),  (465,'Anton Designs, Ltd.','Anton','Carmen','+34 913 728555','c/ Gobelas, 19-1 Urb. La Florida',NULL,'Madrid',NULL,'28023','Spain',NULL,'0.00'),  (471,'Australian Collectables, Ltd','Clenahan','Sean','61-9-3844-6555','7 Allen Street',NULL,'Glen Waverly','Victoria','3150','Australia',1611,'60300.00'),  (473,'Frau da Collezione','Ricotti','Franco','+39 022515555','20093 Cologno Monzese','Alessandro Volta 16','Milan',NULL,NULL,'Italy',1401,'34800.00'),  (475,'West Coast Collectables Co.','Thompson','Steve','3105553722','3675 Furth Circle',NULL,'Burbank','CA','94019','USA',1166,'55400.00'),  (477,'Mit Vergnügen & Co.','Moos','Hanna ','0621-08555','Forsterstr. 57',NULL,'Mannheim',NULL,'68306','Germany',NULL,'0.00'),  (480,'Kremlin Collectables, Co.','Semenov','Alexander ','+7 812 293 0521','2 Pobedy Square',NULL,'Saint Petersburg',NULL,'196143','Russia',NULL,'0.00'),  (481,'Raanan Stores, Inc','Altagar,G M','Raanan','+ 972 9 959 8555','3 Hagalim Blv.',NULL,'Herzlia',NULL,'47625','Israel',NULL,'0.00'),  (484,'Iberia Gift Imports, Corp.','Roel','José Pedro ','(95) 555 82 82','C/ Romero, 33',NULL,'Sevilla',NULL,'41101','Spain',1702,'65700.00'),  (486,'Motor Mint Distributors Inc.','Salazar','Rosa','2155559857','11328 Douglas Av.',NULL,'Philadelphia','PA','71270','USA',1323,'72600.00'),  (487,'Signal Collectibles Ltd.','Taylor','Sue','4155554312','2793 Furth Circle',NULL,'Brisbane','CA','94217','USA',1165,'60300.00'),  (489,'Double Decker Gift Stores, Ltd','Smith','Thomas ','(171) 555-7555','120 Hanover Sq.',NULL,'London',NULL,'WA1 1DP','UK',1501,'43300.00'),  (495,'Diecast Collectables','Franco','Valarie','6175552555','6251 Ingle Ln.',NULL,'Boston','MA','51003','USA',1188,'85100.00'),  (496,'Kelly\134's Gift Shop','Snowden','Tony','+64 9 5555500','Arenales 1938 3\134'A\134'',NULL,'Auckland  ',NULL,NULL,'New Zealand',1612,'110000.00');
select * from customers;
desc customers;
insert  into `customers`(`customerNumber`,`customerName`,`contactLastName`,`contactFirstName`,`phone`,`addressLine1`,`addressLine2`,`city`,`state`,`postalCode`,`country`,`salesRepEmployeeNumber`,`creditLimit`) values 
(103,'Atelier graphique','Schmitt','Carine ','40.32.2555','54, rue Royale',NULL,'Nantes',NULL,'44000','France',1370,'21000.00'),
(112,'Signal Gift Stores','King','Jean','7025551838','8489 Strong St.',NULL,'Las Vegas','NV','83030','USA',1166,'71800.00'),
(114,'Australian Collectors, Co.','Ferguson','Peter','03 9520 4555','636 St Kilda Road','Level 3','Melbourne','Victoria','3004','Australia',1611,'117300.00'),
(119,'La Rochelle Gifts','Labrune','Janine ','40.67.8555','67, rue des Cinquante Otages',NULL,'Nantes',NULL,'44000','France',1370,'118200.00'),
(121,'Baane Mini Imports','Bergulfsen','Jonas ','07-98 9555','Erling Skakkes gate 78',NULL,'Stavern',NULL,'4110','Norway',1504,'81700.00'),
(124,'Mini Gifts Distributors Ltd.','Nelson','Susan','4155551450','5677 Strong St.',NULL,'San Rafael','CA','97562','USA',1165,'210500.00'),
(125,'Havel & Zbyszek Co','Piestrzeniewicz','Zbyszek ','(26) 642-7555','ul. Filtrowa 68',NULL,'Warszawa',NULL,'01-012','Poland',NULL,'0.00'),
(128,'Blauer See Auto, Co.','Keitel','Roland','+49 69 66 90 2555','Lyonerstr. 34',NULL,'Frankfurt',NULL,'60528','Germany',1504,'59700.00'),
(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Whee of Toys Inc.','Lee','Kwai','2125557818','897 Long Airport Avenue',NULL,'NYC','NY','10022','USA',1323,'114900.00'),
(141,'Euro+ Shopping Channel','Freyre','Diego ','(91) 555 94 44','C/ Moralzarzal, 86',NULL,'Madrid',NULL,'28034','Spain',1370,'227600.00'),
(144,'Volvo Model Replicas, Co','Berglund','Christina ','0921-12 3555','Berguvsvägen  8',NULL,'Luleå',NULL,'S-958 22','Sweden',1504,'53100.00'),
(145,'Danish Wholesale Imports','Petersen','Jytte ','31 12 3555','Vinbæltet 34',NULL,'Kobenhavn',NULL,'1734','Denmark',1401,'83400.00'),
(146,'Saveley & Henriot, Co.','Saveley','Mary ','78.32.5555','2, rue du Commerce',NULL,'Lyon',NULL,'69004','France',1337,'123900.00'),
(148,'Dragon Souveniers, Ltd.','Natividad','Eric','+65 221 7555','Bronz Sok.','Bronz Apt. 3/6 Tesvikiye','Singapore',NULL,'079903','Singapore',1621,'103800.00'),
(151,'Muscle Machine Inc','Young','Jeff','2125557413','4092 Furth Circle','Suite 400','NYC','NY','10022','USA',1286,'138500.00'),
(157,'Diecast Classics Inc.','Leong','Kelvin','2155551555','7586 Pompton St.',NULL,'Allentown','PA','70267','USA',1216,'100600.00'),
(161,'Technics Stores Inc.','Hashimoto','Juri','6505556809','9408 Furth Circle',NULL,'Burlingame','CA','94217','USA',1165,'84600.00'),
(166,'Handji Gifts& Co','Victorino','Wendy','+65 224 1555','106 Linden Road Sandown','2nd Floor','Singapore',NULL,'069045','Singapore',1612,'97900.00'),
(167,'Herkku Gifts','Oeztan','Veysel','+47 2267 3215','Brehmen St. 121','PR 334 Sentrum','Bergen',NULL,'N 5804','Norway  ',1504,'96800.00'),
(168,'American Souvenirs Inc','Franco','Keith','2035557845','149 Spinnaker Dr.','Suite 101','New Haven','CT','97823','USA',1286,'0.00'),
(169,'Porto Imports Co.','de Castro','Isabel ','(1) 356-5555','Estrada da saúde n. 58',NULL,'Lisboa',NULL,'1756','Portugal',NULL,'0.00'),
(171,'Daedalus Designs Imports','Rancé','Martine ','20.16.1555','184, chaussée de Tournai',NULL,'Lille',NULL,'59000','France',1370,'82900.00'),
(172,'La Corne Dabondance, Co.','Bertrand','Marie','(1) 42.34.2555','265, boulevard Charonne',NULL,'Paris',NULL,'75012','France',1337,'84300.00'),
(173,'Cambridge Collectables Co.','Tseng','Jerry','6175555555','4658 Baden Av.',NULL,'Cambridge','MA','51247','USA',1188,'43400.00'),
(175,'Gift Depot Inc.','King','Julie','2035552570','25593 South Bay Ln.',NULL,'Bridgewater','CT','97562','USA',1323,'84300.00'),
(177,'Osaka Souveniers Co.','Kentary','Mory','+81 06 6342 5555','1-6-20 Dojima',NULL,'Kita-ku','Osaka',' 530-0003','Japan',1621,'81200.00'),
(181,'Vitachrome Inc.','Frick','Michael','2125551500','2678 Kingston Rd.','Suite 101','NYC','NY','10022','USA',1286,'76400.00'),
(186,'Toys of Finland, Co.','Karttunen','Matti','90-224 8555','Keskuskatu 45',NULL,'Helsinki',NULL,'21240','Finland',1501,'96500.00'),
(187,'AV Stores, Co.','Ashworth','Rachel','(171) 555-1555','Fauntleroy Circus',NULL,'Manchester',NULL,'EC2 5NT','UK',1501,'136800.00'),
(189,'Clover Collections, Co.','Cassidy','Dean','+353 1862 1555','25 Maiden Lane','Floor No. 4','Dublin',NULL,'2','Ireland',1504,'69400.00'),
(198,'Auto-Moto Classics Inc.','Taylor','Leslie','6175558428','16780 Pompton St.',NULL,'Brickhaven','MA','58339','USA',1216,'23000.00'),
(201,'UK Collectables, Ltd.','Devon','Elizabeth','(171) 555-2282','12, Berkeley Gardens Blvd',NULL,'Liverpool',NULL,'WX1 6LT','UK',1501,'92700.00'),
(202,'Canadian Gift Exchange Network','Tamuri','Yoshi ','(604) 555-3392','1900 Oak St.',NULL,'Vancouver','BC','V3F 2K1','Canada',1323,'90300.00'),
(204,'Online Mini Collectables','Barajas','Miguel','6175557555','7635 Spinnaker Dr.',NULL,'Brickhaven','MA','58339','USA',1188,'68700.00'),
(205,'Toys4GrownUps.com','Young','Julie','6265557265','78934 Hillside Dr.',NULL,'Pasadena','CA','90003','USA',1166,'90700.00'),
(206,'Asian Shopping Network, Co','Walker','Brydey','+612 9411 1555','Suntec Tower Three','8 Temasek','Singapore',NULL,'038988','Singapore',NULL,'0.00'),
(209,'Mini Caravy','Citeaux','Frédérique ','88.60.1555','24, place Kléber',NULL,'Strasbourg',NULL,'67000','France',1370,'53800.00'),
(211,'King Kong Collectables, Co.','Gao','Mike','+852 2251 1555','Bank of China Tower','1 Garden Road','Central Hong Kong',NULL,NULL,'Hong Kong',1621,'58600.00'),
(216,'Enaco Distributors','Saavedra','Eduardo ','(93) 203 4555','Rambla de Cataluña, 23',NULL,'Barcelona',NULL,'08022','Spain',1702,'60300.00'),
(219,'Boards & Toys Co.','Young','Mary','3105552373','4097 Douglas Av.',NULL,'Glendale','CA','92561','USA',1166,'11000.00'),
(223,'Natürlich Autos','Kloss','Horst ','0372-555188','Taucherstraße 10',NULL,'Cunewalde',NULL,'01307','Germany',NULL,'0.00'),
(227,'Heintze Collectables','Ibsen','Palle','86 21 3555','Smagsloget 45',NULL,'Århus',NULL,'8200','Denmark',1401,'120800.00'),
(233,'Québec Home Shopping Network','Fresnière','Jean ','(514) 555-8054','43 rue St. Laurent',NULL,'Montréal','Québec','H1J 1C3','Canada',1286,'48700.00'),
(237,'ANG Resellers','Camino','Alejandra ','(91) 745 6555','Gran Vía, 1',NULL,'Madrid',NULL,'28001','Spain',NULL,'0.00'),
(239,'Collectable Mini Designs Co.','Thompson','Valarie','7605558146','361 Furth Circle',NULL,'San Diego','CA','91217','USA',1166,'105000.00'),
(240,'giftsbymail.co.uk','Bennett','Helen ','(198) 555-8888','Garden House','Crowther Way 23','Cowes','Isle of Wight','PO31 7PJ','UK',1501,'93900.00'),
(242,'Alpha Cognac','Roulet','Annette ','61.77.6555','1 rue Alsace-Lorraine',NULL,'Toulouse',NULL,'31000','France',1370,'61100.00'),
(247,'Messner Shopping Network','Messner','Renate ','069-0555984','Magazinweg 7',NULL,'Frankfurt',NULL,'60528','Germany',NULL,'0.00'),
(249,'Amica Models & Co.','Accorti','Paolo ','011-4988555','Via Monte Bianco 34',NULL,'Torino',NULL,'10100','Italy',1401,'113000.00'),
(250,'Lyon Souveniers','Da Silva','Daniel','+33 1 46 62 7555','27 rue du Colonel Pierre Avia',NULL,'Paris',NULL,'75508','France',1337,'68100.00'),
(256,'Auto Associés & Cie.','Tonini','Daniel ','30.59.8555','67, avenue de lEurope',NULL,'Versailles',NULL,'78000','France',1370,'77900.00'),
(259,'Toms Spezialitäten, Ltd','Pfalzheim','Henriette ','0221-5554327','Mehrheimerstr. 369',NULL,'Köln',NULL,'50739','Germany',1504,'120400.00'),
(260,'Royal Canadian Collectables, Ltd.','Lincoln','Elizabeth ','(604) 555-4555','23 Tsawassen Blvd.',NULL,'Tsawassen','BC','T2F 8M4','Canada',1323,'89600.00'),
(273,'Franken Gifts, Co','Franken','Peter ','089-0877555','Berliner Platz 43',NULL,'München',NULL,'80805','Germany',NULL,'0.00'),
(276,'Annas Decorations, Ltd','OHara','Anna','02 9936 8555','201 Miller Street','Level 15','North Sydney','NSW','2060','Australia',1611,'107800.00'),
(278,'Rovelli Gifts','Rovelli','Giovanni ','035-640555','Via Ludovico il Moro 22',NULL,'Bergamo',NULL,'24100','Italy',1401,'119600.00'),
(282,'Souveniers And Things Co.','Huxley','Adrian','+61 2 9495 8555','Monitor Money Building','815 Pacific Hwy','Chatswood','NSW','2067','Australia',1611,'93300.00'),
(286,'Martas Replicas Co.','Hernandez','Marta','6175558555','39323 Spinnaker Dr.',NULL,'Cambridge','MA','51247','USA',1216,'123700.00'),
(293,'BG&E Collectables','Harrison','Ed','+41 26 425 50 01','Rte des Arsenaux 41 ',NULL,'Fribourg',NULL,'1700','Switzerland',NULL,'0.00'),
(298,'Vida Sport, Ltd','Holz','Mihael','0897-034555','Grenzacherweg 237',NULL,'Genève',NULL,'1203','Switzerland',1702,'141300.00'),
(299,'Norway Gifts By Mail, Co.','Klaeboe','Jan','+47 2212 1555','Drammensveien 126A','PB 211 Sentrum','Oslo',NULL,'N 0106','Norway  ',1504,'95100.00'),
(303,'Schuyler Imports','Schuyler','Bradley','+31 20 491 9555','Kingsfordweg 151',NULL,'Amsterdam',NULL,'1043 GR','Netherlands',NULL,'0.00'),
(307,'Der Hund Imports','Andersen','Mel','030-0074555','Obere Str. 57',NULL,'Berlin',NULL,'12209','Germany',NULL,'0.00'),
(311,'Oulu Toy Supplies, Inc.','Koskitalo','Pirkko','981-443655','Torikatu 38',NULL,'Oulu',NULL,'90110','Finland',1501,'90500.00'),
(314,'Petit Auto','Dewey','Catherine ','(02) 5554 67','Rue Joseph-Bens 532',NULL,'Bruxelles',NULL,'B-1180','Belgium',1401,'79900.00'),
(319,'Mini Classics','Frick','Steve','9145554562','3758 North Pendale Street',NULL,'White Plains','NY','24067','USA',1323,'102700.00'),
(320,'Mini Creations Ltd.','Huang','Wing','5085559555','4575 Hillside Dr.',NULL,'New Bedford','MA','50553','USA',1188,'94500.00'),
(321,'Corporate Gift Ideas Co.','Brown','Julie','6505551386','7734 Strong St.',NULL,'San Francisco','CA','94217','USA',1165,'105000.00'),
(323,'Down Under Souveniers, Inc','Graham','Mike','+64 9 312 5555','162-164 Grafton Road','Level 2','Auckland  ',NULL,NULL,'New Zealand',1612,'88000.00'),
(324,'Stylish Desk Decors, Co.','Brown','Ann ','(171) 555-0297','35 King George',NULL,'London',NULL,'WX3 6FW','UK',1501,'77000.00'),
(328,'Tekni Collectables Inc.','Brown','William','2015559350','7476 Moss Rd.',NULL,'Newark','NJ','94019','USA',1323,'43000.00'),
(333,'Australian Gift Network, Co','Calaghan','Ben','61-7-3844-6555','31 Duncan St. West End',NULL,'South Brisbane','Queensland','4101','Australia',1611,'51600.00'),
(334,'Suominen Souveniers','Suominen','Kalle','+358 9 8045 555','Software Engineering Center','SEC Oy','Espoo',NULL,'FIN-02271','Finland',1501,'98800.00'),
(335,'Cramer Spezialitäten, Ltd','Cramer','Philip ','0555-09555','Maubelstr. 90',NULL,'Brandenburg',NULL,'14776','Germany',NULL,'0.00'),
(339,'Classic Gift Ideas, Inc','Cervantes','Francisca','2155554695','782 First Street',NULL,'Philadelphia','PA','71270','USA',1188,'81100.00'),
(344,'CAF Imports','Fernandez','Jesus','+34 913 728 555','Merchants House','27-30 Merchants Quay','Madrid',NULL,'28023','Spain',1702,'59600.00'),
(347,'Men R US Retailers, Ltd.','Chandler','Brian','2155554369','6047 Douglas Av.',NULL,'Los Angeles','CA','91003','USA',1166,'57700.00'),
(348,'Asian Treasures, Inc.','McKenna','Patricia ','2967 555','8 Johnstown Road',NULL,'Cork','Co. Cork',NULL,'Ireland',NULL,'0.00'),
(350,'Marseille Mini Autos','Lebihan','Laurence ','91.24.4555','12, rue des Bouchers',NULL,'Marseille',NULL,'13008','France',1337,'65000.00'),
(353,'Reims Collectables','Henriot','Paul ','26.47.1555','59 rue de lAbbaye',NULL,'Reims',NULL,'51100','France',1337,'81100.00'),
(356,'SAR Distributors, Co','Kuger','Armand','+27 21 550 3555','1250 Pretorius Street',NULL,'Hatfield','Pretoria','0028','South Africa',NULL,'0.00'),
(357,'GiftsForHim.com','MacKinlay','Wales','64-9-3763555','199 Great North Road',NULL,'Auckland',NULL,NULL,'New Zealand',1612,'77700.00'),
(361,'Kommission Auto','Josephs','Karin','0251-555259','Luisenstr. 48',NULL,'Münster',NULL,'44087','Germany',NULL,'0.00'),
(362,'Gifts4AllAges.com','Yoshido','Juri','6175559555','8616 Spinnaker Dr.',NULL,'Boston','MA','51003','USA',1216,'41900.00'),
(363,'Online Diecast Creations Co.','Young','Dorothy','6035558647','2304 Long Airport Avenue',NULL,'Nashua','NH','62005','USA',1216,'114200.00'),
(369,'Lisboa Souveniers, Inc','Rodriguez','Lino ','(1) 354-2555','Jardim das rosas n. 32',NULL,'Lisboa',NULL,'1675','Portugal',NULL,'0.00'),
(376,'Precious Collectables','Urs','Braun','0452-076555','Hauptstr. 29',NULL,'Bern',NULL,'3012','Switzerland',1702,'0.00'),
(379,'Collectables For Less Inc.','Nelson','Allen','6175558555','7825 Douglas Av.',NULL,'Brickhaven','MA','58339','USA',1188,'70700.00'),
(381,'Royale Belge','Cartrain','Pascale ','(071) 23 67 2555','Boulevard Tirou, 255',NULL,'Charleroi',NULL,'B-6000','Belgium',1401,'23500.00'),
(382,'Salzburg Collectables','Pipps','Georg ','6562-9555','Geislweg 14',NULL,'Salzburg',NULL,'5020','Austria',1401,'71700.00'),
(385,'Cruz & Sons Co.','Cruz','Arnold','+63 2 555 3587','15 McCallum Street','NatWest Center #13-03','Makati City',NULL,'1227 MM','Philippines',1621,'81500.00'),
(386,'Lordine Souveniers','Moroni','Maurizio ','0522-556555','Strada Provinciale 124',NULL,'Reggio Emilia',NULL,'42100','Italy',1401,'121400.00'),
(398,'Tokyo Collectables, Ltd','Shimamura','Akiko','+81 3 3584 0555','2-2-8 Roppongi',NULL,'Minato-ku','Tokyo','106-0032','Japan',1621,'94400.00'),
(406,'Auto Canal+ Petit','Perrier','Dominique','(1) 47.55.6555','25, rue Lauriston',NULL,'Paris',NULL,'75016','France',1337,'95000.00'),
(409,'Stuttgart Collectable Exchange','Müller','Rita ','0711-555361','Adenauerallee 900',NULL,'Stuttgart',NULL,'70563','Germany',NULL,'0.00'),
(412,'Extreme Desk Decorations, Ltd','McRoy','Sarah','04 499 9555','101 Lambton Quay','Level 11','Wellington',NULL,NULL,'New Zealand',1612,'86800.00'),
(415,'Bavarian Collectables Imports, Co.','Donnermeyer','Michael',' +49 89 61 08 9555','Hansastr. 15',NULL,'Munich',NULL,'80686','Germany',1504,'77000.00'),
(424,'Classic Legends Inc.','Hernandez','Maria','2125558493','5905 Pompton St.','Suite 750','NYC','NY','10022','USA',1286,'67500.00'),
(443,'Feuer Online Stores, Inc','Feuer','Alexander ','0342-555176','Heerstr. 22',NULL,'Leipzig',NULL,'04179','Germany',NULL,'0.00'),
(447,'Gift Ideas Corp.','Lewis','Dan','2035554407','2440 Pompton St.',NULL,'Glendale','CT','97561','USA',1323,'49700.00'),
(448,'Scandinavian Gift Ideas','Larsson','Martha','0695-34 6555','Åkergatan 24',NULL,'Bräcke',NULL,'S-844 67','Sweden',1504,'116400.00'),
(450,'The Sharp Gifts Warehouse','Frick','Sue','4085553659','3086 Ingle Ln.',NULL,'San Jose','CA','94217','USA',1165,'77600.00'),
(452,'Mini Auto Werke','Mendel','Roland ','7675-3555','Kirchgasse 6',NULL,'Graz',NULL,'8010','Austria',1401,'45300.00'),
(455,'Super Scale Inc.','Murphy','Leslie','2035559545','567 North Pendale Street',NULL,'New Haven','CT','97823','USA',1286,'95400.00'),
(456,'Microscale Inc.','Choi','Yu','2125551957','5290 North Pendale Street','Suite 200','NYC','NY','10022','USA',1286,'39800.00'),
(458,'Corrida Auto Replicas, Ltd','Sommer','Martín ','(91) 555 22 82','C/ Araquil, 67',NULL,'Madrid',NULL,'28023','Spain',1702,'104600.00'),
(459,'Warburg Exchange','Ottlieb','Sven ','0241-039123','Walserweg 21',NULL,'Aachen',NULL,'52066','Germany',NULL,'0.00'),
(462,'FunGiftIdeas.com','Benitez','Violeta','5085552555','1785 First Street',NULL,'New Bedford','MA','50553','USA',1216,'85800.00'),
(465,'Anton Designs, Ltd.','Anton','Carmen','+34 913 728555','c/ Gobelas, 19-1 Urb. La Florida',NULL,'Madrid',NULL,'28023','Spain',NULL,'0.00'),
(471,'Australian Collectables, Ltd','Clenahan','Sean','61-9-3844-6555','7 Allen Street',NULL,'Glen Waverly','Victoria','3150','Australia',1611,'60300.00'),
(473,'Frau da Collezione','Ricotti','Franco','+39 022515555','20093 Cologno Monzese','Alessandro Volta 16','Milan',NULL,NULL,'Italy',1401,'34800.00'),
(475,'West Coast Collectables Co.','Thompson','Steve','3105553722','3675 Furth Circle',NULL,'Burbank','CA','94019','USA',1166,'55400.00'),
(477,'Mit Vergnügen & Co.','Moos','Hanna ','0621-08555','Forsterstr. 57',NULL,'Mannheim',NULL,'68306','Germany',NULL,'0.00'),
(480,'Kremlin Collectables, Co.','Semenov','Alexander ','+7 812 293 0521','2 Pobedy Square',NULL,'Saint Petersburg',NULL,'196143','Russia',NULL,'0.00'),
(481,'Raanan Stores, Inc','Altagar,G M','Raanan','+ 972 9 959 8555','3 Hagalim Blv.',NULL,'Herzlia',NULL,'47625','Israel',NULL,'0.00'),
(484,'Iberia Gift Imports, Corp.','Roel','José Pedro ','(95) 555 82 82','C/ Romero, 33',NULL,'Sevilla',NULL,'41101','Spain',1702,'65700.00'),
(486,'Motor Mint Distributors Inc.','Salazar','Rosa','2155559857','11328 Douglas Av.',NULL,'Philadelphia','PA','71270','USA',1323,'72600.00'),
(487,'Signal Collectibles Ltd.','Taylor','Sue','4155554312','2793 Furth Circle',NULL,'Brisbane','CA','94217','USA',1165,'60300.00'),
(489,'Double Decker Gift Stores, Ltd','Smith','Thomas ','(171) 555-7555','120 Hanover Sq.',NULL,'London',NULL,'WA1 1DP','UK',1501,'43300.00'),
(495,'Diecast Collectables','Franco','Valarie','6175552555','6251 Ingle Ln.',NULL,'Boston','MA','51003','USA',1188,'85100.00'),
(496,'Kellys Gift Shop','Snowden','Tony','+64 9 5555500','Arenales 1938 3A',NULL,'Auckland  ',NULL,NULL,'New Zealand',1612,'110000.00');
insert  into `customers`(`customerNumber`,`customerName`,`contactLastName`,`contactFirstName`,`phone`,`addressLine1`,`addressLine2`,`city`,`state`,`postalCode`,`country`,`salesRepEmployeeNumber`,`creditLimit`) values   (103,'Atelier graphique','Schmitt','Carine ','40.32.2555','54, rue Royale',NULL,'Nantes',NULL,'44000','France',1370,'21000.00'),  (112,'Signal Gift Stores','King','Jean','7025551838','8489 Strong St.',NULL,'Las Vegas','NV','83030','USA',1166,'71800.00'),  (114,'Australian Collectors, Co.','Ferguson','Peter','03 9520 4555','636 St Kilda Road','Level 3','Melbourne','Victoria','3004','Australia',1611,'117300.00'),  (119,'La Rochelle Gifts','Labrune','Janine ','40.67.8555','67, rue des Cinquante Otages',NULL,'Nantes',NULL,'44000','France',1370,'118200.00'),  (121,'Baane Mini Imports','Bergulfsen','Jonas ','07-98 9555','Erling Skakkes gate 78',NULL,'Stavern',NULL,'4110','Norway',1504,'81700.00'),  (124,'Mini Gifts Distributors Ltd.','Nelson','Susan','4155551450','5677 Strong St.',NULL,'San Rafael','CA','97562','USA',1165,'210500.00'),  (125,'Havel & Zbyszek Co','Piestrzeniewicz','Zbyszek ','(26) 642-7555','ul. Filtrowa 68',NULL,'Warszawa',NULL,'01-012','Poland',NULL,'0.00'),  (128,'Blauer See Auto, Co.','Keitel','Roland','+49 69 66 90 2555','Lyonerstr. 34',NULL,'Frankfurt',NULL,'60528','Germany',1504,'59700.00'),  (129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Wheels Co.','Mur(129,'Mini Whee of Toys Inc.','Lee','Kwai','2125557818','897 Long Airport Avenue',NULL,'NYC','NY','10022','USA',1323,'114900.00'),\012\012(141,'Euro+ Shopping Channel','Freyre','Diego ','(91) 555 94 44','C/ Moralzarzal, 86',NULL,'Madrid',NULL,'28034','Spain',1370,'227600.00'),\012\012(144,'Volvo Model Replicas, Co','Berglund','Christina ','0921-12 3555','Berguvsvägen  8',NULL,'Luleå',NULL,'S-958 22','Sweden',1504,'53100.00'),\012\012(145,'Danish Wholesale Imports','Petersen','Jytte ','31 12 3555','Vinbæltet 34',NULL,'Kobenhavn',NULL,'1734','Denmark',1401,'83400.00'),\012\012(146,'Saveley & Henriot, Co.','Saveley','Mary ','78.32.5555','2, rue du Commerce',NULL,'Lyon',NULL,'69004','France',1337,'123900.00'),\012\012(148,'Dragon Souveniers, Ltd.','Natividad','Eric','+65 221 7555','Bronz Sok.','Bronz Apt. 3/6 Tesvikiye','Singapore',NULL,'079903','Singapore',1621,'103800.00'),\012\012(151,'Muscle Machine Inc','Young','Jeff','2125557413','4092 Furth Circle','Suite 400','NYC','NY','10022','USA',1286,'138500.00'),\012\012(157,'Diecast Classics Inc.','Leong','Kelvin','2155551555','7586 Pompton St.',NULL,'Allentown','PA','70267','USA',1216,'100600.00'),\012\012(161,'Technics Stores Inc.','Hashimoto','Juri','6505556809','9408 Furth Circle',NULL,'Burlingame','CA','94217','USA',1165,'84600.00'),\012\012(166,'Handji Gifts& Co','Victorino','Wendy','+65 224 1555','106 Linden Road Sandown','2nd Floor','Singapore',NULL,'069045','Singapore',1612,'97900.00'),\012\012(167,'Herkku Gifts','Oeztan','Veysel','+47 2267 3215','Brehmen St. 121','PR 334 Sentrum','Bergen',NULL,'N 5804','Norway  ',1504,'96800.00'),\012\012(168,'American Souvenirs Inc','Franco','Keith','2035557845','149 Spinnaker Dr.','Suite 101','New Haven','CT','97823','USA',1286,'0.00'),\012\012(169,'Porto Imports Co.','de Castro','Isabel ','(1) 356-5555','Estrada da saúde n. 58',NULL,'Lisboa',NULL,'1756','Portugal',NULL,'0.00'),\012\012(171,'Daedalus Designs Imports','Rancé','Martine ','20.16.1555','184, chaussée de Tournai',NULL,'Lille',NULL,'59000','France',1370,'82900.00'),\012\012(172,'La Corne Dabondance, Co.','Bertrand','Marie','(1) 42.34.2555','265, boulevard Charonne',NULL,'Paris',NULL,'75012','France',1337,'84300.00'),\012\012(173,'Cambridge Collectables Co.','Tseng','Jerry','6175555555','4658 Baden Av.',NULL,'Cambridge','MA','51247','USA',1188,'43400.00'),\012\012(175,'Gift Depot Inc.','King','Julie','2035552570','25593 South Bay Ln.',NULL,'Bridgewater','CT','97562','USA',1323,'84300.00'),\012\012(177,'Osaka Souveniers Co.','Kentary','Mory','+81 06 6342 5555','1-6-20 Dojima',NULL,'Kita-ku','Osaka',' 530-0003','Japan',1621,'81200.00'),\012\012(181,'Vitachrome Inc.','Frick','Michael','2125551500','2678 Kingston Rd.','Suite 101','NYC','NY','10022','USA',1286,'76400.00'),\012\012(186,'Toys of Finland, Co.','Karttunen','Matti','90-224 8555','Keskuskatu 45',NULL,'Helsinki',NULL,'21240','Finland',1501,'96500.00'),\012\012(187,'AV Stores, Co.','Ashworth','Rachel','(171) 555-1555','Fauntleroy Circus',NULL,'Manchester',NULL,'EC2 5NT','UK',1501,'136800.00'),\012\012(189,'Clover Collections, Co.','Cassidy','Dean','+353 1862 1555','25 Maiden Lane','Floor No. 4','Dublin',NULL,'2','Ireland',1504,'69400.00'),\012\012(198,'Auto-Moto Classics Inc.','Taylor','Leslie','6175558428','16780 Pompton St.',NULL,'Brickhaven','MA','58339','USA',1216,'23000.00'),\012\012(201,'UK Collectables, Ltd.','Devon','Elizabeth','(171) 555-2282','12, Berkeley Gardens Blvd',NULL,'Liverpool',NULL,'WX1 6LT','UK',1501,'92700.00'),\012\012(202,'Canadian Gift Exchange Network','Tamuri','Yoshi ','(604) 555-3392','1900 Oak St.',NULL,'Vancouver','BC','V3F 2K1','Canada',1323,'90300.00'),\012\012(204,'Online Mini Collectables','Barajas','Miguel','6175557555','7635 Spinnaker Dr.',NULL,'Brickhaven','MA','58339','USA',1188,'68700.00'),\012\012(205,'Toys4GrownUps.com','Young','Julie','6265557265','78934 Hillside Dr.',NULL,'Pasadena','CA','90003','USA',1166,'90700.00'),\012\012(206,'Asian Shopping Network, Co','Walker','Brydey','+612 9411 1555','Suntec Tower Three','8 Temasek','Singapore',NULL,'038988','Singapore',NULL,'0.00'),\012\012(209,'Mini Caravy','Citeaux','Frédérique ','88.60.1555','24, place Kléber',NULL,'Strasbourg',NULL,'67000','France',1370,'53800.00'),\012\012(211,'King Kong Collectables, Co.','Gao','Mike','+852 2251 1555','Bank of China Tower','1 Garden Road','Central Hong Kong',NULL,NULL,'Hong Kong',1621,'58600.00'),\012\012(216,'Enaco Distributors','Saavedra','Eduardo ','(93) 203 4555','Rambla de Cataluña, 23',NULL,'Barcelona',NULL,'08022','Spain',1702,'60300.00'),\012\012(219,'Boards & Toys Co.','Young','Mary','3105552373','4097 Douglas Av.',NULL,'Glendale','CA','92561','USA',1166,'11000.00'),\012\012(223,'Natürlich Autos','Kloss','Horst ','0372-555188','Taucherstraße 10',NULL,'Cunewalde',NULL,'01307','Germany',NULL,'0.00'),\012\012(227,'Heintze Collectables','Ibsen','Palle','86 21 3555','Smagsloget 45',NULL,'Århus',NULL,'8200','Denmark',1401,'120800.00'),\012\012(233,'Québec Home Shopping Network','Fresnière','Jean ','(514) 555-8054','43 rue St. Laurent',NULL,'Montréal','Québec','H1J 1C3','Canada',1286,'48700.00'),\012\012(237,'ANG Resellers','Camino','Alejandra ','(91) 745 6555','Gran Vía, 1',NULL,'Madrid',NULL,'28001','Spain',NULL,'0.00'),\012\012(239,'Collectable Mini Designs Co.','Thompson','Valarie','7605558146','361 Furth Circle',NULL,'San Diego','CA','91217','USA',1166,'105000.00'),\012\012(240,'giftsbymail.co.uk','Bennett','Helen ','(198) 555-8888','Garden House','Crowther Way 23','Cowes','Isle of Wight','PO31 7PJ','UK',1501,'93900.00'),\012\012(242,'Alpha Cognac','Roulet','Annette ','61.77.6555','1 rue Alsace-Lorraine',NULL,'Toulouse',NULL,'31000','France',1370,'61100.00'),\012\012(247,'Messner Shopping Network','Messner','Renate ','069-0555984','Magazinweg 7',NULL,'Frankfurt',NULL,'60528','Germany',NULL,'0.00'),\012\012(249,'Amica Models & Co.','Accorti','Paolo ','011-4988555','Via Monte Bianco 34',NULL,'Torino',NULL,'10100','Italy',1401,'113000.00'),\012\012(250,'Lyon Souveniers','Da Silva','Daniel','+33 1 46 62 7555','27 rue du Colonel Pierre Avia',NULL,'Paris',NULL,'75508','France',1337,'68100.00'),\012\012(256,'Auto Associés & Cie.','Tonini','Daniel ','30.59.8555','67, avenue de lEurope',NULL,'Versailles',NULL,'78000','France',1370,'77900.00'),\012\012(259,'Toms Spezialitäten, Ltd','Pfalzheim','Henriette ','0221-5554327','Mehrheimerstr. 369',NULL,'Köln',NULL,'50739','Germany',1504,'120400.00'),\012\012(260,'Royal Canadian Collectables, Ltd.','Lincoln','Elizabeth ','(604) 555-4555','23 Tsawassen Blvd.',NULL,'Tsawassen','BC','T2F 8M4','Canada',1323,'89600.00'),\012\012(273,'Franken Gifts, Co','Franken','Peter ','089-0877555','Berliner Platz 43',NULL,'München',NULL,'80805','Germany',NULL,'0.00'),\012\012(276,'Annas Decorations, Ltd','OHara','Anna','02 9936 8555','201 Miller Street','Level 15','North Sydney','NSW','2060','Australia',1611,'107800.00'),\012\012(278,'Rovelli Gifts','Rovelli','Giovanni ','035-640555','Via Ludovico il Moro 22',NULL,'Bergamo',NULL,'24100','Italy',1401,'119600.00'),\012\012(282,'Souveniers And Things Co.','Huxley','Adrian','+61 2 9495 8555','Monitor Money Building','815 Pacific Hwy','Chatswood','NSW','2067','Australia',1611,'93300.00'),\012\012(286,'Martas Replicas Co.','Hernandez','Marta','6175558555','39323 Spinnaker Dr.',NULL,'Cambridge','MA','51247','USA',1216,'123700.00'),\012\012(293,'BG&E Collectables','Harrison','Ed','+41 26 425 50 01','Rte des Arsenaux 41 ',NULL,'Fribourg',NULL,'1700','Switzerland',NULL,'0.00'),\012\012(298,'Vida Sport, Ltd','Holz','Mihael','0897-034555','Grenzacherweg 237',NULL,'Genève',NULL,'1203','Switzerland',1702,'141300.00'),\012\012(299,'Norway Gifts By Mail, Co.','Klaeboe','Jan','+47 2212 1555','Drammensveien 126A','PB 211 Sentrum','Oslo',NULL,'N 0106','Norway  ',1504,'95100.00'),\012\012(303,'Schuyler Imports','Schuyler','Bradley','+31 20 491 9555','Kingsfordweg 151',NULL,'Amsterdam',NULL,'1043 GR','Netherlands',NULL,'0.00'),\012\012(307,'Der Hund Imports','Andersen','Mel','030-0074555','Obere Str. 57',NULL,'Berlin',NULL,'12209','Germany',NULL,'0.00'),\012\012(311,'Oulu Toy Supplies, Inc.','Koskitalo','Pirkko','981-443655','Torikatu 38',NULL,'Oulu',NULL,'90110','Finland',1501,'90500.00'),\012\012(314,'Petit Auto','Dewey','Catherine ','(02) 5554 67','Rue Joseph-Bens 532',NULL,'Bruxelles',NULL,'B-1180','Belgium',1401,'79900.00'),\012\012(319,'Mini Classics','Frick','Steve','9145554562','3758 North Pendale Street',NULL,'White Plains','NY','24067','USA',1323,'102700.00'),\012\012(320,'Mini Creations Ltd.','Huang','Wing','5085559555','4575 Hillside Dr.',NULL,'New Bedford','MA','50553','USA',1188,'94500.00'),\012\012(321,'Corporate Gift Ideas Co.','Brown','Julie','6505551386','7734 Strong St.',NULL,'San Francisco','CA','94217','USA',1165,'105000.00'),\012\012(323,'Down Under Souveniers, Inc','Graham','Mike','+64 9 312 5555','162-164 Grafton Road','Level 2','Auckland  ',NULL,NULL,'New Zealand',1612,'88000.00'),\012\012(324,'Stylish Desk Decors, Co.','Brown','Ann ','(171) 555-0297','35 King George',NULL,'London',NULL,'WX3 6FW','UK',1501,'77000.00'),\012\012(328,'Tekni Collectables Inc.','Brown','William','2015559350','7476 Moss Rd.',NULL,'Newark','NJ','94019','USA',1323,'43000.00'),\012\012(333,'Australian Gift Network, Co','Calaghan','Ben','61-7-3844-6555','31 Duncan St. West End',NULL,'South Brisbane','Queensland','4101','Australia',1611,'51600.00'),\012\012(334,'Suominen Souveniers','Suominen','Kalle','+358 9 8045 555','Software Engineering Center','SEC Oy','Espoo',NULL,'FIN-02271','Finland',1501,'98800.00'),\012\012(335,'Cramer Spezialitäten, Ltd','Cramer','Philip ','0555-09555','Maubelstr. 90',NULL,'Brandenburg',NULL,'14776','Germany',NULL,'0.00'),\012\012(339,'Classic Gift Ideas, Inc','Cervantes','Francisca','2155554695','782 First Street',NULL,'Philadelphia','PA','71270','USA',1188,'81100.00'),\012\012(344,'CAF Imports','Fernandez','Jesus','+34 913 728 555','Merchants House','27-30 Merchants Quay','Madrid',NULL,'28023','Spain',1702,'59600.00'),\012\012(347,'Men R US Retailers, Ltd.','Chandler','Brian','2155554369','6047 Douglas Av.',NULL,'Los Angeles','CA','91003','USA',1166,'57700.00'),\012\012(348,'Asian Treasures, Inc.','McKenna','Patricia ','2967 555','8 Johnstown Road',NULL,'Cork','Co. Cork',NULL,'Ireland',NULL,'0.00'),\012\012(350,'Marseille Mini Autos','Lebihan','Laurence ','91.24.4555','12, rue des Bouchers',NULL,'Marseille',NULL,'13008','France',1337,'65000.00'),\012\012(353,'Reims Collectables','Henriot','Paul ','26.47.1555','59 rue de lAbbaye',NULL,'Reims',NULL,'51100','France',1337,'81100.00'),\012\012(356,'SAR Distributors, Co','Kuger','Armand','+27 21 550 3555','1250 Pretorius Street',NULL,'Hatfield','Pretoria','0028','South Africa',NULL,'0.00'),\012\012(357,'GiftsForHim.com','MacKinlay','Wales','64-9-3763555','199 Great North Road',NULL,'Auckland',NULL,NULL,'New Zealand',1612,'77700.00'),\012\012(361,'Kommission Auto','Josephs','Karin','0251-555259','Luisenstr. 48',NULL,'Münster',NULL,'44087','Germany',NULL,'0.00'),\012\012(362,'Gifts4AllAges.com','Yoshido','Juri','6175559555','8616 Spinnaker Dr.',NULL,'Boston','MA','51003','USA',1216,'41900.00'),\012\012(363,'Online Diecast Creations Co.','Young','Dorothy','6035558647','2304 Long Airport Avenue',NULL,'Nashua','NH','62005','USA',1216,'114200.00'),\012\012(369,'Lisboa Souveniers, Inc','Rodriguez','Lino ','(1) 354-2555','Jardim das rosas n. 32',NULL,'Lisboa',NULL,'1675','Portugal',NULL,'0.00'),\012\012(376,'Precious Collectables','Urs','Braun','0452-076555','Hauptstr. 29',NULL,'Bern',NULL,'3012','Switzerland',1702,'0.00'),\012\012(379,'Collectables For Less Inc.','Nelson','Allen','6175558555','7825 Douglas Av.',NULL,'Brickhaven','MA','58339','USA',1188,'70700.00'),\012\012(381,'Royale Belge','Cartrain','Pascale ','(071) 23 67 2555','Boulevard Tirou, 255',NULL,'Charleroi',NULL,'B-6000','Belgium',1401,'23500.00'),\012\012(382,'Salzburg Collectables','Pipps','Georg ','6562-9555','Geislweg 14',NULL,'Salzburg',NULL,'5020','Austria',1401,'71700.00'),\012\012(385,'Cruz & Sons Co.','Cruz','Arnold','+63 2 555 3587','15 McCallum Street','NatWest Center   (386,'Lordine Souveniers','Moroni','Maurizio ','0522-556555','Strada Provinciale 124',NULL,'Reggio Emilia',NULL,'42100','Italy',1401,'121400.00'),  (398,'Tokyo Collectables, Ltd','Shimamura','Akiko','+81 3 3584 0555','2-2-8 Roppongi',NULL,'Minato-ku','Tokyo','106-0032','Japan',1621,'94400.00'),  (406,'Auto Canal+ Petit','Perrier','Dominique','(1) 47.55.6555','25, rue Lauriston',NULL,'Paris',NULL,'75016','France',1337,'95000.00'),  (409,'Stuttgart Collectable Exchange','Müller','Rita ','0711-555361','Adenauerallee 900',NULL,'Stuttgart',NULL,'70563','Germany',NULL,'0.00'),  (412,'Extreme Desk Decorations, Ltd','McRoy','Sarah','04 499 9555','101 Lambton Quay','Level 11','Wellington',NULL,NULL,'New Zealand',1612,'86800.00'),  (415,'Bavarian Collectables Imports, Co.','Donnermeyer','Michael',' +49 89 61 08 9555','Hansastr. 15',NULL,'Munich',NULL,'80686','Germany',1504,'77000.00'),  (424,'Classic Legends Inc.','Hernandez','Maria','2125558493','5905 Pompton St.','Suite 750','NYC','NY','10022','USA',1286,'67500.00'),  (443,'Feuer Online Stores, Inc','Feuer','Alexander ','0342-555176','Heerstr. 22',NULL,'Leipzig',NULL,'04179','Germany',NULL,'0.00'),  (447,'Gift Ideas Corp.','Lewis','Dan','2035554407','2440 Pompton St.',NULL,'Glendale','CT','97561','USA',1323,'49700.00'),  (448,'Scandinavian Gift Ideas','Larsson','Martha','0695-34 6555','Åkergatan 24',NULL,'Bräcke',NULL,'S-844 67','Sweden',1504,'116400.00'),  (450,'The Sharp Gifts Warehouse','Frick','Sue','4085553659','3086 Ingle Ln.',NULL,'San Jose','CA','94217','USA',1165,'77600.00'),  (452,'Mini Auto Werke','Mendel','Roland ','7675-3555','Kirchgasse 6',NULL,'Graz',NULL,'8010','Austria',1401,'45300.00'),  (455,'Super Scale Inc.','Murphy','Leslie','2035559545','567 North Pendale Street',NULL,'New Haven','CT','97823','USA',1286,'95400.00'),  (456,'Microscale Inc.','Choi','Yu','2125551957','5290 North Pendale Street','Suite 200','NYC','NY','10022','USA',1286,'39800.00'),  (458,'Corrida Auto Replicas, Ltd','Sommer','Martín ','(91) 555 22 82','C/ Araquil, 67',NULL,'Madrid',NULL,'28023','Spain',1702,'104600.00'),  (459,'Warburg Exchange','Ottlieb','Sven ','0241-039123','Walserweg 21',NULL,'Aachen',NULL,'52066','Germany',NULL,'0.00'),  (462,'FunGiftIdeas.com','Benitez','Violeta','5085552555','1785 First Street',NULL,'New Bedford','MA','50553','USA',1216,'85800.00'),  (465,'Anton Designs, Ltd.','Anton','Carmen','+34 913 728555','c/ Gobelas, 19-1 Urb. La Florida',NULL,'Madrid',NULL,'28023','Spain',NULL,'0.00'),  (471,'Australian Collectables, Ltd','Clenahan','Sean','61-9-3844-6555','7 Allen Street',NULL,'Glen Waverly','Victoria','3150','Australia',1611,'60300.00'),  (473,'Frau da Collezione','Ricotti','Franco','+39 022515555','20093 Cologno Monzese','Alessandro Volta 16','Milan',NULL,NULL,'Italy',1401,'34800.00'),  (475,'West Coast Collectables Co.','Thompson','Steve','3105553722','3675 Furth Circle',NULL,'Burbank','CA','94019','USA',1166,'55400.00'),  (477,'Mit Vergnügen & Co.','Moos','Hanna ','0621-08555','Forsterstr. 57',NULL,'Mannheim',NULL,'68306','Germany',NULL,'0.00'),  (480,'Kremlin Collectables, Co.','Semenov','Alexander ','+7 812 293 0521','2 Pobedy Square',NULL,'Saint Petersburg',NULL,'196143','Russia',NULL,'0.00'),  (481,'Raanan Stores, Inc','Altagar,G M','Raanan','+ 972 9 959 8555','3 Hagalim Blv.',NULL,'Herzlia',NULL,'47625','Israel',NULL,'0.00'),  (484,'Iberia Gift Imports, Corp.','Roel','José Pedro ','(95) 555 82 82','C/ Romero, 33',NULL,'Sevilla',NULL,'41101','Spain',1702,'65700.00'),  (486,'Motor Mint Distributors Inc.','Salazar','Rosa','2155559857','11328 Douglas Av.',NULL,'Philadelphia','PA','71270','USA',1323,'72600.00'),  (487,'Signal Collectibles Ltd.','Taylor','Sue','4155554312','2793 Furth Circle',NULL,'Brisbane','CA','94217','USA',1165,'60300.00'),  (489,'Double Decker Gift Stores, Ltd','Smith','Thomas ','(171) 555-7555','120 Hanover Sq.',NULL,'London',NULL,'WA1 1DP','UK',1501,'43300.00'),  (495,'Diecast Collectables','Franco','Valarie','6175552555','6251 Ingle Ln.',NULL,'Boston','MA','51003','USA',1188,'85100.00'),  (496,'Kellys Gift Shop','Snowden','Tony','+64 9 5555500','Arenales 1938 3A',NULL,'Auckland  ',NULL,NULL,'New Zealand',1612,'110000.00');
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
select * from myemp where salary > (select avg(salary) from myemp);
select avg(salary) from myemp;
select * from myemp limit 15;
select * from myemp as e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select avg(salary) from myemp where dep_id = 60;
select * from products;
select * from employees;
select * from offices;
select * from employees;
select * from offices;
select officecode from offices where country = 'usa';
select * from employees where officecode in (select officecode from offices where country = 'usa');
select first_name, last_name , avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select first_name, last_name, salary, avg(salalry) over (partition by dep_id) from myemp;
select first_name, last_name, salary, avg(salary) over (partition by dep_id) from myemp;
select first_name, last_name, dep_id , salary, avg(salary) over (partition by dep_id) from myemp;
exit
use learndb;
create table trains(Train_id integer,   Station varchar(50),  Time time);
insert into trains values (110, 'San Francisco' ,  '10:00:00'),
(110, 'Redwood City' ,   '10:54:00'),
(110, 'Palo Alto ' , '11:02:00'),
(110 , 'San Jose ' ,  '12:35:00'),
(120, 'San Francisco ' , '11:00:00'),
(120 , 'Palo Alto' ,  '12:49:00'),
(120, 'San Jose' ,  '13:30:00');
insert into trains values (110, 'San Francisco' ,  '10:00:00'), (110, 'Redwood City' ,   '10:54:00'), (110, 'Palo Alto ' , '11:02:00'), (110 , 'San Jose ' ,  '12:35:00'), (120, 'San Francisco ' , '11:00:00'), (120 , 'Palo Alto' ,  '12:49:00'), (120, 'San Jose' ,  '13:30:00');
select * from trains;
SELECT  train_id, station, time as "station_time",lead(time) OVER (PARTITION BY train_id ORDER BY time) - time AS time_to_next_station FROM trains;
select 10:00:00 - 09:05:00 ;
select '10:00:00' -'09:05:00' ;
SELECT  train_id, station, time as "station_time",
time_dff(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time", time_dff(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time",
time_diff(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time", time_diff(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time",
subtime(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time", subtime(lead(time) OVER (PARTITION BY train_id ORDER BY time) - time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time",
subtime(lead(time) OVER (PARTITION BY train_id ORDER BY time) , time) AS time_to_next_station FROM trains;
SELECT  train_id, station, time as "station_time", subtime(lead(time) OVER (PARTITION BY train_id ORDER BY time) , time) AS time_to_next_station FROM trains;
select train_id, station, time, lead(time) over (partition by train_id order by time) from trains;
use analytics;
show create table students_d;
select * from students_d;
use learndb;
CREATE TABLE `students_d` (
  `date_id` date DEFAULT NULL,
  `student_id` int DEFAULT NULL,
  `attendance` varchar(10) DEFAULT NULL
);
CREATE TABLE `students_d` (   `date_id` date DEFAULT NULL,   `student_id` int DEFAULT NULL,   `attendance` varchar(10) DEFAULT NULL );
insert into students_d values('2022-02-14' ,     1,'p'),
('2022-02-14' ,     2,'p'),
('2022-02-14' ,     3,'a'),
('2022-02-14' ,     4,'p'),
('2022-02-15' ,     1,'p'),
('2022-02-15' ,     2,'p'),
('2022-02-15' ,     3,'a'),
('2022-02-15' ,     4,'p'),
('2022-02-16' ,     1,'p'),
('2022-02-16' ,     2,'p'),
('2022-02-16' ,     3,'a'),
('2022-02-16' ,     4,'p'),
('2022-02-17' ,     1,'p'),
('2022-02-17' ,     2,'a'),
('2022-02-17' ,    3,'p'),
('2022-02-17' ,     4,'p');
insert into students_d values('2022-02-14' ,     1,'p'), ('2022-02-14' ,     2,'p'), ('2022-02-14' ,     3,'a'), ('2022-02-14' ,     4,'p'), ('2022-02-15' ,     1,'p'), ('2022-02-15' ,     2,'p'), ('2022-02-15' ,     3,'a'), ('2022-02-15' ,     4,'p'), ('2022-02-16' ,     1,'p'), ('2022-02-16' ,     2,'p'), ('2022-02-16' ,     3,'a'), ('2022-02-16' ,     4,'p'), ('2022-02-17' ,     1,'p'), ('2022-02-17' ,     2,'a'), ('2022-02-17' ,    3,'p'), ('2022-02-17' ,     4,'p');
select * from students_d;
select * from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus from myemp;
select first_name, salary, bonus from (select first_name, last_name, salary, salary*0.2 as bonus from myemp) as e;
select first_name, salary, bonus from (select first_name, last_name, salary, salary*0.2 as bonus from myemp where dep_id = 60) as e;
select first_name, last_name, salary, salary*0.2 as bonus from myemp where dep_id = 60;
with s as (select first_name, last_name, salary, salary*0.2 as bonus from myemp where dep_id = 60) select first_name, last_name, bonus from s;
select dep_id, avg(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) from myemp limit 15;
select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) avg_sal_dep from myemp limit 15;
select first_name, last_name, dep_id, salary, round(avg(salary) over(partition by dep_id)) avg_sal_dep from myemp limit 15;
select first_name, last_name, dep_id, salary, round(avg(salary) over(partition by dep_id),2) avg_sal_dep from myemp limit 15;
select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) avg_sal_dep, min(salary) over(partition by dep_id), max(salary) over (partition by dep_id)  from myemp limit 15;
select first_name, last_name, dep_id, salary, 
avg(salary) over(partition by dep_id) avg_sal_dep, 
min(salary) over(partition by dep_id) min_sal_dep, 
max(salary) over (partition by dep_id) max_sal_dep 
from myemp limit 15;
select first_name, last_name, dep_id, salary,  avg(salary) over(partition by dep_id) avg_sal_dep,  min(salary) over(partition by dep_id) min_sal_dep,  max(salary) over (partition by dep_id) max_sal_dep  from myemp limit 15;
select first_name, last_name, dep_id, salary, 
avg(salary) over(w) avg_sal_dep, 
min(salary) over(w) min_sal_dep, 
max(salary) over (w) max_sal_dep 
window w as (partition by dep_id)
from myemp limit 15;
select first_name, last_name, dep_id, salary,  avg(salary) over(w) avg_sal_dep,  min(salary) over(w) min_sal_dep,  max(salary) over (w) max_sal_dep  window w as (partition by dep_id) from myemp limit 15;
select first_name, last_name, dep_id, salary, 
avg(salary) over(w) avg_sal_dep, 
min(salary) over(w) min_sal_dep, 
max(salary) over (w) max_sal_dep 
from myemp 
window w as (partition by dep_id)
limit 15;
select first_name, last_name, dep_id, salary,  avg(salary) over(w) avg_sal_dep,  min(salary) over(w) min_sal_dep,  max(salary) over (w) max_sal_dep  from myemp  window w as (partition by dep_id) limit 15;
select * from t;
select val, rank() over(order by val) from t;
select val, rank() over(order by val) as rnk from t;
select val, dense_rank() over(order by val) as rnk from t;
create table marks(mark integer);
insert into marks values(45),(53),(25),(98),(38),(47),(54),(53);
select * from marks;
select marks, dense_rank() over ( order by mark desc) from marks;
select mark, dense_rank() over ( order by mark desc) from marks;
select mark, dense_rank() over ( order by mark desc) as rnk from marks;
select * from sales;
select * from sale;
CREATE TABLE sales(
    sales_employee VARCHAR(50) NOT NULL,
    fiscal_year INT NOT NULL,
    sale DECIMAL(14,2) NOT NULL,
    PRIMARY KEY(sales_employee,fiscal_year)
);
CREATE TABLE sales(     sales_employee VARCHAR(50) NOT NULL,     fiscal_year INT NOT NULL,     sale DECIMAL(14,2) NOT NULL,     PRIMARY KEY(sales_employee,fiscal_year) );
INSERT INTO sales(sales_employee,fiscal_year,sale)
VALUES('Bob',2016,100),
      ('Bob',2017,150),
      ('Bob',2018,200),
      ('Alice',2016,150),
      ('Alice',2017,100),
      ('Alice',2018,200),
       ('John',2016,200),
      ('John',2017,150),
      ('John',2018,250);
INSERT INTO sales(sales_employee,fiscal_year,sale) VALUES('Bob',2016,100),       ('Bob',2017,150),       ('Bob',2018,200),       ('Alice',2016,150),       ('Alice',2017,100),       ('Alice',2018,200),        ('John',2016,200),       ('John',2017,150),       ('John',2018,250);
select * from sales;
select sales_employee, sales, dense_rank() over( partition by fiscal_year order by sale desc) from sales;
select sales_employee, sale, dense_rank() over( partition by fiscal_year order by sale desc) from sales;
select sales_employee, sale, dense_rank() over( partition by fiscal_year order by sale desc) as rnk from sales;
select * from myemp order by salary desc limit 10;
select first_name, last_name , first_value(last_name) over (order by salary desc) from myemp limit 10;
select first_name, last_name , salary, first_value(last_name) over (order by salary desc) as fname from myemp limit 10;
select first_name, last_name , salary, nth_value(last_name, 5) over (order by salary desc) as fname from myemp limit 10;
select first_name, last_name , salary, nth_value(last_name, 3) over (order by salary desc) as fname from myemp limit 10;
select first_name, last_name , first_value(last_name) over(w) as first_emp, nth_value(last_name, 2) over(w) as second_emp from myemp window w as (order by hire_date) limit 10; 
select * from myemp order by hire_date limit `0;
select * from myemp order by hire_date limit 10;
select * from trains;
select train_id, station, time, lead(time,1) over(partition by train_id order by time) as next_station_time from trains;
with s as (select train_id, station, time, lead(time,1) over(partition by train_id order by time) as next_station_time from trains) select train_id, station, time, next_station_time, subtime(next_station_time, time) as transit_time from s;
select * from students_d;
update students_d set attendance='a' where date_id = '2022-02-14';
select * from students_d;
update students_d set attendance='p' where date_id = '2022-02-14' and student_id > 1;
select * from students_d;
exit
use analytics;
select * from cats;
select name, sum(weight) over (order by name) as running_total_weight from cats order by name
;
select name, sum(weight) over (order by name) as running_total_weight from cats ;
select name, breed, sum(weight) over (partition by breed order by name) as running_total_weight from cats
;
select name, breed, sum(weight) over (partition by breed order by breed) as running_total_weight from cats;
select name, breed, sum(weight) over (partition by breed ) as running_total_weight from cats;
select name, breed, sum(weight) over (partition by breed order by name) as running_total_weight from cats;
select name, breed, sum(weight) over () as running_total_weight from cats;
select name, breed, sum(weight) over (order by name) as running_total_weight from cats;
select row_number() over (order by color,name) as unique_number, name, color from cats
;
select row_number() over (group by color order by name) as unique_number, name, color from cats;
select row_number() over (partition by color order by name) as unique_number, name, color from cats;
select rank() over (order by weight desc) as ranking, weight, name from cats order by ranking, name
;
select rank() over (order by weight desc) as ranking, weight, name from cats;
select name, weight, percent_rank() over (order by weight) * 100 as percent from cats order by weight
;
select name, weight, percent_rank() over (order by weight) * 100 as percent from cats order by weight;
select name, weight, percent_rank() over (order by weight) * 100 as percent from cats;
select name, weight, cume_dist() over (order by weight) * 100 as percent from cats;
select name, weight, round(cume_dist() over (order by weight) * 100) as percent from cats;
select name, weight, coalesce(weight - lag(weight, 1) over (order by weight), 0) as weight_to_lose FROM cats order by weight
;
select name, weight, coalesce(weight - lag(weight, 1) over (order by weight), 0) as weight_to_lose FROM cats order by weight;
select name, weight, ifnull(weight - lag(weight, 1) over (order by weight), 0) as weight_to_lose FROM cats order by weight;
select row_num() over (order by weight) as rownum, name, weight, weight - lag(weight, 1) over (order by rownum) as weight_to_lose FROM cats order by weight;
select row_number() over (order by weight) as rownum, name, weight, weight - lag(weight, 1) over (order by rownum) as weight_to_lose FROM cats order by weight;
select row_number() over (order by weight) as rownum, name, weight FROM cats order by weight;
select row_number() over (order by weight) as rownum, name, weight FROM cats;
select name, weight, weight - lag(weight,1) over (order by rownum) as weight_to_lose  from (select row_number() over (order by weight) as rownum, name, weight FROM cats) as e;
select name, weight, weight - lag(weight,1) over (order by rownum) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (order by rownum) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (group  by rownum) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (partition  by rownum) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (partition  by rownum order by weight) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (order by weight partition  by rownum ) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(weight,1) over (order by rownum ) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select rownum, name, weight, weight - lag(rownum,1) over (order by rownum ) as weight_to_lose  from (select rank() over (order by weight) as rownum, name, weight FROM cats) as e;
select first_name, last_name, avg(salary) over (partition by dep_id) from myemp;
use learndb;
select first_name, last_name, avg(salary) over (partition by dep_id) from myemp;
select first_name, last_name, salary, avg(salary) over (partition by dep_id) from myemp;
with a as (select first_name, last_name, salary, avg(salary)  over (partition by dep_id) avsal from myemp) select first_name, last_name, (salary-avsal)as diff from a;
use analytics;
select * from t;
show databases;
use workshop;
select * from t;
select * from myemp;
select * from marks;
show tables;
desc netflix_fraud;
desc authors;
show indexes from authors;
use learndb;
select * from movies ;
select * from members;
select * from movies inner join members on id = movieid;
select first_name, ifnull(movieid,0) from members;
select * from members;
select year(hire_date) from myemp limit 10.
;
select year(hire_date) from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp;
select first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp order by dep_id;
select depPid, first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp order by dep_id;
select dep_id, first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp order by dep_id;
select first_name, last_name, salary from (select first_name, last_name, salary from myemp where dep_id = 60) as a; 
select first_name, last_name, salary, salary - dep_minsal as difference from
(select dep_id, first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp order by dep_id) as a;
select first_name, last_name, salary, salary - dep_minsal as difference from (select dep_id, first_name,  last_name, salary, min(salary) over (partition by dep_id) as dep_minsal from myemp order by dep_id) as a;
exit
use learndb;
show tables;
show databases;
desc students;
create table patients(pid integer, name varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1,'Harry', '1997-07-14', '2022-06-03 08:30:00');
insert into patients values(2,'Potter','1998-01-25','2022-06-03 20:30:00');
select * from patients;
select month(currdate);
select month(curr_date);
select month(current_date);
SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);
SELECT DATE_ADD('2018-05-01',INTERVAL 1 MONTH);
SELECT DATE_ADD('2018-05-01',INTERVAL 1 week);
SELECT DATE_sub('2018-05-01',INTERVAL 1 week);
select * from patients;
SELECT DATE_sub(dob,INTERVAL 3 month) from patients;
use sakila;
select * from cats;
select age, sum(weight) as total_weight from cats group by age having sum(weight) > 12 order by age
;
select
name, weight,
avg(weight) over (order by name)
from runners order by name
;
select name, weight, avg(weight) over (order by name) from runners order by name;
select name, sum(weight) over (order by name) as running_total_weight from cats order by name
;
select name, avg(weight) over (order by name) as running_total_weight from cats order by name
;
show tables;
select * from film;
select * from film limit 3;
create table films as select * from film;
alter table films drop column description;
select * from films limit 5;
select * from films where original_language_id is not null;
alter table films drop column original_language_id;
select * from films limit 5;
alter table films drop column special_features;
select * from films limit 5;
select distinct release_year from films;
alter table films drop column release_year;
select * from films limit 5;
select distinct language_id from films;
alter table films drop column language_id;
select distinct language_id from films;
select * from films limit 5;
select title, replacement_cost, avg(replacement_cost) over (partition by rating) from films;
select title, rating, replacement_cost, avg(replacement_cost) over (partition by rating) from films;
select * from films limit 5;
select * from cats;
select name, weight, cume_dist() over (order by weight) , percent_rank() over( order by weight) from cats;
select title, rating, cume_dist() over (order by rank) , percent_rank() over( order by rating) from films;
select title, rating, cume_dist() over (order by rating) , percent_rank() over( order by rating) from films;
create table t as select * from analytics.t;
create table t as select * from practicedb.t;
select * from t;
create table myemp as select * from practicedb.myemp;
select * from myemp;
clear
select first_name, last_name, salary , dense_rank() over(order by salary) from myemp;
select first_name, last_name, salary , dense_rank() over(order by salary) as rnk from myemp where rnk=3;
select first_name, last_name, salary , dense_rank() over(order by salary) as rnk from myemp where dense_rank() over(order by salary) = 3
;
select salary from (select first_name, last_name, salary , dense_rank() over(order by salary) as rnk from myemp) as a ;
select salary from (select first_name, last_name, salary , dense_rank() over(order by salary) as rnk from myemp) as a where rnk = 3;
select first_name, last_name, salary , first_value(first_name) over w from myemp with w as (order by salary desc);
select first_name, last_name, salary , first_value(first_name) over w from myemp window w as (order by salary desc);
select distinct nth_value(salary,3) over(order by salary desc) from myemp;
select distinct nth_value(salary,3) over(partition by salary order by salary desc) from myemp;
select distinct first_value(salary) over(partition by salary order by salary desc) from myemp;
select distinct nth_value(salary,3) over(order by salary desc) from myemp;
select nth_value(salary,3) over(order by salary desc) from myemp;
with a as (select * from myemp) select * from a;
use practicedb;
select request_date, abs(round(distance_to_travel/monetary_cost - avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) , 2) ) avg_cost from uber_logs;
select * from uber_logs limit 10;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )  
select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score desc;
with a as (select policy_num,state, claim_cost, fraud_score,  cume_dist() over (partition by state order by fraud_score ) cum_score from netflix_fraud )   select policy_num, state, claim_cost, fraud_score from a where cum_score > 0.95 order by state, cum_score desc;
select * from netflix_fraud limit 5;
select *, percent_rank() over (partition by state order by fraud_score) from netflix_fraud;
select * from trains;
use practicedb;
select * from trains;
use analytics;
select * from trains;
use workshop;
select * from trains;
use workshop;
create table trains as select * from test.traains;
create table trains as select * from test.trains;
select * from trains;
select dep_id, avg(salary) from myemp group by dep_id ;
select * from myemp limit 5;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal, salary - avg(salary) over (partition by dep_id) as diff from myemp;
select first_name, last_name, dep_id, salary, 
avg(salary) over w as avg_sal, salary - avg(salary) over w as diff from myemp window w as ( partition by dep_id) ;
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal, salary - avg(salary) over w as diff from myemp window w as ( partition by dep_id);
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal,  min(salary) over w as min_sal, max(salary) over w from myemp window w as ( partition by dep_id);
select * from t;
select rank() over(order by val) from t;
select val, rank() over(order by val) as rnk from t;
select val, dense_rank() over(order by val) as rnk from t;
select * from marks;
create table marks(name varchar(10), marks integer);
insert into marks values('Tom',56),('George', 25), ('Kat', 25),('Jane', 70),('Jon', 90), ('Joe', 85),('John',90);
select * from marks;
select name, marks, dense_rank() over(order by marks) from marks;
select name, marks, dense_rank() over(order by marks desc) rnk from marks;
select * from marks;
select * from marks order by marks desc;
select * from marks order by marks desc limit 3,1;
select * from marks order by marks desc limit 2,1;
select first_name, last_name from (select * from myemp) as a;
select first_name, last_name from (select * from myemp where dep_id in (10,20,30)  as a;
select first_name, last_name from (select * from myemp where dep_id in (10,20,30) ) as a;
select first_name, last_name from (select * from myemp where dep_id in (10,20,30) ) ;
with a as (select * from myemp where dep_id in (10,20,20)) select first_name, last_name from a;
with a as (select * from myemp where dep_id in (10,20,30)) select first_name, last_name from a;
select name, marks, dense_rank() over(order by marks) from marks;
select name, marks, dense_rank() over(order by marks) as rnk from marks;
select name, marks, dense_rank() over(order by marks desc) as rnk from marks;
with a as (select name, marks, dense_rank() over(order by marks desc) as rnk from marks) select marks from a where rnk = 2;
with a as (select name, marks, dense_rank() over(order by marks desc) as rnk from marks) select marks from a where rnk = 3;
select * from myemp limit 20;
select * from myemp order  by salary desc limit 20;
select * from myemp order by salary desc limit 7,1;
select *, dense_rank() over ( order by salary desc) from myemp;
select *, dense_rank() over ( order by salary desc) as rnk from myemp;
select salary from (select *, dense_rank() over ( order by salary desc) as rnk from myemp) as a where rnk = 7;
select * from marks;
select name, marks, first_value(name) over(order by marks desc) from marks;
select name, marks, first_value(marks) over(order by marks desc) as n from marks;
select name, marks, last_value(marks) over(order by marks desc) as n from marks;
select name, marks, last_value(name) over(order by marks desc) as n from marks;
select name, marks, nth_value(name) over(order by marks desc) as n from marks;
select name, marks, nth_value(name,2) over(order by marks desc) as n from marks;
select name, marks, nth_value(name,3) over(order by marks desc) as n from marks;
show tables;
select * from marks;
select *, cume_dist() over(order by marks) from marks;
select *, round(cume_dist() over(order by marks desc),2) as cumedist from marks;
select *, round(percent_rank () over(order by marks desc),2) as pctrnk from marks;
select *, round(percent_rank() over(order by marks),2) as pctrnk from marks;
select * from netflix_fraud limit 10;
select * from trains;
select * , lead(time, 1) over (partition by train_id, order by time) from trains;
select * , lead(time, 1) over (partition by train_id order by time) from trains;
select * , sub_time(time, lead(time, 1) over (partition by train_id order by time)) from trains;
select * , subtime(time, lead(time, 1) over (partition by train_id order by time)) from trains;
select * from netflix_fraud limit 10;
select * , percent_rank() over ( partition by city order by claim_cost) from netflix_fraud;
select * , percent_rank() over ( partition by state order by claim_cost) from netflix_fraud;
select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud;
with a as (mysql> select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud))
select * from a where prcntrnk > 0.95
;
with a as (mysql> select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud)) select * from a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud))
select policy_num , state , claim_cost ,fraud_score , prcntrnkfrom a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud)) select policy_num , state , claim_cost ,fraud_score , prcntrnkfrom a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud))
select policy_num , state , claim_cost ,fraud_score , prcntrnk from a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud)) select policy_num , state , claim_cost ,fraud_score , prcntrnk from a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud)
select policy_num , state , claim_cost ,fraud_score , prcntrnk from a where prcntrnk > 0.95;
with a as (select * , percent_rank() over ( partition by state order by claim_cost) as prcntrnk from netflix_fraud) select policy_num , state , claim_cost ,fraud_score , prcntrnk from a where prcntrnk > 0.95;
select * from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_stop from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_stop , subtime(lead(time,1) over(partition by train_id order by time) , time) as travel_time from trains;
exit
use learndb;
show tables;
create table marks(sid integer, name varchar(30), marks integer); 
show tables;
desc marks;
create table marks(id integer);
create table if not exists marks(id integer);
show databases;
use workshop;
show tables;
select * from cats;
use learndb;
show tables;
create table cats as select * from workshop.cats;
show tables;
select * from cats;
desc students;
select * from students;
insert into students values(1,'Tom', 23,'Mysql'),(2,'Jon', 25,'Analytics');
select 3 + 4;
select 3 = 3;
select 3 = 5;
select 3 = null;
select 3 is null;
select 3 is not null;
select * from students;
alter table students add column marks integer default 100;
select * from students;
alter table students drop column age;
select * from students;
desc students;
alter table students modify column course char(30);
desc students;
alter table students change column sname name varchar(30);
desc students;
select * from students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
select * from students;
rename table myclass to students;
show tables;
alter table students add column age integer after name;
select * from students;
alter table students add column id integer first;
select * from students;
help
\134c
`\134c`
;
show tables;
drop table cats;
show tables;
show databases;
drop database anadb;
show databases;
select * from students;
alter table students drop column id, age;
alter table students drop column id;
alter table students drop column age;
select * from students;
insert into students values(3,'Kate', 'Analytics', 67);
insert into students (sid, name, course) values (4,'Kim','Dance');
select * from students;
desc students;
insert into students (sid, name, marks) values(5,'Lara',55);
select * from students;
insert into students values(6,'Harry', 'Magic',78),(7,'Larry','Cooking', 88),(8,'Tim','Mysql', 66);
select * from students;
update students set course = 'Dance' where sid = 3;
select * from students;
update students set marks = 75 where name = 'jon';
select * from students;
set sql_safe_updates 0;
set sql_safe_updates = 0;
update students set marks = null where marks = 100;
select * from students;
update students set course='French' where course is null;
select * from students;
update students set name = 'Thomas', course = 'Analytics', marks = 89 where sid = 1;
select * from students;
update students set marks = 100;
select * from students;
delete from students where sid = 5;
select * from students;
delete from students where sid > 5;
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry', 'Magic',78),(7,'Larry','Cooking', 88),(8,'Tim','Mysql', 66);
delete from students;
insert into students values(6,'Harry', 'Magic',78),(7,'Larry','Cooking', 88),(8,'Tim','Mysql', 66);
select * from students;
truncate students;
select * from students;
select * from myemp;
select * from myemp limit 5;
select first_name, last_name, salary from myemp limit 10;
select first_name, last_name, salary, salary*0.20 from myemp limit 10;
select concat(first_name, ' ', last_name) from myemp limit 10;
select concat(first_name, ' ', last_name) as full_name, salary, salary*0.20 as bonus from myemp limit 10;
select first_name, last_name, salary from myemp ;
select * from myemp;
select * from patients;
select * from myemp order by salary;
select * from myemp order by salary desc;
select * from myemp order by hire_date;
select * from myemp where dep_id = 60 order by salary desc;
select * from myemp where dep_id = 60 order by dep_id, salary desc;
select * from myemp order by dep_id, salary desc;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select * from person;
select distinct fname, lname from person;
select * from myemp where salary between 10000 and 15000;
select *  from myemp where first_name like '__i%';
select *  from myemp where first_name like '%i%';
select *  from myemp where first_name like 'j____';
select * from myemp where salary not between 10000 and 15000;
select * from myemp where dep_id = 20 and dep_id = 60 and dep_id = 100;
select * from myemp where dep_id = 60 and salary > 10000;
select * from myemp where dep_id = 60 and salary > 5000;
select * from myemp where dep_id = 60 or salary > 15000;
select * from myemp where dep_id = 20 or dep_id = 60 or dep_id = 100;
select * from myemp where dep_id IN (20,60,100);
select * from myemp where dep_id = 100 and salary >= 7000;
exit
use learndb;
select * from myemp where dep_id = 60;
select * from patients;
select dob, adddate(dob, interval 20 day) from patienrs;
select dob, adddate(dob, interval 20 day) from patients;
select dob, adddate(dob, interval 3 week ) from patients;
select dob, date_sub(dob, interval 3 week ) from patients;
select dob, date_sub(dob, interval 6 week ) from patients;
select curdate();
select curtime();
select now();
select month(curdate());
select year(dob), month(dob), monthname)dob) from patients;
select year(dob), month(dob), monthname(dob) from patients;
dob, select year(dob), month(dob), monthname(dob) from patients;
select dob, year(dob), month(dob), monthname(dob) from patients;
select dob, year(dob) from patients;
select first_name, hire_date, year(hire_date) from myemp;
select curdate - hire_date from myemp  limit 10;
select curdate() - hire_date from myemp  limit 10;
select count(*) frrom myemp;
select count(*) from myemp;
select count(*) from patients;
select cum(salary) from myemp;
select sum(salary) from myemp;
select min(salary), max(salary) from myemp;
select dep_id, min(salary) from myemp group by dep_id;
select dep_id,mgr_id, min(salary) from myemp group by dep_id, mgr_id;
select sum(salary) from myemp;
select dep_id, min(salary) from myemp group by dep_id;
select dep_id, min(salary) from myemp group by dep_id order by dep_id;
select dep_id, min(salary) from myemp group by dep_id;
select dep_id, min(salary) from myemp group by dep_id having dep_id IN(30,50,20);
select dep_id, min(salary) from myemp group by dep_id having dep_id IN(30,50,20) order by min(salary);
select dep_id, min(salary) as min_sal 
from myemp
group by dep_id
having dep_id in(30,40,50)
order by min_sal;
select dep_id, min(salary) as min_sal  from myemp group by dep_id having dep_id in(30,40,50) order by min_sal;
select salary as mysal from myemp where mysal > 10000;
select salary as mysal from myemp where salary > 10000 order by mysal;
select dep_id, min(salary) from myemp group by dep_id;
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate, rate from meals cross join drinks;
select mealname, drinkname, meals.rate, drinks.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate 
from meals as m cross join drinks as d;
select m.mealname, d.drinkname, m.rate, d.rate  from meals as m cross join drinks as d;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mv.id = mm.movieid;
select * from myemp limit 10;
select * from myemo limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, concat(emp.first_name,' ', emp.last_name) as employee ,concat( mgr.first_name, ' ', mgr.last_name) as manager  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
select * from movies;
select * from students;
desc students;
insert into students values(1,'Tom','Mysql', 78),(2,'Pete','ANalytics', 67);
select * from students;
insert into students values(3,'Mary', 20,'Dance', 99);
insert into students values(3,'Mary','Dance', 99);
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(4,'Jon', 'Mysql', 55);
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(4,'Jon', 'Mysql', 55);
select * from students;
rollback;
select * from students;
show tables;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
strat transaction;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
exit
use learndb;
drop table students;
create table students(sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30));
desc students;
insert into students values(1,'Lara', 23, 'Mysql');
select * from students;
insert into students values(1,'Sara', 23, 'Mysql');
insert into students values(2,'Sara', 23, 'Mysql');
select * from students;
insert into students values(3,'Harry', 17,'Analytics');
insert into students values(3,'Harry', 27,'Analytics');
select * from students;
insert into students values(4, null, 25,'Analytics');
insert into students (sid, age, course) values(4,19,'Mysql');
desc students;
insert into students values(4, , 25,'Analytics');
alter table students modify column name varchar(30) NOT NULL DEFAULT 'Kumar';
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(4,19,'Mysql');
select * from students;
insert into students values(5, null, 25,'Analytics');
select * from authors;
desc authors;
select * from books;
desc books;
drop aauthors;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(255));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY (authorid) REFERENCES authors(authorid)
);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY (authorid) REFERENCES authors(authorid) );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
drop table books;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY (authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY (authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
show create table books;
show databases;
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
create table mytab(is integer PRIMARY KEY AUTO_INCREMENT,  name varchar(10), age integer);
create table mytab(id integer PRIMARY KEY AUTO_INCREMENT,  name varchar(10), age integer);
desc mytab;
insert into mytab (name, age) values('Tom', 23);
select * from mytab;
insert into mytab (name, age) values('Jon', 45),('Pat', 35);
select * from mytab;
delete from mytab;
insert into mytab (name, age) values('Jon', 45),('Pat', 35);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Jon', 45),('Pat', 35);
select * from mytab;
truncate mytab;
alter table mytab auto_increment= 100;
select * from mytab;
insert into mytab (name, age) values('Jon', 45),('Pat', 35);
select * from mytab;
select * from myemp limit 10;
create view myview as select emp_id, first_name, last_name, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from myview;
show tables;
select * from myemp;
create view dep_100 as select * from myemp where dep_id = 100;
select * from dep_100;
select * from authors;
create view aview as select * from authors where authorid < 10;
select * from aview;
insert into aview values(20,'Jeff Hinton');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 10 WITH CHECK OPTION;
insert into aview values(11,'Brian Weiss');
insert into aview values(1,'Brian Weiss');
select * from dep_100;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees;
select * from employees limit 10;
select * from employees where hire_date > '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date > '2000-01-01';
exit
use learndb;
desc students;
show indexes from students;
desc authors;
show indexes from authors;
call myproc();
select * from books;
call myproc();
call myproc(10);
call myproc(5);
call myproc(7);
select * from books;
call proc_if(7);
call proc_if(-7);
call proc_if(7);
call proc_if(-7);
call proc_if2(3);
call proc_if2(4);
call proc_if2(0);
call proc_if2(-1);
call proc_case(1);
call proc_case(0);
call proc_lclvar();
call proc_loop();
call proc_loop(4);
call proc_loop(2);
call proc_repeat(4);
call proc_while(2);
call proc_while(3);
select * from hdghfgf;
call proc_except();
desc payments;
insert into payments values(1, null);
desc fraud;
call make_payment(1,300);
select * from payments ;
call make_payment(2, null);
select * from payments ;
call make_payment(2,750);
select * from payments ;
select * from fraud;
call make_payment(3, null);
select * from payments ;
select * from fraud;
call make_payment(4,1000);
call make_payment(5,500);
call make_payment(6, null);
call make_payment(7,900);
select * from payments ;
select * from fraud;
exit
use learndb
show tables
;
select * from trains;
select time, lag(time,1) over(partition by train_id order by time) from trains;
select time, lead(time,1) over(partition by train_id order by time) from trains;
select time, lead(time,1) over w from trains window w as (partition by train_id order by time);
select * from sales;
select * from myemp e where salary > (select max(salary) from myemp where e.dep_id = dep_id); 
select * from myemp e where salary > (select avg(salary) from myemp where e.dep_id = dep_id);
select avg(salary) dep_id from myemp group by dep_id;
select avg(salary), dep_id from myemp group by dep_id;
select avg(salary), dep_id from myemp group by dep_id order by dep_id;
select * from myemp e where salary > (select avg(salary) from myemp where e.dep_id = dep_id) order by dep_id;
select avg(salary), dep_id from myemp group by dep_id order by dep_id;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call proc_orders();
select * from orders;
select hire_date, year(hire_date) from myem limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update  books set sales = sales + 2 where bookid = 8;
select * from books;
select * from books_sales;
select * from book_sales;
desc book_sales;
select * from book_sales;
select * from books;
update books set sales = sales + 3 where bookid = 8;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 8;
select * from books;
select * from book_sales;
CREATE TABLE dupt (
    id INT,
    name VARCHAR(10) NOT NULL
);
CREATE TABLE dupt (     id INT,     name VARCHAR(10) NOT NULL );
INSERT INTO dupt(id,name) 
VALUES(1,'A'),
      (2,'B'),
      (3,'C'),
      (4,'D');
INSERT INTO dupt(id,name)  VALUES(1,'A'),       (2,'B'),       (2,'B'),       (3,'C'),       (3,'C'),       (3,'C'),       (4,'D');
select * from dupt;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select avg(salary) , dep_id from myemp group by dep_id;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal from myemp;
select first_name, last_name, dep_id, salary, 
avg(salary) over ( partition by dep_id) as avg_sal ,
max(salary) over ( partition by dep_id) as max_sal ,
min(salary) over ( partition by dep_id) as min_sal 
from myemp;
select first_name, last_name, dep_id, salary,  avg(salary) over ( partition by dep_id) as avg_sal , max(salary) over ( partition by dep_id) as max_sal , min(salary) over ( partition by dep_id) as min_sal  from myemp;
select first_name, last_name, dep_id, salary, 
avg(salary) over w as avg_sal ,
max(salary) over w as max_sal ,
min(salary) over w as min_sal 
from myemp
with w as ( partition by dep_id);
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal , max(salary) over w as max_sal , min(salary) over w as min_sal  from myemp with w as ( partition by dep_id);
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal , max(salary) over w as max_sal , min(salary) over w as min_sal  from myemp with window w as ( partition by dep_id);
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal , max(salary) over w as max_sal , min(salary) over w as min_sal  from myemp  window w as ( partition by dep_id);
select first_name, last_name, salary from ( select * from myemp where dep_id in (20,30,40));
select first_name, last_name, salary from ( select * from myemp where dep_id in (20,30,40) ) as a;
select * from myemp where dep_id in (20,30,40);
select first_name as fname, last_name as lname, salary, dep_id from myemep where dep_id in (20,30,40);
select first_name as fname, last_name as lname, salary, dep_id from myemp where dep_id in (20,30,40);
select fname, lname, salary from (select first_name as fname, last_name as lname, salary, dep_id from myemp where dep_id in (20,30,40)) as e;
select first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal from myemp;
select * from t;
select * from marks;
desc marks;
select * from t;
select val, rank() over (order by val) from t;
select val, rank() over (order by val) as rnk from t;
select val, rank() over (order by val desc) as rnk from t;
select val, dense_rank() over (order by val desc) as rnk from t;
select * from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale desc);
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale desc) from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select emp_id, first_name, last_name, dense_rank() over (partition by dep_id order by hire_date) as rnk from myemp;
select emp_id, first_name, last_name, dep_id, hire_date, dense_rank() over (partition by dep_id order by hire_date) as rnk from myemp;
select emp_id, first_name, last_name, salary, dep_id , dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp;
with e as (select emp_id, first_name, last_name, salary, dep_id , dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp) select * from e where rnk = 2;
select emp_id, first_name, last_name, salary, dep_id , nth_value(first_name,2) over (partition by dep_id order by salary desc) as rnk from myemp;
select emp_id, first_name, last_name, salary, dep_id , 
nth_value(first_name,1) over (partition by dep_id order by salary desc) as rnk1 
first_value(first_name) over (partition by dep_id order by salary desc) as rnk2 
from myemp;
select emp_id, first_name, last_name, salary, dep_id ,  nth_value(first_name,1) over (partition by dep_id order by salary desc) as rnk1  first_value(first_name) over (partition by dep_id order by salary desc) as rnk2  from myemp;
select emp_id, first_name, last_name, salary, dep_id , 
nth_value(first_name,1) over (partition by dep_id order by salary desc) as rnk1 ,
first_value(first_name) over (partition by dep_id order by salary desc) as rnk2 
from myemp;
select emp_id, first_name, last_name, salary, dep_id ,  nth_value(first_name,1) over (partition by dep_id order by salary desc) as rnk1 , first_value(first_name) over (partition by dep_id order by salary desc) as rnk2  from myemp;
select emp_id, first_name, last_name, salary, dep_id , 
nth_value(first_name,2) over (partition by dep_id order by salary desc) as second_highest ,
first_value(first_name) over (partition by dep_id order by salary desc) as highest ,
last_value(first_name) over (partition by dep_id order by salary desc) as least ,
from myemp;
select emp_id, first_name, last_name, salary, dep_id ,  nth_value(first_name,2) over (partition by dep_id order by salary desc) as second_highest , first_value(first_name) over (partition by dep_id order by salary desc) as highest , last_value(first_name) over (partition by dep_id order by salary desc) as least , from myemp;
select emp_id, first_name, last_name, salary, dep_id , 
nth_value(first_name,2) over (partition by dep_id order by salary desc) as second_highest ,
first_value(first_name) over (partition by dep_id order by salary desc) as highest ,
last_value(first_name) over (partition by dep_id order by salary desc) as least 
from myemp;
select emp_id, first_name, last_name, salary, dep_id ,  nth_value(first_name,2) over (partition by dep_id order by salary desc) as second_highest , first_value(first_name) over (partition by dep_id order by salary desc) as highest , last_value(first_name) over (partition by dep_id order by salary desc) as least  from myemp;
select * from trains;
select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains;
with e as (select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains)
select train_id, station, time, next_station_time, sub_time(next_station_time,time) from e;
with e as (select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains) select train_id, station, time, next_station_time, sub_time(next_station_time,time) from e;
with e as (select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains) select train_id, station, time, next_station_time, time_sub(next_station_time,time) from e;
with e as (select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains) select train_id, station, time, next_station_time, subtime(next_station_time,time) from e;
with e as (select *, lead(time,1) over (partition by train_id order by time) as next_station_time from trains) select train_id, station, time, next_station_time, subtime(next_station_time,time) as time_taken from e;
show tables;
select * from students_d;
exit
use learndb;
select database();
show tables;
select * from employees;
SELECT emp_id, 
       first_name, last_name, 
       dep_id, 
       salary, 
       SUM(salary) OVER(PARTITION BY dep_id ORDER BY emp_id) as CUML_SAL 
FROM EMPLOYEES ORDER BY dep_id,emp_id;
SELECT emp_id,         first_name, last_name,         dep_id,         salary,         SUM(salary) OVER(PARTITION BY dep_id ORDER BY emp_id) as CUML_SAL  FROM EMPLOYEES ORDER BY dep_id,emp_id;
SELECT emp_id, 
       first_name, last_name, 
       dep_id, 
       salary, 
       SUM(salary) OVER(PARTITION BY dep_id ORDER BY emp_id) as CUML_SAL 
FROM myemp ORDER BY dep_id,emp_id;
SELECT emp_id,         first_name, last_name,         dep_id,         salary,         SUM(salary) OVER(PARTITION BY dep_id ORDER BY emp_id) as CUML_SAL  FROM myemp ORDER BY dep_id,emp_id;
select * from students;
insert into students values(5,'',34,'Mysql');
select * from students;
select * from students where name='';
select * from students where sname='';
create table test(id integer auto_increment, name char);
create table test(id integer primary key auto_increment, name char);
insert into students values(6,'Lara',22,'Dance'),(7,'Pat',34,'Cooking'),(8,'Harry',30,'Magic');
select * from test;
SELECT * FROM ( select *,row_number() over() as rn  FROM employees) e WHERE mod(rn,2)>0;
select * from employees;
SELECT dep_id,count(emp_id) FROM myemp WHERE count(emp_id)>2 GROUP BY dep_id;
SELECT dep_id,count(emp_id) FROM myemp having count(emp_id)>2 GROUP BY dep_id;
SELECT dep_id,count(emp_id) FROM myemp GROUP BY dep_id having count(emp_id)>2;
SELECT dep_id,count(emp_id) FROM myemp GROUP BY dep_id where count(emp_id)>2;
select concat(sname,null) from students;
select sname from students;
select distinct job_id from myemp;
select max(salary), min(salary),job_id
from myemp
where job_id in ('ST_CLERK'.'SA_MAN','SA_REP')
group by job_id;
select max(salary), min(salary),job_id from myemp where job_id in ('ST_CLERK'.'SA_MAN','SA_REP') group by job_id;
select max(salary), min(salary),job_id from myemp where job_id in ('ST_CLERK','SA_MAN','SA_REP') group by job_id;
select max(salary), min(salary),job_id
from myemp
group by job_id
having job_id in ('ST_CLERK'.'SA_MAN','SA_REP');
select max(salary), min(salary),job_id from myemp group by job_id having job_id in ('ST_CLERK'.'SA_MAN','SA_REP');
select max(salary), min(salary),job_id from myemp group by job_id having job_id in ('ST_CLERK','SA_MAN','SA_REP');
select max(salary), min(salary),job_id from myemp where job_id in ('ST_CLERK','SA_MAN','SA_REP');
exit
use learndb;
create or replace view tview as select * from books;
select * from tview;
create or replace view tview as select title, sales from books;
select * from tview;
desc students;
insert into students values(10,'Blah',null, 'Mysql');
insert into students values(11,'Blah',12, 'Mysql');
exit
use learndb;
select * from students;
create table students2 as select * from students;
desc students2;
desc students;
select * from students2;
drop table students2;
create table students2 as select * from students where 1 = 2;
select * from students2;
desc students2;
update students set sname=null where sid = 1;
update students set age=null where sid = 1;
select count(age) from students;
select * from students2;
select * from students;
select count(*) from students;
select count(name) from students;
select count(sname) from students;
select database();
desc students;
select count(distinct job_id) from myemp;
select 30 + null*0.15 ;
select 30 + ifnull(null,0)*20 ;
select * from myemp limit 10;
select count( distinct job_id) from myemp;
select concat(first_name, ' ', last_name) from myemp limit 10;
select concat(first_name, null) from myemp limit 10;
select * from marks;
desc marks;
insert into marks values(1,'Jon', 67),(2,'Tom', 53),(3, 'Pete', 42),(4,'Mary', 53),(3,'Pete',42);
select * from marks;
select rank() over (order by marks desc)  rnk from marks;
select marks, rank() over (order by marks desc)  rnk from marks;
select name, marks, dense_rank() over (order by marks desc)  rnk from marks;
select name, marks, row_number() over (order by marks desc)  rnk from marks;
select name, marks, row_number() over (partition by namw order by marks desc)  rnk from marks;
select name, marks, row_number() over (partition by name order by marks desc)  rnk from marks;
exit
use learndb;
SELECT * from 
(
select lag(hire_date,1) over (order by hiredate desc) as hiring_date_of_next_employee,
first_name, last_name from myemp
) e 
where first_name='Neena';
SELECT * from  ( select lag(hire_date,1) over (order by hiredate desc) as hiring_date_of_next_employee, first_name, last_name from myemp ) e  where first_name='Neena';
SELECT * from 
(
select lag(hire_date,1) over (order by hire_date desc) as hiring_date_of_next_employee,
first_name, last_name from myemp
) e 
where first_name='Neena';
SELECT * from  ( select lag(hire_date,1) over (order by hire_date desc) as hiring_date_of_next_employee, first_name, last_name from myemp ) e  where first_name='Neena';
SELECT * from 
(
select lag(hire_date,1) over (order by hire_date desc) as hiring_date_of_next_employee,
first_name, last_name, hire_date from myemp
) e 
where first_name='Neena';
SELECT * from  ( select lag(hire_date,1) over (order by hire_date desc) as hiring_date_of_next_employee, first_name, last_name, hire_date from myemp ) e  where first_name='Neena';
select * from myemp order by hire_date desc;
exit
use learndb;
select * from employee;
show tables;
select * from employees;
select * from office;
select * from offices;
show tables;
create table emp_sal (id integer, name varchar(20), sal decimal, mgr integer);
insert into emp_sal values(1  , Joe   , 70000  , 3   )  ,    
( 2  , Henry , 80000  , 4  ),
( 3  , Sam   , 60000  , Null  )   , 
( 4  , Max   , 90000  , Null )  ;
insert into emp_sal values(1  , Joe   , 70000  , 3   )  ,     ( 2  , Henry , 80000  , 4  ), ( 3  , Sam   , 60000  , Null  )   ,  ( 4  , Max   , 90000  , Null );
insert into emp_sal values(1  , 'Joe'   , 70000  , 3   )  ,    
( 2  , 'Henry' , 80000  , 4  ),
( 3  , 'Sam'   , 60000  , Null  )   , 
( 4  , 'Max'   , 90000  , Null )  ;
insert into emp_sal values(1  , 'Joe'   , 70000  , 3   )  ,     ( 2  , 'Henry' , 80000  , 4  ), ( 3  , 'Sam'   , 60000  , Null  )   ,  ( 4  , 'Max'   , 90000  , Null );
select * from emp_sal;
select name, sal from emp_sal e where salary>(select sal from emp_sal where mgr = e.mgr); 
select name, sal from emp_sal e where sal > (select sal from emp_sal where mgr = e.mgr);
select name, sal from emp_sal e where sal > (select sal from emp_sal where id = e.mgr);
show tables;
select * from dupt;
create table dcop as select * from dupt;
select * from dcop;
with d as (select id, name, row_number() over (partion by id) rnum from dcop) delete from d where rnum > 1;
with d as (select id, name, row_number() over (partition by id) rnum from dcop) delete from d where rnum > 1;
clear
select * from dcop where row_number() over (partition by id) =1; 
delete from dcop where id in 
(select id from 
(select id, name, row_number() over (partition by id) rnum from dcop) e) d
;
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop) e) d;
delete from dcop where id in 
(select id from 
(select id, name, row_number() over (partition by id) rnum from dcop) e where rnum > 1) ;
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop) e where rnum > 1);
select * from dcop;
select * from dupt;
drop table dcop;
create table dcop as select * from dupt;
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop) e )where rnum > 1);
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop) e ) where rnum > 1);
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop) ) e  where rnum > 1);
delete from dcop where id in  (select id from  (select id, name, row_number() over (partition by id) rnum from dcop)  e  where rnum > 1);
drop table dcop;
create table dcop as select * from dupt;
select id, name, row_number() over (partition by id) rnum from dcop;
use learndb;
select id from  (select id, name, row_number() over (partition by id) rnum from dcop)  e  where rnum > 1;
select id, name, row_number() over (partition by id) rnum from dcop;
create unique index idx on dcop(id,name);
create table dd as select distinct id,name from dcop;
select * from dcop;
select * from dd;
drop table dd;
drop table dcop;
select first_name, last_name, salary, sum(salary) over(partion by dep_id,order by emp_id) from myemp limit 20;
select first_name, last_name, salary, sum(salary) over(partion by dep_id order by emp_id) from myemp limit 20;
select first_name, last_name, salary, sum(salary) over(partition by dep_id order by emp_id) from myemp limit 20;
select first_name, last_name, salary, sum(salary) over(partition by dep_id order by emp_id) from myemp limit 20 order by dep_id;
select first_name, last_name, salary, sum(salary) over(partition by dep_id order by emp_id) from myemp order by dep_id, emp_id;
select first_name, last_name, dep_id, salary, sum(salary) over(partition by dep_id order by emp_id) from myemp order by dep_id, emp_id limit 20;
use analytics;
show tables;
show databases;
use workshop;
show tables;
selecT * FROM UBERLOGS;
selecT * FROM UBER_LOGS;
selecT * FROM twitter_salary;
select dep_id, avg(salary) from myemp group by dep_id;
use learndb;
select * from myemp limit 15;
select emp_id, first_name, salary, dep_id , avg(salary) over ( partition by dep_id) from myemp order by dep_id;
select emp_id, first_name, salary, dep_id , avg(salary) over ( partition by dep_id)  as dep_avg from myemp order by dep_id;
select emp_id, first_name, dep_id, salary, sum(salary) over (partition by dep_id order by emp_id) as running_total from myemp;
select emp_id, first_name, dep_id, salary, sum(salary) over (partition by dep_id order by emp_id) as running_total from myemp limit 10;
select * from marks;
select *, rank() over(order by marks desc) as rnk from marks;
select *, dense_rank() over(order by marks desc) as rnk from marks;
select emp_id, first_name, last_name, dep_id, salary, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp;
with e as (select * from myemep) select emp_id from e;
with e as (select * from myemp) select emp_id from e;
select emp_id, first_name, last_name, dep_id, salary, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp;
with e as (select emp_id, first_name, last_name, dep_id, salary, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp) select * from e where e.rnk = 3;
select first_name, last_name, salary, dep_id, nth_value(first_name,3) over ( partition by dep_id order by salary desc) from myemp ;
select first_name, last_name, salary, dep_id, nth_value(first_name,3) over ( partition by dep_id order by salary desc) as third_highest from myemp ;
select first_name, last_name, salary, dep_id, first_value(first_name) over ( partition by dep_id order by salary desc) as third_highest from myemp ;
select emp_id, first_name, last_name, hire_date, lead(hire_date,1) over (order by hire_date) as next_emp from myemp;
select emp_id, first_name, last_name, hire_date, lead(first_name,1) over (order by hire_date) as next_emp from myemp;
select * from trains;
with tr as (select train_id, station, time, lead(time,1) over (partition by train_id order by time) as next_station from trains)
select (*, subtime(next_station, time) as running_time from tr;
with tr as (select train_id, station, time, lead(time,1) over (partition by train_id order by time) as next_station from trains) select (*, subtime(next_station, time) as running_time from tr;
with tr as (select train_id, station, time, lead(time,1) over (partition by train_id order by time) as next_station from trains) select *, subtime(next_station, time) as running_time from tr;
select * from students_d;
with e as ( select emp_id, first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal from myemp)
select * from e where salary > avg_sal;
with e as ( select emp_id, first_name, last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal from myemp) select * from e where salary > avg_sal;
select * from students_d;
select * from students_d order by student_id;
select *, lead(attendance,1) over (partition by student_id order by date_id) as sec_day, lead(attendance, 2)  over (partition by student_id order by date_id) as third_day from students_d;
select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d
window w as (partition by student_id order by date_id);
select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d window w as (partition by student_id order by date_id);
with st as ()
select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d
 window w as (partition by student_id order by date_id))
select * from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
with st as () select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d  window w as (partition by student_id order by date_id))  select * from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
select * from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
with st as (
select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d
 window w as (partition by student_id order by date_id))
select * from st where attendance = 'p' and sec_day = 'p' and third_day = 'p'
;
with st as ( select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d  window w as (partition by student_id order by date_id))  select * from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
with st as (
select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d
 window w as (partition by student_id order by date_id))
select distinct student_id from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
with st as ( select *, lead(attendance,1) over (w) as sec_day, lead(attendance, 2)  over (w) as third_day from students_d  window w as (partition by student_id order by date_id))  select distinct student_id from st where attendance = 'p' and sec_day = 'p' and third_day = 'p';
select * from dupt;
create table dcopy as select * from dupt;
select * from dcopy;
create table uniq_tbl as select distinct id, name from dupt;
select * from uniq_tbl;
use exampledb;
select * from students;
create table patients(pid integer, name varchar(20), dob date , toa datetime);
show tables;
desc patients;
desc students;
insert into patients values(1, 'Harry', '1990-05-17', '2022-08-17 09:30:00');
insert into patients values(2, 'Potter', '1997-09-19', '2022-08-17 21:30:00');
select * from patients;
3 + 7
;
select 3 + 7;
select 3 * 7;
select 3 = 3
;
select 3 = 2 ;
select 3 + null ;
select 3 = null;
select 3 is null;
select 3 is not null;
select * from patients;
insert into patients values(3,'Lara', null, '2022-08-16 04:30:00');
select * from patients;
create table mytab( id integer, name char(10));
show tables;
create table mytab(age integer, course char(20));
create table if not exists mytab(age integer, course char(20));
desc mytab;
insert into mytab values(1,'Tom');
select * from mytab;
select * from students;
alter table students add column marks integer;
select * from students;
desc students;
alter table students drop column age;
desc students;
select * from students;
alter table students change sname name char(30);
select * from students;
alter table students modify column course varchar(30);
desc students;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
select * from myclass;
show tables;
drop table mytab;
show tables;
exit
use exampledb;
select * from students;
insert into students values(3,'Mary','Mysql',78);
insert into students values(4,'Jon', Null, 88);
select * from students;
insert into students (sid, name, marks) values(5,'George',90);
select * from students;
insert  into students values(6,'Harry','Magic',98),(7,'Potter','Magic',88),(8,'Sara','Dance',99);
select * from students;
update students set name = 'Samantha' where name='sam';
select * from students;
update students set marks = 50 where marks = null;
select * from students;
update students set marks = 50 where marks is null;
select * from students;
update students set name= 'Lara', course = 'Science' where sid = 8;
select * from students;
update students set marks = 100 ;
select * from students;
delete from students where sid = 1;
select * from students;
delete from students where course='mysql';
select * from students;
delete from students where course is null;
select * from students;
delete from students ;
select * from students;
insert  into students values(6,'Harry','Magic',98),(7,'Potter','Magic',88),(8,'Sara','Dance',99);
select * from students;
truncate students;
select * from students;
select8 FROM MYEMP;
 
select * from myemp;
select * from myemp limit 5;
select emp_id, first_name, last_name, salary from myemp;
select emp_id, first_name, last_name, salary from myemp limit 10;
desc students;
select emp_id, first_name, last_name, salary from myemp limit 10;
select * from myemp limit 5;
select first_name, last_name, salalry, salary*0.2 from myemp limit 10;
select first_name, last_name, salary, salary*0.2 from myemp limit 10;
select concat(first_name, ' ', last_name), salary, salary*0.2 from myemp limit 10;
select concat(first_name, ' ', last_name) as full_name, salary, salary*0.2 as bonus from myemp limit 10;
select concat(first_name, ' ', last_name) as full_name, salary as income, salary*0.2 as bonus from myemp limit 10;
select * from myemp limit 5;
select * from myemp limit 50;
select * from myemp order by last_name;
select * from myemp order by last_name desc;
select * from myemp order by hire_date;
select * from myemp order by hire_date limit 1;
select * from myemp order by salary desc;
select * from myemp order by salary desc limit 1,2;
select * from myemp order by salary desc limit 3,1;
select * from myemp where dep_id = 60;
select * from myemp where job_id = 'st_clerk';
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >= '2000-01-01';
exit
use exampledb;
select * from students;
select * from patients;
select * from patients where dob = null;
select * from patients where dob is null;
select * from patients where dob is not null;
select * from myemp limit 10;
select * from myemp where salary between 10000 and 20000;
select * from myemp where first_name like 'j%';
select * from myemp where first_name like 'j____';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%;
;
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '% %';
select * from myemp where dep_id = 60 and salary > 10000;
select * from myemp where dep_id = 50 and salary > 10000;
select * from myemp where dep_id = 80 and salary > 10000;
select * from myemp where dep_id = 60 or salary > 15000;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id = 70;
select * from myemp where dep_id in (40,60,70);
select * from myemp where dep_id != 80;
select * from myemp where job_id = 'it_prog' and salary >= 8000 and hire_date >= '2000-01-01';
select * from myemp where job_id = 'it_prog' and salary >= 8000 and hire_date >= '1990-01-01';
select * from myemp limit 20;
select * from myemp where salary > 8000;
select * from myemp where job_id = 'sa_man' and salary >= 8000 and hire_date >= '1990-01-01';
select * from myemp where job_id = 'sa_man' and salary >= 8000 and hire_date >= '2000-01-01';
select * from myemp  limit 20;
select Dep_id from myemp;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select distinct job_id from myemp;
select * from person;
select distinct fname,lname from person;
select distinct job_id , dep_id from myemp ;
select distinct job_id , dep_id from myemp  order by dep_id;
select concat(first_name, ' ', last_name) as name, first_name, last_name from myemp limit 10;
select current_date();
select current_time();
select now();
select * from patients;
select dob, adddate(dob, interval 31 day) from patients;
select year(dob) from patients;
select month(dob) from patients;
select monthname(dob) from patients;
select month(dob), dayname(dob) from patients;
select monthname(dob), dayname(dob), year(dob) from patients;
select floor(4.1);
select floor(4.9);
show tables;
select * from myemp limit 10;
select left(first_name, 2) from myemp limit 10;
select first_name from myemp where left(first_name, 1) IN ('a','c','j');
select first_name from myemp where left(first_name, 1) IN ('a','c','j') order by first_name;
select hire_date, year(hire_date) from myemp limit 20;
select sum(salary) from myemp;
select max(salary) from myemp;
select min(salary) from myemp;
show tables;
select count(*) from products;
select count(*) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) max_sal from myemp group by dep_id;
select dep_id, max(salary) max_sal from myemp group by dep_id order by max_sal;
select job_id, max(salary) from myemp group by job_id ;
select job_id, max(salary), min(salary), count(salary) from myemp group by job_id ;
exit
use exampledb;
select hire_date, year(hire_date) from myemp limit 10;
select salary from myemp limit 10;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, mgr_id , max(salary) from myemp group by dep_id, mgr_id;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id having dep_id in (50,90,100);
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select first_name, last_name, title from movies inner join members on movieid = id;
select first_name, last_name, title from movies inner join members on movieid = id where category ='animations';
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select * from movies;
select * from members;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select mealname, drinkname from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select mealname, drinkname, meals.rate, drinks.rate from meals cross join drinks;
select mealname, drinkname, meals.rate + drinks.rate as price from meals cross join drinks;
select mealname, drinkname, meals.rate + drinks.rate as price from meals as m  cross join drinks as d;
select mealname, drinkname, m.rate + d.rate as price from meals as m  cross join drinks as d;
select * from movies left join members on movieid = id;
select first_name, last_name, title from movies left join members on movieid = id;
select mm.first_name, mm.last_name, mv.title from movies as mv inner join members as mm on mv.id = mm.movieid;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mv.id = mm.movieid;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id  from myemp limit 10;
exit
use exampledb;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
select * from students;
drop table students;
create table students(sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18) , course varchar(30));
desc students;
insert into students values(1,'Jon', 23,'Mysql');
select * from students;
insert into students values(1,'Tom', 23,'Mysql');
insert into students values(2,'Tom', 23,'Mysql');
select * from students;
insert into students values(3,'Sara', 17, 'Analytics');
insert into students values(3,'Sara', 19, 'Analytics');
select * from students;
desc students;
insert into students values(4, null, 20,'Dance');
insert into students (sid, age, course) values(5,23,'Magic');
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Smith';
desc students;
insert into students (sid, age, course) values(5,23,'Magic');
select * from students;
insert into students values(4, null, 20,'Dance');
use information_schema;
show tables;
select * from table_constraints;
select * from table_constraints where table_name='students';
select * from table_constraints where table_name='students' and constrain_schema='exampledb';
select * from table_constraints where table_name='students' and constraint_schema='exampledb';
use exampledb;
select 8 FROM AUTHORS;
select  * FROM AUTHORS;
select  * FROM books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY (aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY (aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
exit
use exampledb;
create table mytab(id integer primary key auto_increment, name varchar(20), age integer);
desc mytab;
insert into mytab (name, age) values('Harry', 45);
select * from mytab;
insert into mytab (name, age) values('Potter', 28),('Tom',11),('Sam',35);
select * from mytab;
delete from mytab;
insert into mytab (name, age) values('Harry', 45);
select * from mytab;
insert into mytab (name, age) values('Potter', 28),('Tom',11),('Sam',35);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Potter', 28),('Tom',11),('Sam',35);
select * from mytab;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary from myemp ;
create view myview as select emp_id, first_name, last_name, salary from myemp ;
select * from myview;
select * from movies;
select * from members;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp;
create view dep100 as select * from myemp where dep_id = 100;
select * from dep100;
select * from authors;
select * from dep100;
create view aview as select * from authors where authorid <= 10;
select * from aview;
insert into aview values(8,'Tom Cruise');
select * from aview;
select * from authors;
insert into aview values(12,'jon Hamm');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid <= 10 with check option;
insert into aview values(13,'Hugh Laurie');
insert into aview values(1,'Hugh Laurie');
drop view aview;
create view aview as select * from authors where authorid <= 10 with check option;
select * from aview;
select * from authors;
select * from myview;
alter view myview as select job_id from myemp;
select * from myview;
create view myview as select emp_id, first_name, last_name, salary from myemp ;
alter view myview as select emp_id, first_name, last_name, salary from myemp ;
select * from students;
insert into students values(4,'Jim', 33,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = o;
set autocommit = 0;
insert into students values(6,'Jane',55,'Cooking');
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(6,'Jane',55,'Cooking');
select * from students;
rollback;
select * from students;
create table tt (id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
exit
use exampledb;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
show indexes from employees;
select * from employees where hire_date >= '2000-01-01';
use exampledb;
desc students;
show indexes from students;
show indexes from authors;
use employees;
drop index hidx on employees;
show indexes from employees;
call myproc();
use exampledb;
call myproc();
select * from books;
call myproc();
call myproc(5);
call myproc(7);
call myproc(80);
exit
use exampledb;
select * from books;
call myproc(7);
select "Hello" ;
select "Hello world" ;
select "Hello world"  as greeting;
call myproc(7);
select * from books;
select * from books where bookid = 10;
call myproc(7);
select * from myemp where emp_id = 100;
call proc_if(100);
call proc_if(101);
select * from myemp where emp_id = 101;
call proc_if(101);
call proc_if(100);
call proc_if(101);
call proc_if(150);
call proc_simpleloop();
call proc_simpleloop(2);
call proc_simpleloop(3);
call proc_simpleloop(4);
call proc_repaet(5);
call proc_repeat(5);
call proc_repeat(3);
call proc_while(2);
call proc_while(3);
call proc_case(5);
call proc_case(1);
call proc_case(2);
exit
use exampledb;
select * from kkk;
call proc_except();
select abc from authors;
select * from payments;
desc payments;
insert into payments values(1, null);
select * from fraud;
desc fraud;
desc payments;
select * from payments;
call make_payment(1,250);
select * from payments;
call make_payment(2, null);
desc fraud;
select now();
select * from payments;
select * from fraud;
call make_payment(2,300);
select * from payments;
select * from fraud;
call make_payment(3, null);
select * from payments;
select * from fraud;
call make_payment(4, 650);
select * from payments;
select * from fraud;
call make_payment(5, null);
select * from payments;
select * from fraud;
call proc_cursor();
exit
use exampledb;
select * from myemp limit 10;
select * from myemp where emp_id%2 = 0 limit 10;
select emp_id, salary from myemp where job_id ='it_prog';
call proc_cursor();
select * from products limit 10;
select * from orders;
desc orders;
call place_order();
select * from orders;
select count(*) from products;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp limit 20;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as experience from myemp limit 20;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as experience from myemp where experience(emp_id) < 10;
select * from products;
select * from myemp limit 10;
select * from products limit 10;
select * from books;
select * from book_sales;
desc book_sales;
alter table books add column sales default 0;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
select * from books;
update books set sales = sales + 6 where bookid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 7;
select * from books;
select * from book_sales;
select * from students;
exit
select * from basic_pays;
use exampledb;
select * from basic_pays;
select emp_id, max(salary) over(partition by employee_id) as max_sal from basic_pays;
select employee_id, max(salary) over(partition by employee_id) as max_sal from basic_pays;
select first_name, last_name, salary, max(salary) over (partition by job_id) ;
select first_name, last_name, salary, max(salary) over (partition by job_id) from myemp;
select first_name, last_name, job_id, salary, max(salary) over (partition by job_id) as max_sal from myemp;
select * from basic_pays;
select row_number() over(order by salary) , salary from basic_pays;
select row_number() over(partition by employee_id order by salary) , salary from basic_pays;
select row_number() over(partition by employee_id order by salary) as num , salary from basic_pays where num = 1;
show tables;
select * from t;
select emp_id, first_name, last_name, hire_date , dep_id, min(hire_date) over (partition by dep_id) first_person from myemp order by dep_id;
with t as (select * from myemp)
select emp_id, first_name, dep_id from t;
with t as (select * from myemp) select emp_id, first_name, dep_id from t;
select emp_id, first_name, last_name, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal from myemp limit 10;
select emp_id, first_name, last_name, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal from myemp where salary > avg_sal;
with t as (select emp_id, first_name, last_name, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal from myemp)
select * from t where salary > avg_sal;
with t as (select emp_id, first_name, last_name, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal from myemp) select * from t where salary > avg_sal;
select * from t;
select val, rank() over(order by val) as rnk from t;
select val, dense_rank() over(order by val) as rnk from t;
show tables;
create table marks(id integer, name varchar(20), marks integer);
insert into marks values(1,'Tom', 53),(2,'sam',67),(3,'Jon',34),(4,'Mary',72),(5,'Harry',42),(6,'Larry',51);
select * from marks;
select id, name, marks , dense_rank() over(order by marks desc) as rnk from marks;
select emp_id, first_name, last_name, salary, dep_id , dense_rank() over(partition by dep_id order by salary) as rnk from myemp limit 20;
select emp_id, first_name, last_name, salary, dep_id , dense_rank() over(partition by dep_id order by salary desc) as rnk from myemp limit 20;
with t as (select emp_id, first_name, last_name, salary, dep_id , dense_rank() over(partition by dep_id order by salary desc) as rnk from myemp) select * from t where rnk = 2;
show tables;
select * from sales;
select sales_employee, fiscal_year, sale, lag(sale) over (partition by sales_employee order by fiscal_year) as prev_sale from sales;
with cte as (select sales_employee, fiscal_year, sale, lag(sale) over (partition by sales_employee order by fiscal_year) as prev_sale from sales) select sales_employee, fiscal_year, sale, sale - prev_sale as difference from cte;
show tables;
select * from trains;
select train_id, station, time, lead(time) over (partition by train_id order by time) as next_time from trains;
with cte as (select train_id, station, time, lead(time) over (partition by train_id order by time) as next_time from trains) select train_id, station, time, next_time - time as next_stop from cte;
with cte as (select train_id, station, time, lead(time) over (partition by train_id order by time) as next_time from trains) select train_id, station, time, subtime(next_time , time) as next_stop from cte;
select emp_id, first_name, last_name, salary, dep_id , min(salary) over ( partition by dep_id ) min_sal, max(salary) over ( partition by dep_id) as max_sal from myemp limit 20;
select emp_id, first_name, last_name, salary, dep_id , min(salary) over w  min_sal, max(salary) over w as max_sal from myemp window w as (partition by dep_id) ;
select * from mynewtable;
exit
use exampledb;
select * from trains;
select train_id, station, time , lead(time, 1) over (partition by train_id order by time) as next_stop from trains;
select * from sales;
select * from students_d;
exit
use testdb;
desc patients;
insert into patients values(1, 'Tom', '1997-03-23','2022-09-18 10:30:00');
insert into patients values(2, 'Don', '1959-07-11', '2022-09-18 22:30:00');
select * from patients;
select 34 + 78;
select 65 * 756;
select 45 + null;
select 4 = 4;
select 4 = 3;
select 4 = null;
select 4 is null;
select 4 is not null;
show tables;
create table students(id integer);
create table if not exists students(id integer);
select * from students;
create table mytab(id integer, name varchar(20));
show tables;
drop table mytab;
show tables;
select * from students;
alter table students add column marks integer ;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sname name char(20);
select * from students;
desc students;
alter table students modify column course varchar(30);
desc students;
show tables;
alter table students rename to mystudents;
show tables;
select * from mystudents;
rename table mystudents to students;
show tables;
select * from mystudents;
select * from students;
insert into students values(300,'John','Mysql', 50);
select * from students;
insert into students values(400,'John', null, 75);
select * from students;
insert into students (sid, name,marks) values(500,'Peter',89);
select * from students;
insert into students values(600,'Larry','Mysql', 77),(700,'Collins','Analytics',66),(800,'Harry','Magic', 90);
select * from students;
exit
use practicedb;
show tables;
select * from students;
create table patients(
pid integer,
pname varchar(20),
dob date,
toa datetime);
create table patients( pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1,
'Harry', '1998-09-19','2022-09-18 09:30:00');
insert into patients values(1, 'Harry', '1998-09-19','2022-09-18 09:30:00');
insert into patients values(2,'Potter', '2000-01-26', '2022-09-18 21:30:00');
select * from patients;
select 5 + 9;
select 567 * 879;
select 5 + null;
select 5 = 5;
select 5 = 4;
select 5 = null;
select 5 is null;
select 5 is not null;
select null is null;
select null = null;
create table if not exists mytab(
id integer,
name varchar(20));
create table if not exists mytab( id integer, name varchar(20));
show tables;
create table if not exists students( id integer, name varchar(20));
select * from students;
create table students( id integer, name varchar(20));
drop table mytab;
show tables;
select * from students;
alter table students add column marks integer after sname;
select * from students;
exit
use testdb;
select * from students;
update students set name = 'Lara' where sid = 600;
select * from students;
update students set course = 'Analytics' where name = 'john';
select * from students;
update students set marks = 100 where marks = null;
select * from students;
update students set marks = 100 where marks is null;
select * from students;
update students set marks = 95, course='Mysql' where sid = 500;
select * from students;
update students set marks = 100;
select * from students;
delete from students where sid = 100;
select * from students;
delete from students where course = 'Mysql';
select * from students;
delete from students;
select * from students;
insert into students values(600,'Larry','Mysql', 77),(700,'Collins','Analytics',66),(800,'Harry','Magic', 90);
select * from students;
truncate students;
select * from students;
desc students;
show tables;
select * from myemp;
select * from myemp limit 5;
show tables;
select * from products limit 3;
select * from products limit 10;
select pname, pvendor from products;
select pname, pvendor from products limit 5;
select * from myemp limit 5;
select first_name, last_name, job_id, salary, salary*0.20 from myemp limit 10;
select * from products limit 5;
select pcode, pvendor, qtyinstock, qtyinstock*mrp from products limit 10;
select pcode, pvendor, qtyinstock, qtyinstock*mrp as TotalCost from products limit 10;
select first_name, last_name, job_id, salary, salary*0.20 as bonus from myemp limit 10;
select first_name, last_name, job_id as role, salary, salary*0.20 as bonus from myemp limit 10;
select * from myemp;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by hire_date desc;
select * from myemp order by hire_date;
select * from myemp order by dep_id, hire_date;
select first_name, last_name, dep_id, hire_date order by dep_id, hire_date;
select first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date;
select * from myemp;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select * from person;
select distinct fname, lname from person;
select * from myemp limit 10;
select distinct dep_id, job_id from myemp;
select distinct dep_id, job_id from myemp order by dep_id;
select * from myemp where dep_id = 40;
select * from myemp where dep_id = 60;
select * from myemp where job_id = 'it_prog';
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >= '2000-01-01';
exit
use practicsdb;
use practicedb;
show tables;
select * from students;
alter table students add column rank integer;
alter table students add column rak integer;
alter table students add column `rank` integer;
select * from students;
alter table students drop column `rank`;
alter table students drop column rak;
select * from students;
insert into students values(300,'George', 67,23,'Mysql');
insert into students values(400,'Tim', 55, null, 'Analytics');
select * from students;
insert into students (sid, sname, course) values(500,'Jim','Cooking');
select * from students;
insert into students values(600,'Peter',66,18,'Mysql'),(700,'Harry',88,19,'Magic'),(800,'Potter',90,20,'Magic');
select * from students;
update students set sname = 'Tom' where sid = 100;
select * from students;
update students set course = 'Data Science' sname ='george';
update students set course = 'Data Science' where sname ='george';
select * from students;
update students set sname = 'Tim' where sname='Jim';
select * from students;
update students set marks = 0 where marks = null;
select * from students;
update students set marks = 0 where marks is null;
select * from students;
update students set course = 'music' where marks is not null;
select * from students;
update students set course = 'Mysql';
select * from students;
update students set sname='Thomas', marks=100, course='Analytics' where sid = 100;
select * from students;
delete from students where sid = 600;
select * from students;
delete from students where age is null;
select * from students;
delete from students;
select * from students;
rollback;
select * from students;
insert into students values(600,'Peter',66,18,'Mysql'),(700,'Harry',88,19,'Magic'),(800,'Potter',90,20,'Magic');
select * from students;
truncate students;
select * from students;
insert into students values(600,'Peter',66,18,'Mysql'),(700,'Harry',88,19,'Magic'),(800,'Potter',90,20,'Magic');
select * from students;
drop table students;
create table students(sid integer, sname cahr(20), marks integer, age integer, course integer);
create table students(sid integer, sname char(20), marks integer, age integer, course integer);
select * from students;
desc students;
insert into students values(600,'Peter',66,18,'Mysql'),(700,'Harry',88,19,'Magic'),(800,'Potter',90,20,'Magic');
alter table students modify column course char(20);
insert into students values(600,'Peter',66,18,'Mysql'),(700,'Harry',88,19,'Magic'),(800,'Potter',90,20,'Magic');
select * from students;
delete from students;
select * from students;
show tables;
select * from myemp limit 5;
select count(*) from myemp;
select * from myemp ;
select * from myemp limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
select first_name, last_name, job_id, salary , salary*0.15 from myemp limit 10;
select first_name, last_name, job_id, salary , salary*0.15 as bonus from myemp limit 10;
select first_name, last_name, job_id as role, salary , salary*0.15 as bonus from myemp limit 10;
select * from myemp limit 10;
select distinct dep_id from myemp;
select distinct job_id from myemp;
select * from person;
select distinct fname, lname from myemp;
select distinct fname, lname from person;
select * from myemp limit 10;
select first_name, last_name, job_id, salary+0.15*salary as total_salary limit 10;
select first_name, last_name, job_id, salary+0.15*salary as total_salary from myemp limit 10;
alter table myemp add column tot_sal decimal(10,4);
select * from myemp limit 10;
update students set tot_sal = salary*0.15+salary;
update myemp set tot_sal = salary*0.15+salary;
select * from myemp limit 10;
select count(*) from myemp;
create table mytab(id integer, name char(20));
desc mytab;
select * from mytab;
insert into mytab values(1,'Tom'),(2,'Jon');
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab values(1,'Tom'),(2,'Jon');
select * from mytab;
drop table mytab;
create table mytab(id integer, name char(20));
select * from mytab;
insert into mytab values(1,'Tom'),(2,'Jon');
select * from mytab;
truncate mytab;
select * from mytab;
desc mytab;
exit
use testdb;
select * from myemp where dep_id <> 50;
select * from myemp where salary between 10000 and 15000;
select * from myemp where hire_date between '2000-01-01' and '2016-01-01';
select * from myemp where first_name like 'A%';
select * from myemp where first_name like '%A';
select * from myemp where first_name like '%c%';
show tables;
select * from books;
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'J____';
select * from books;
select title from books where title like 'Harry Potter%';
select * from myemp where dep_id = 50 and salary > 8000;
select job_id from myemp;
select * from myemp where job_id like '%MAN';
select * from myemp where job_id like '%MAN'  and salary >= 10000;
select * from myemp where job_id like '%MAN'  or hire_date < '1980-01-01';
select * from products limit 15;
select * from products where mrp >= 200 and qtyinstock > 5000;
select * from products where productline = 'motorcycles' and mrp > 150;
select * from products where productline = 'classic cars' and pvendor = 'Second gear diecast';
select * from myemp lmit 10;
select * from myemp limit 10;
select * from myemp where dep_id = 90 or dep_id = 60 or dep_id = 40;
select * from myemp where dep_id IN (90,60,40,30,10);
show tables;
select * from myemp where mgr_id in (100,103,114);
select * from myemp where emp_id%2=0;
select concat(first_name, last_name) as Full_Name from myemp;
select concat(first_name, ' ',last_name) as Full_Name from myemp;
select first_name, last_name, concat(first_name, ' ',last_name) as Full_Name from myemp;
select first_name, last_name, concat(first_name, ' ',last_name) as Full_Name from myemp limit 10;
select first_name, left(first_name,1) from myemp;
select first_name, left(first_name,1) from myemp limit 10;
select max(salary) from myemp;
select min(salary), avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id;
select job_id, avg(salary) from myemp group by job_id;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, mgr_id, max(salary) from myemp group by dep_id,mgr_id;
select dep_id, mgr_id, max(salary), first_name from myemp group by dep_id,mgr_id;
select * from products;
select * from products limit 10;
select productline, mrp, max(mrp) from products group by productline;
select productline,  max(mrp) from products group by productline;
exit
use practicedb;
select * from students;
select * from myemp limit 10;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by hire_date desc;
select * from myemp order by last_name;
select * from myemp order by dep_id, salary;
select first_name, last_name, dep_id, salary from myemp order by dep_id, salary limit 15;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary <= 3000;
select * from myemp where dep_id != 80;
select * from myemp where first_name like 'A%';
select * from myemp where first_name like '%A';
select * from myemp where first_name like '%C%';
select * from myemp where first_name like '%x%';
select * from books;
update books set title = 'The Harry Prince' where bookid = 14;
select * from books;
select * from books where title like 'Harry Potter %';
select * from myemp where first_name like 'J____';
select * from myemp where salary like '%400%';
select * from myemp where dep_id = 80 and salary >= 8000;
select * from myemp where dep_id = 40 or  salary >= 15000;
select * from myemp where dep_id = 40;
select * from myemp where dep_id = 40 or dep_id = 60 or dep_id = 20;
select * from myemp where dep_id IN (60,20,40);
select * from myemp where dep_id IN (60,40,20);
select * from myemp where dep_id IN (60,40,20) order by dep_id;
select * from myemp where emp_id%2 = 0;
Mysqldump -u root -p analytics cats > '/Users/geethikapanikker/C/Personal/cats.sql'
;
exit
use practicedb;
Mysqldump -u root -p analytics cats > '/Users/geethikapanikker/C/Personal/cats.sql'
;
CREATE TABLE `cats` (
  `name` text,
  `breed` text,
  `weight` double DEFAULT NULL,
  `color` text,
  `age` int DEFAULT NULL
) ;
CREATE TABLE `cats` (   `name` text,   `breed` text,   `weight` double DEFAULT NULL,   `color` text,   `age` int DEFAULT NULL );
INSERT INTO `cats` VALUES ('Ashes','Persian',4.5,'Black',5),('Molly','Persian',4.2,'Black',1),('Felix','Persian',5,'Tortoiseshell',2),('Smudge','British Shorthair',4.9,'Black',4),('Tigger','British Shorthair',3.8,'Tortoiseshell',2),('Alfie','Siamese',5.5,'Brown',5),('Oscar','Siamese',6.1,'Black',1),('Millie','Maine Coon',5.4,'Tortoiseshell',5),('Misty','Maine Coon',5.7,'Brown',2),('Puss','Maine Coon',5.1,'Tortoiseshell',2),('Smokey','Maine Coon',6.1,'Brown',4),('Charlie','British Shorthair',4.8,'Black',4);
select * from cats;
select * from products;
select first_name, last_name, concat(first_name, ' ', last_name) as full_name from myemp limit 15;
select first_name, left(first_name,2)  from myemp limit 15;
select max(salary) from myemp;
select sum(salary) from myemp where first_name like 'A%';
select * from myemp where first_name like 'A%';
select * from myemp where first_name = 'Alexander';
select * from cats;
select breed, avg(weight) from cats group by breed;
select color, count(*) from cats group by color;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id;
select * from cats;
select name, color, count(*) from cats group by color;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id having dep_id = 50;
select dep_id, max(salary) from myemp group by dep_id having dep_id IN (30,50,70);
select dep_id, max(salary) as max_sal from myemp group by dep_id having dep_id IN (30,50,70) order by max_sal;
exit
use testdb;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id = 70;
select dep_id, avg(salary) from myemp group by dep_id having dep_id IN (20,40,50);
select dep_id, avg(salary) from myemp group by dep_id having where IN (20,40,50);
select dep_id, avg(salary) from myemp group by dep_id where dep_id IN (20,40,50);
select first_name, avg(salary) from myemp;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp, group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select * from movies;
select * from members;
select first_name, last_name, title from movies inner join members on movieid = id;
select * from movies;
select * from members;
select first_name, last_name, title from movies left join members on movieid = id;
select * from movies left join members on id = movieid;
select * from movies;
select * from members;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate, drinkname;
select mealname, rate, drinkname from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d ;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mm.movieid = mv.id;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
exit
use practicedb;
select * from movies;
select * from members;
select * from members inner join movies on movieid = id;
select * from movies;
select * from members;
select * from members left join movies on movieid = id;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, drinkname , rate from meals cross join drinks;
select m.mealname,d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select m.mealname,d.drinkname, m.rate + d.rate as Total from meals as m cross join drinks as d;
select mm.first_name, mm.last_name, mv.title, mv.category from movies as mv left join members as mm on mm.movieid = mv.id;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp
join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
exit
use testdb;
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age > 18),
course varchar(30)
);
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
desc students;
insert into students values(1,'Hugh', 23,'Mysql');
select * from students;
insert into students values(1,'George', 23,'Mysql');
insert into students values(2,'George', 23,'Mysql');
select * from students;
insert into students values(3,'Lara', 15, 'Analytics');
insert into students values(3,'Lara', 25, 'Analytics');
select * from students;
insert into students values(4,null, 45,'Actins');
insert into students (sid,age,course) values(5,45,'Acting');
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Smith',;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Smith';
desc students;
insert into students (sid,age,course) values(5,45,'Acting');
select * from students;
insert into students values(4,null, 45,'Actins');
insert into students values(null,'Harry',24,'Magic');
insert into students values(null,'Potter', 23,'Magic');
select * from students;
drop table authors;
drop table books;
drop table authors;
create table authors(
authorid integer PRIMARY KEY,
name varchar(50));
create table authors( authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
show create table books;
update authors set authorid = 80 where authorid = 8;
select * from books;
select * from authors;
create table mytab(
is integer PRIMARY KEY AUTO_INCREMENT,
name varchar(255),
age integer);
create table mytab( is integer PRIMARY KEY AUTO_INCREMENT, name varchar(255), age integer);
create table mytab( id integer PRIMARY KEY AUTO_INCREMENT, name varchar(255), age integer);
desc mytab;
select * from mytab;
insert into mytab (name,age) values('Yara', 37);
select * from mytab;
insert into mytab (name,age) values('Harry', 33),('Potter', 35);
select * from mytab;
delete from mytab;
insert into mytab (name,age) values('Yara', 37);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name,age) values('Harry', 33),('Potter', 35);
select * from mytab;
exit
use practicedb;
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(20) NOT NULL,
age integer CHECK(age > 18),
course varchar(30)
);
create table students( sid integer UNIQUE, sname varchar(20) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
desc students;
insert into students values(1,'Hugh',35,'Mysql');
insert into students values(1,'Steven',35,'Mysql');
insert into students values(2,'Steven',35,'Mysql');
select * from students;
insert into students values(Null,'Sophie',35,'Mysql');
insert into students values(Null,'Sarah',35,'Mysql');
select * from students;
insert into students values(5,'Pete', 13, 'Analytics');
insert into students values(5,'Pete', 23, 'Analytics');
select * from students;
insert into students values(6,null, 45,'Analytics');
insert into students (sid, age, course) values(7,34,'Mysql');
desc students;
alter table students modify column sname varchar(20) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(7,34,'Mysql');
select * from students;
insert into students values(6,null, 45,'Analytics');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(
aid integer PRIMARY KEY,
name varchar(30) 
);
create table authors( aid integer PRIMARY KEY, name varchar(30)  );
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(aid)
ON DELETE CASCADE
ON UPDATE CASCADE
);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(aid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where aid = 1;
select * from authors;
select * from books;
update authors set aid = 80 where aid = 8;
select * from authors;
select * from books;
create table mytab(id integer primary key auto_increment, name varchar(20), age integer);
select * from mytab;
desc mytab;
drop table mytab;
create table mytab(id integer primary key auto_increment, name varchar(20), age integer);
desc mytab;
insert into mytab (name, age) values('Tim', 66);
select * from mytab;
insert into mytab (name, age) values('Jon', 51),('Hamm',52);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Tim', 66);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Tim', 66);
select * from mytab;
show create table mytab;
show create table books;
truncate mytab;
alter table mytab auto_increment=100;
insert into mytab (name, age) values('Tim', 66);
select * from mytab;
insert into mytab (name, age) values('Jon', 51),('Hamm',52);
select * from mytab;
insert into mytab values(105, 'King', 43);
select * from mytab;
insert into mytab (name, age) values('Queen', 23);
select * from mytab;
exit
use testdb;
select * from students;
insert into students values(10,'Yara',34,'Mysql');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(11,'Jon',29,'Cooking');
select * from students;
rollback;
select * from students;
insert into students values(11,'Jon',29,'Cooking');
select * from students;
commit;
rollback;
select * from students;
set autocommit = 1;
insert into students values(12,'Harry', 56,'Mysql');
select * from students;
rollback;
select * from students;
create table tt(id char);
insert into tt vaalues('a');
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
rollback;
select * from tt;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
select * from myemp;
select * from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total limit 10;
select first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total from myemp limit 10;
create view myview as select first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total from myemp;
show tables;
select * from myview limit 10;
select * from movies;
select * from members;
select mv.title, mv.category, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rental as select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from rental;
select * from myemp limit 10;
create view dep60 as select* from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid <= 10;
select * from  aview;
insert into authors values(11,'Jon Hamm');
select * from  aview;
select * from authors;
insert into aview values(12,'Jon Curtis');
select * from  aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid <= 10 WITH CHECK OPTION;
select * from authors;
insert into aview values(13,'Jon Curtis');
insert into aview values(1,'Jon Curtis');
select * from authors;
select * from aview;
exit
use practicedb;
select * from students;
insert into students values(8,'King',40,'DS');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(9,'Queen',34,'Dance');
select * from students;
rollback;
select * from students;
rollback;
select * from students;
insert into students values(9,'Queen',34,'Dance');
commit;
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(10,'Prince', 23,'Karate');
select * from students;
rollback;
select * from students;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
delete from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
select * from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
create view myview as select first_name, last_name, salary, salary*0.2 as bonus from myemp;
select * from myview limit 15;
show tables;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where aid <=10;
select * from aview;
insert into aview vales(11,'Tom Hanks');
insert into aview values(11,'Tom Hanks');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where aid <=10 with check option;
insert into aview values(12,'Jon hamm');
insert into aview values(1,'Jon hamm');
select * from authors;
select * from aview;
select * from movies;
select * from members;
select mv.id, mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mm.movieid = mv.id;
select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mm.movieid = mv.id;
create view rentals as select mv.id, mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mm.movieid = mv.id;
select * from rentals;
use information_schema;
show tables;
desc TABLES;
select * from tables;
select * from tables limit 5;
select * from tables where table_schema = 'practicedb';
use practicedb;
show create view myview;
show create table myview;
select * from universities;
exit
use testdb;
show create table students;
use employees;
select count(*) from employees;
drop index hidx from employees;
drop index hidx on employees;
select * from employees limit 5;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
use practicedb;
desc students;
show indexes from students;
desc authors;
show indexes from authors;
use employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
call myproc();
use practicedb;
call myproc();
desc books;
select * from books;
call myproc();
call myproc(5);
call myproc(7);
call myproc(10);
exit
use practicedb;
show create table students;
desc students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
call myproc();
use practicedb;
call myproc();
select * from books;
call myproc(9);
call myproc(13);
select "Hello" ;
select "Hello" as msg;
select "Programmins is fun" as msg;
call myproc(1);
use testdb;
call myproc(7);
select * from books;
call myproc(7);
select "Hello World";
select "Hello World" as msg;
select "Hello World" as greetings;
call myproc();
call myproc('Tom');
call myproc('Mary');
select * from books;
call proc_localvar(6);
select * from books;
call proc_localvar(14);
call proc_localvar(11);
select * from authors;
call proc_localvar(11);
call proc_localvar(14);
select * from products limit 15;
call proc_if('S10_1678');
call proc_if('S12_1099');
call proc_if('S10_1678');
call proc_if2(3);
call proc_if2(5);
call proc_if2(7);
call proc_if2(17);
call proc_simpleloop();
call proc_simpleloop(3);
call proc_simpleloop(7);
call proc_simpleloop(2);
call proc_repeat(3)
;
call proc_repeat(4);
call proc_while(3);
call proc_while(5);
exit
use practicedb;
call proc_locvar(7);
select * from books;
call proc_locvar(7);
select * from authors;
call proc_locvar(7);
show tables;
select * from basic_pays;
select * from offices;
select * from products limit 15;
call proc_if('S10_1678');
call proc_if('S12_1099');
select * from myemp limit 10;
call proc_if2(100);
call proc_if2(103);
select * from myemp limit 10;
call proc_if2(106);
call proc_if2(100);
call proc_if2(106);
call proc_if2(100);
call proc_if2(103);
call proc_simpleloop();
call proc_simpleloop(2);
call proc_simpleloop(6);
call proc_simpleloop(3);
call proc_repeat(3);
call proc_repeat(4);
call proc_while(5);
call proc_while(7);
call proc_while(2);
exit
use testdb;
select * from x;
select emp_id from authors;
call proc_except();
call proc_except(1);
call proc_except(5);
select * from payments;
desc payments;
desc fraud;
select * from fraud;
call make_payment(1,500);
desc payments;
select * from payments;
select * from fraud;
call make_payment(1,null);
select now();
call make_payment(2,800);
call make_payment(3, null);
select * from payments;
select * from fraud;
call make_payment(4,750);
call make_payment(5,1000);
call make_payment(6, null);
select * from payments;
select * from fraud;
select * from authors;
call proc_cursor();
select * from products limit 10;
desc orders;
select * from orders;
call place_order();
select * from products limit 10;
select * from orders;
exit
use practicedb;
select * from x;
select price from authors;
call proc_except();
call proc_except(1);
call proc_except(2);
select price from x;
call proc_except(2);
call proc_except(1);
select * from payments;
desc payments;
desc fraud;
select now();
select * from payments;
call make_payment(1,500);
select * from payments;
call make_payment(2,800);
select * from payments;
call make_payment(3, null);
desc fraud;
select * from fraud;
call make_payment(3,750);
select * from payments;
select * from fraud;
call make_payment(4,null);
select * from payments;
select * from fraud;
call make_payment(5,860);
call make_payment(6, null);
call make_payment(7,230);
select * from payments;
select * from fraud;
decs authors;
call proc_cursor();
select * from products limit 10;
desc orders;
select * from orders;
call place_orders();
call place_order();
select * from orders;
select * from products limit 10;
select * from orders;
select * from patients;
select adddate(dob, interval 31 day) from patients;
select adddate(dob, interval 7 day) from patients;
select current_date, current_time;
select now();
select hire_date, year(hire_date) from myemp limit 10;
select * from patients;
select year(dob), month(dob), day(dob), dayname(dob), monthname(dob) from patients;
exit
use testdb;
select * from patients;
select adddate(dob, interval 31 day) from patients;
select adddate(dob, interval 7 day) from patients;
select subdate(dob, interval 7 day) from patients;
select subdate(dob, interval 17 day) from patients;
select subdate(dob, interval 1 week) from patients;
select subdate(dob, interval 1 month) from patients;
select * from patients;
select year(dob), month(dob), day(dob), monthname(dob), dayname(dob) from patients;
select current_date(), current_time(), now();
select now();
select * from patients;
select first_name,last_name, concat(first_name, ' ',last_name) fname from myemp limit 10;
select * from office;
select * from offices;
select first_name, left(first_name,1) from myemp limit 10;
select first_name from mymep where left(first_name) IN ('a','c','d');
select first_name from mymep where left(first_name,1) IN ('a','c','d');
select first_name from myemp where left(first_name,1) IN ('a','c','d');
select lower(first_name), upper(first_name) from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select first_name, hire_date, experience(emp_id) from myemp limt 10;
select first_name, hire_date, experience(emp_id) from myemp limit 10;
select first_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10 ;
select salary from myemp a where salary = (select max(salary) from myemp where a.dep_id = dep_id);
select salary from myemp a where salary > (select avg(salary) from myemp where a.dep_id = dep_id);
show tables;
select * from employees;
select * from officess;
select * from offices;
select * from employees where officecode in (select office code from offices where country = 'usa');
select * from employees where officecode in (select officecode from offices where country = 'usa');
select * from employees inner join offices where employees.officecode = offices.officecode;
select * from employees inner join offices on employees.officecode = offices.officecode where country='usa';
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 3 where bookid = 6;
select * from books;
select * from book_sales;
decs book_sales;
desc book_sales;
update books set sales = sales + 1 where bookid = 9;
select * from books;
select * from book_sales;
update books set sales = sales + 12 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 9;
select * from books;
select * from book_sales;
exit
use practicedb;
select first_name, (case when dep_id = 80 then 'SALES' else 'OTHER' end) from myemp limt 30;
select first_name, (case when dep_id = 80 then 'SALES' else 'OTHER' end) from myemp limit 30;
select first_name, (case when dep_id = 80 then 'SALES' when dep_id = 40 then 'COMPS' else 'OTHER' end) from myemp limit 30;
select first_name, (case when dep_id = 80 then 'SALES' when dep_id = 40 then 'COMPS' else 'OTHER' end) from myemp;
select hire_date, monthname(hire_date) from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) as exper from myemp limit 15;
select first_name, last_name, hire_date, experience(emp_id) as exper , bonus(emp_id) as grade from myemp limit 15;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 2 where bookid = 8;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 4 where bookid = 6;
select * from books;
select * from book_sales;
select first_name, last_name, salary from myemp where salary = (select max(salary) from myemp );
select first_name, last_name, salary from myemp where salary > (select avg(salary) from myemp );
select * from offices;
select * from cities;
select * from  employees;
select * from offices;
select * from employees where officecode in (1,2,3);
select * from employees where officecode in ( select officedode from offices where country='usa');
select * from employees where officecode in ( select officecode from offices where country='usa');
select * from  employees limit 10;
select * from offices;
select  emp.firstname, emp.lastname, emp.email, off.state, off.country from employees as emp join offices as off on emp.officecode = off.officecode where off.country = 'usa';
select * from myemp e 
where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select * from myemp e  where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name, last_name, dep_id, salary from myemp e  where salary > (select avg(salary) from myemp where dep_id = e.dep_id) order by dep_id, salary;
select * from products;
select * from products limit 10;
exit
use testdb;
select * from cats;
use practicedb;
select * from cats;
select name, breed, avg(weight) over (partition by breed) as avg_wt from cats;
select first_name, last_name , salary, avg(salary) over w as avg_sal ,  salary - avg(salary) over w from myemp
   window w as (partition by dep_id) ;
select first_name, last_name , salary, avg(salary) over w as avg_sal ,  salary - avg(salary) over w from myemp    window w as (partition by dep_id);
use testdb;
select * from myemp where salary = (select max(salary) from myemp);
select * from myemp where salary = (select min(salary) from myemp);
select * from myemp where salary > (select avg(salary) from myemp);
select avg(salary) from myemp;
select * from myemp where salary > (select avg(salary) from myemp) order by salary;
select * from employees;
select * from employees limit 5;
select * from offices;
select * from employees where officecode in (select officecode from offices where country = 'usa');
select firstname, lastname, email, city, country from employees join offices on employees.officecode = offices.officecode;
select firstname, lastname, email, city, country from employees join offices on employees.officecode = offices.officecode where country = 'usa';
select * from myemp as e where salary = ( select max(salary) from myemp where dep_id = e.dep_id);
select dep_id, max(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp limit 20;
select first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp;
select first_name, last_name, salary, bonus from ( select *, salary*0.2 as bonus from myemp where dep_id in (40,20,30));
select first_name, last_name, salary, bonus from ( select *, salary*0.2 as bonus from myemp where dep_id in (40,20,30) ) as e;
select *, salary*0.2 as bonus from myemp where dep_id in (40,20,30);
with e as ( select *, salary*0.2 as bonus from myemp where dep_id in (40,20,30) ) 
select first_name, last_name, salary, bonus from e;
with e as ( select *, salary*0.2 as bonus from myemp where dep_id in (40,20,30) )  select first_name, last_name, salary, bonus from e;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as difference from myemp;
select first_name, last_name, dep_id, salary, 
avg(salary) over w as avg_sal , 
salary - avg(salary) over w as difference 
from myemp
 window w as (partition by dep_id);
select first_name, last_name, dep_id, salary,  avg(salary) over w as avg_sal ,  salary - avg(salary) over w as difference  from myemp  window w as (partition by dep_id);
show tables;
select * from sales;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as difference from myemp;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as difference from myemp limit 10;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal  from myemp limit 10;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal  from myemp) select *, salary - avg_sal as difference;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal  from myemp) select *, salary - avg_sal as difference from e;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal  from myemp) select *, salary - avg_sal as difference from e limit 10;
select * from t;
select val, rank() over(order by val desc) from t;
select val, rank() over(order by val desc) as rnk from t;
select val, dense_rank() over(order by val desc) as rnk from t;
select * from sales;
select sales_employee, fiscal_year, sale , dense_rank() over (partition by fiscal_year order by sales desc) as rnk from sales;
select sales_employee, fiscal_year, sale , dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select sales_employee, fiscal_year, sale , row_number() over (partition by fiscal_year order by sale desc) as rnk from sales;
select sales_employee, fiscal_year, sale , row_number() over (order by sale desc) as rnk from sales;
select * from myemp order by salary desc limit 10;
select  first_name, last_name, salary, dense_rank() over (order by salary desc) from myemp limit 10;
select  first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp limit 10;
select  first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp where rnk = 2;
with emp as (select  first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp) select * where rnk = 2;
with emp as (select  first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from emp where rnk = 2;
select  first_name, last_name, salary, first_value(salary) over (order by salary desc) as rnk from myemp limit 10;
select  first_name, last_name, salary, nth_value(salary,2) over (order by salary desc) as rnk from myemp limit 10;
with emp as (select  first_name, last_name, salary, nth_value(salary,2) over (order by salary desc) as rnk from myemp) select * from emp where salary = rnk;
with emp as (select  first_name, last_name, salary, nth_value(salary,5) over (order by salary desc) as rnk from myemp) select * from emp where salary = rnk;
with emp as (select  first_name, last_name, salary, nth_value(salary,6) over (order by salary desc) as rnk from myemp) select * from emp where salary = rnk;
select * from trains;
select *, lead(time,1) from trains;
select *, lead(time,1) over(partition by train_id order by time) from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_station , time - lead(time,1) over(partition by train_id order by time) as duration from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_station , sub_time(time, lead(time,1) over(partition by train_id order by time)) as duration from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_station , time_sub(time, lead(time,1) over(partition by train_id order by time)) as duration from trains;
select *, lead(time,1) over(partition by train_id order by time) as next_station , subtime(time, lead(time,1) over(partition by train_id order by time)) as duration from trains;
exit
use practicedb;
select  dep_id, avg(salary) as avsal, max(salary) maxsal,
min(salary) as minsal from myemp group by dep_id;
select  dep_id, avg(salary) as avsal, max(salary) maxsal, min(salary) as minsal from myemp group by dep_id;
with cte as (select  dep_id, avg(salary) as avsal, max(salary) maxsal, min(salary) as minsal from myemp group by dep_id) select dep_id, avsal,maxsal from cte;
select first_name,last_name, dep_id, salary, max(salary) over ( partition by dep_id) as max_sal from myemp limit 15;
select first_name,last_name, dep_id, salary, salary - avg(salary) over ( partition by dep_id) as difference from myemp limit 15;
select first_name,last_name, dep_id, salary, avg(salary) over ( partition by dep_id) as avg_sal, salary - avg(salary) over ( partition by dep_id) as difference from myemp limit 15;
select first_name,last_name, dep_id, salary, avg(salary) over w as avg_sal, salary - avg(salary) over w as difference from myemp  window w as (partition by dep_id) limit 15;
show tables;
create table marks(name char(10), marks integer);
insert into marks values('Thomas',56),('Mary',88),('Jon',36),('Pete',42),('Pat',97),('Harry',64),('Potter',71);
select * from marks;
insert into marks values('Lara',56),('Carrie',88),('Tim',56);
select * from marks;
select name, marks, rank() over (order by marks desc) as rnk;
select name, marks, rank() over (order by marks desc) as rnk from marks;
select name, marks, dense_rank() over (order by marks desc) as rnk from marks;
with  x as (select name, marks, dense_rank() over (order by marks desc) as rnk from marks) select * from x where rnk = 2;
select * from myemp order by salary desc limit 10;
with  x as (select *, dense_rank() over (order by salary desc) as rnk from myemp) select * from x where rnk = 3;
select * from sales;
select * , dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * from students;
insert into students values (10, 'Prince',23,'Karate');
select * from marks;
insert into marks values('Tim', 56);
select * from marks;
select * , row_number() over() from marks;
delete from marks where name='tim';
insert into marks values('Tim', 56);
select * from marks;
select *, nth_value(salary, 3) over (order by salary desc) from myemp limit 10;
select first_name, last_name, salary, nth_value(salary, 3) over(order by salalry desc) from myemp limit 10;
select first_name, last_name, salary, nth_value(salary, 3) over(order by salary desc) from myemp limit 10;
select * from myemp order by salary desc limit 10;
select * , dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * , dense_rank() over(partition by fiscal_year order by sale desc) as rnk, first_value(sales_employee) over (partition by fiscal_year order by sale desc) as name from sales;
select * from trains;
select *, lead(time,1) over (partition by train_id order by time) as next_stop;
select *, lead(time,1) over (partition by train_id order by time) as next_stop from trains;
with cte as (select *, lead(time,1) over (partition by train_id order by time) as next_stop from trains) select *, subtime(next_stop, time) as duration from cte;
select * from sales;
with cte as (select *, lag(sale,1) over (partition by sales_employee order by fiscal_year) as prev_sale from sales) select *, sale-prev_sale as difference from cte;
select * from student_d;
show tables;
select * from students_d;
select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo , 
lead(attendance,2) over (partition by student_id order by date_id) as day_after
from students_d;
select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo ,  lead(attendance,2) over (partition by student_id order by date_id) as day_after from students_d;
with cte as 
(select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo , 
lead(attendance,2) over (partition by student_id order by date_id) as day_after
from students_d)
select distinct(student_id) where attendance='p' and tomo = 'p' and day_after='p' from cte;
with cte as  (select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo ,  lead(attendance,2) over (partition by student_id order by date_id) as day_after from students_d) select distinct(student_id) where attendance='p' and tomo = 'p' and day_after='p' from cte;
with cte as 
(select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo , 
lead(attendance,2) over (partition by student_id order by date_id) as day_after
from students_d)
select distinct(student_id) from cte where attendance='p' and tomo = 'p' and day_after='p' ;
with cte as  (select *, lead(attendance,1) over (partition by student_id order by date_id) as tomo ,  lead(attendance,2) over (partition by student_id order by date_id) as day_after from students_d) select distinct(student_id) from cte where attendance='p' and tomo = 'p' and day_after='p';
exit
use testdb;
call test();
use practicedb;
create table patients(pid integer,
pname varchar(20),
dob date,
toa datetime);
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1, 'Tom', '1997-07-23', '2022-10-26 09:30:00');
insert into patients values(2, 'Harry', '2000-11-14', '2022-10-26 21:30:00');
select * from patients;
3 + 5
;
select 3 + 5;
select 6 * 789
;
select 5 + null;
select 5 = 3;
select 5 = 5;
select 5 = null;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sname name varchar(20);
select * from students;
desc students;
alter table students modify column course varchar(30);
desc students;
alter table students rename to mystudents;
show tables;
select * from students;
select * from mystudents;
rename table mystudents to students;
show tables;
select * from students;
create table mytab(id integer, name varchar(20));
show tables;
drop table mytab;
show tables;
exit
use practicedb;
select * from students;
insert into students values(3,'Peter','Mysql', 50);
insert into students values(4,'Jon', null, 89);
select * from students;
insert into students (sno, name, marks) values (5,'Lara', 77);
select * from students;
insert into students values(6,'Harry','Magic',90),(7,'Potter','Magic',87),(8, 'Tim','Dance',55);
select * from students;
update students set name ='Samanths' where sno = 1;
select * from students;
update students set course ='Analytics' where name ='peter';
select * from students;
update students set course = 'MySql' where course = null;
select * from students;
update students set course = 'MySql' where course is null;
select * from students;
update students set course ='Data Science', marks = 50, name="Larry' where sno = 5;
update students set course ='Data Science', marks = 50, name='Larry' where sno = 5;
select * from students;
update students set course ='Data Science';
select * from students;
delete from students where sno=8;
select * from students;
delete from students where marks is null;
select * from students;
delete from students ;
select * from students;
insert into students values(6,'Harry','Magic',90),(7,'Potter','Magic',87),(8, 'Tim','Dance',55);
select * from students;
truncate students;
select * from students;
select * from patients;
show tables;
select count(*) from myemp;
select count(*) from patients;
select * from myemp;
select * from myemp limit 5;
select first_name, last_name, job_id, salary from myemp limit 15;
select first_name, last_name, job_id, salary, salary*0.2 from myemp limit 15;
select first_name, last_name, job_id, salary, salary*0.2, salary+salary*.2 from myemp limit 15;
select first_name, last_name, job_id, salary, salary*0.2 as bonus, salary+salary*.2 as tot_sal from myemp limit 15;
select * from patients;
insert into students values(6,'Harry','Magic',90),(5,'Potter','Magic',87),(3, 'Tim','Dance',55);
select * from students;
select * from students order by marks;
select * from students order by marks desc;
select * from myemp order by hire_date;
select * from myemp order by hire_date desc;
select first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date;
select first_name, last_name, dep_id, hire_date from myemp order by dep_id, last_name;
select first_name, last_name, dep_id, salary from myemp order by dep_id, salary desc;
select * from myemp where dep_id = 100;
select * from myemp where salary > 15000;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where dep_id != 50;
select * from myemp where salary between 10000 and 15000;
select * from myemp where salary between 10000 and 17000;
select * from myemp order by hire_date;
select * from myemp where hire_date between '1989-01-01' and '1989-12-31';
select * from myemp where hire_date between '1998-01-01' and '1998-12-31';
select * from myemp where first_name like 'A%';
select * from myemp where first_name like '%A';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
exit
use practicedb;
select * from myemp limit 5;
select * from myemp where dep_id =80 and salary > 10000;
select * from myemp where year(hire_date) < 1978 or  salary > 10000;
select * from myemp where dep_id = 60 and dep_id = 40 and dep_id= 100;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id= 100;
select * from myemp where dep_id IN (60,40,100);
select * from myemp where dep_id NOT IN (60,40,100);
select * from movies;
select * from members;
select * from members inner join movies on movieid = id;
select first_name, last_name, title  from members inner join movies on movieid = id;
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select * from movies;
select * from members;
select * from myemp;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 15;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.emp_id, mgr.first_name, mgr.lastname 
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 20;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.emp_id, mgr.first_name, mgr.lastname  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.emp_id, mgr.first_name, mgr.last_name  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select * from movies;
select * from members
;
EXIT
use practicedb;
drop table students;
create table students(sno integer UNIQUE,
sname varchar(20) NOT NULL,
age integer CHECK(age > 18) ,
course varchar(20) );
create table students(sno integer UNIQUE, sname varchar(20) NOT NULL, age integer CHECK(age > 18) , course varchar(20) );
desc students;
insert into students values(100,'Thomas', 23,'Mysql');
select * from students;
insert into students values(100,'Jon', 32,'Analytics');
insert into students values(200,'Jon', 23,'Analytics');
select * from students;
insert into students values(300, null, 34,'Dance');
insert into students (sno,age, course) values(300, 34,'Dance');
alter table students modify column sname varchar(20) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sno,age, course) values(300, 34,'Dance');
select * from students;
insert into students (sno,age, course) values(400, 28,'Cooking');
select * from students;
insert into students values(500, null, 34,'Dance');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(
authorid integer PRIMARY KEY,
name varchar(50) );
create table authors( authorid integer PRIMARY KEY, name varchar(50) );
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(100),
aid integer,
FOREIGN KEY(aid) references authors(authorid)
on delete cascade
on update cascade);
create table books( bookid integer PRIMARY KEY, title varchar(100), aid integer, FOREIGN KEY(aid) references authors(authorid) on delete cascade on update cascade);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
exit
use practicedb;
create table people(pid integer PRIMARY KEY AUTO_INCREMENT,
name varchar(20),
age integer);
create table people(pid integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc people;
insert into people(name, age) values('Tom', 39),('Harry',66);
select * from people ;
insert into people values(5,'Larry', 45);
select * from people ;
insert into people(name, age) values('Tim', 11);
select * from people ;
insert into people(name, age) values('Peter', 45);
select * from people ;
rollback;
select * from people ;
set autocommit off;
set autocommit =0;
select * from people ;
insert into people(name, age) values('Pat',11);
select * from people ;
rollbaack;
rollback;
select * from people ;
insert into people(name, age) values('Pat',11);
select * from people ;
rollback;
select * from people ;
insert into people(name, age) values('Pat',11);
select * from people ;
commit;
rollback;
select * from people ;
set autocommit = 1;
select * from people ;
insert into people(name, age) values('Patrick', 33);
select * from people ;
rollback;
select * from people ;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
select * from my emp limit 10;
select * from myemp limit 10;
select last_name, email, job_id, salary from myemp limit 10;
create view myview as select last_name, email, job_id, salary from myemp;
select * from myview limit 20;
select * from movies;
select * from members;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = members.movieid;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from authors;
create view aview as select * from authors where authorid < 13;
select * from aview;
insert into aview values(15, 'Tom Hanks');
select * from aview;
select * from authors;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
drop view aview;
create view aview as select * from authors where authorid < 13 WITH CHECK OPTION;
insert into aview values(16, 'Tom Hanks');
insert into aview values(11, 'Tom Hanks');
select * from authors;
select * from aview;
exit
use practicedb;
show create table books;
show indexes from authors;
desc students;
show indexes from students;
use employees;
select count(*) from employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hired_date >= '2000-01-01';
select * from employees where hire_date >= '2000-01-01';
create index hidx on employee(hire_date);
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
use practicedb;
select hire_date, year(hire_date) from myemp limit 10;
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY) as res;
SELECT ADDDATE('2008-02-02', INTERVAL 31 DAY) as res;
SELECT ADDDATE('2008-02-02', INTERVAL 41 DAY) as res;
select * frrom patients;
select * from patients;
select adddate(dob, interval 20 day) as res from patients;
select adddate(dob, interval 60 day) as res from patients;
select now();
select * from patients;
insert into patients values(3,'Ram', '1990-08-17', now() );
select * from patients;
select dayname(dob), monthname(dob) , year(dob) from patients;
exit
use practicedb;
show tables;
select 8 from meals;
select * from meals;
select sum(rate) from meals;
select max(rate) from meals;
select min(rate) from meals;
select avg(rate) from meals;
select count(*) from meals;
show tables;
select * from products limit 5;
select max(MRP) from products;
select min(hire_date) from myemp;
select avg(salary) from myemp;
select round( avg(salary)) from myemp;
select round( avg(salary), 2) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id order by dep_id ;
select dep_id, avg(salary)  avg_sal from myemp group by dep_id  order by avg_sal ;
select dep_id, avg(salary)  avg_sal from myemp group by dep_id  order by avg_sal desc;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id , max(salary) from myemp group by dep_id, mgr_id;
select dep_id, count(*) from myemp group by dep_id;
select first_name, dep_id, count(*) from myemp group by dep_id;
select * from products limit 5;
show tables;
select * from meals;
select max(rate) from meals;
select first_name, last_name, dep_id, max(salary) over (partition by dep_id) as max_sal, min(salary) over (partition by dep_id) as min_sal from myemp;
select first_name, last_name, dep_id, max(salary) over (partition by dep_id) as max_sal, min(salary) over (partition by dep_id) as min_sal from myemp limit 15;
show tables;
create table marks(sno integer, sname varchar(20), marks integer);
insert into marks values(1,'Hugh', 78),(2,'Charles',88),(3,'Kate',45), (4,'Harry',78),(5,'Potter',88),(6,'George', 37),(7,'Jim',78);
select * from marks;
select sno, sname, marks, rank() over(order by marks desc);
select sno, sname, marks, rank() over(order by marks desc) from marks;
select * from marks;
select sno, sname, marks, rank() over(order by marks desc) as rnk from marks;
select sno, sname, marks, dense_rank() over(order by marks desc) as rnk from marks;
select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id;
select dep_id, max_sal, min_sal from ( select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) as t;
select dep_id, max_sal, min_sal from ( select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) as t where max_sal > 10000;
exit
use practicedb;
select * from marks ;
select sno, sname, marks , rank() over (order by marks desc) as rnk from marks;
select sno, sname, marks , dense_rank() over (order by marks desc) as rnk from marks;
select first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal, min(salary) over(partition by dep_id) as min_sal from myemp limit 15;
select first_name,last_name,dep_id,
max(salary) over w,
min(salary) over w,
avg(salary) over w,
count(salary) over w,
sum(salary) over w,
std(salary) over w 
from myemp
window w as (partition by dep_id);
select first_name,last_name,dep_id, max(salary) over w, min(salary) over w, avg(salary) over w, count(salary) over w, sum(salary) over w, std(salary) over w  from myemp window w as (partition by dep_id);
select first_name,last_name,dep_id, max(salary) over w, min(salary) over w, avg(salary) over w, count(salary) over w, sum(salary) over w, std(salary) over w  from myemp window w as (partition by dep_id) limit 10;
select first_name,last_name,dep_id,
max(salary) over w as max_sal,
min(salary) over w as min_sal,
avg(salary) over w as avg_sal,
count(salary) over w as count_emp,
sum(salary) over w as sum_sal,
std(salary) over w as std_sal 
from myemp
window w as (partition by dep_id);
select first_name,last_name,dep_id, max(salary) over w as max_sal, min(salary) over w as min_sal, avg(salary) over w as avg_sal, count(salary) over w as count_emp, sum(salary) over w as sum_sal, std(salary) over w as std_sal  from myemp window w as (partition by dep_id);
select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id;
select max_sal, min_sal, dep_id from (select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) as t
where max_sal > 14000;
select max_sal, min_sal, dep_id from (select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) as t where max_sal > 14000;
select max_sal, min_sal, dep_id from (select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) as t where max_sal > 10000;
with t as (select dep_id, max(salary) as max_sal, min(salary) as min_sal from myemp group by dep_id) select max_sal, min_sal, dep_id from t where max_sal > 10000;
select * from marks;
select sno, sname , marks, dense_rank over (order by marks desc ) as rnk from marks;
select sno, sname , marks, dense_rank() over (order by marks desc ) as rnk from marks;
select * from marks;
select sno, sname , marks, dense_rank() over (order by marks desc ) as rnk from marks;
select sname from ( select sno, sname , marks, dense_rank() over (order by marks desc ) as rnk from marks) as t where rnk = 3;
with t as (select sno, sname , marks, dense_rank() over (order by marks desc ) as rnk from marks) select sname from t where rnk = 3;
show tables;
select * from sales;
select sales_employee, fiscal_year, sale,
dense_rank() over (partition by fiscal_year order by sales desc) as rnk 
from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sales desc) as rnk  from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale desc) as rnk  from sales;
select * from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale desc) as rnk  from sales;
select * from myemp order by salary desc;
select first_name, last_name , salary , dense_rank() over(order by salary desc) as sal from myemp;
with t as (select first_name, last_name , salary , dense_rank() over(order by salary desc) as sal from myemp) select first_name, last_name from t where sal = 2;
with t as (select first_name, last_name , salary , dense_rank() over(order by salary desc) as sal from myemp) select first_name, last_name from t where sal = 3;
select * from trains;
select subtime('11:00:00', '10:54:00') as diff;
select * from trains;
delete from trains;
insert into trains values (110,'San Francisco', '10:00:00'),
(110,'Redwood City',  '10:54:00'),
(110,'Palo Alto','11:02:00'),
(110 ,'San Jose', '12:35:00'),
(120,'San Francisco','11:00:00'),
(120 ,'Palo Alto', '12:49:00'),
(120,'San Jose', '13:30:00');
insert into trains values (110,'San Francisco', '10:00:00'), (110,'Redwood City',  '10:54:00'), (110,'Palo Alto','11:02:00'), (110 ,'San Jose', '12:35:00'), (120,'San Francisco','11:00:00'), (120 ,'Palo Alto', '12:49:00'), (120,'San Jose', '13:30:00');
select * from trains;
select train_id, station, time, lead(time,1) over(partition by train_id order by time asc) as next_time from trains;
with t as (select train_id, station, time, lead(time,1) over(partition by train_id order by time asc) as next_time from trains)
select train_id, station, time, next_time, subtime(next_time, time) as travel_time from t;
with t as (select train_id, station, time, lead(time,1) over(partition by train_id order by time asc) as next_time from trains) select train_id, station, time, next_time, subtime(next_time, time) as travel_time from t;
show tables;
select * from students_d;
delete from students_d;
insert into students_d values('2022-02-14' ,     1,'p'),
('2022-02-14' ,     2,'p'),
('2022-02-14' ,     3,'a'),
('2022-02-14' ,     4,'p'),
('2022-02-15' ,     1,'p'),
('2022-02-15' ,     2,'p'),
('2022-02-15' ,     3,'a'),
('2022-02-15' ,     4,'p'),
('2022-02-16' ,     1,'p'),
('2022-02-16' ,     2,'p'),
('2022-02-16' ,     3,'a'),
('2022-02-16' ,     4,'p'),
('2022-02-17' ,     1,'p'),
('2022-02-17' ,     2,'a'),
('2022-02-17' ,    3,'p'),
('2022-02-17' ,     4,'p');
insert into students_d values('2022-02-14' ,     1,'p'), ('2022-02-14' ,     2,'p'), ('2022-02-14' ,     3,'a'), ('2022-02-14' ,     4,'p'), ('2022-02-15' ,     1,'p'), ('2022-02-15' ,     2,'p'), ('2022-02-15' ,     3,'a'), ('2022-02-15' ,     4,'p'), ('2022-02-16' ,     1,'p'), ('2022-02-16' ,     2,'p'), ('2022-02-16' ,     3,'a'), ('2022-02-16' ,     4,'p'), ('2022-02-17' ,     1,'p'), ('2022-02-17' ,     2,'a'), ('2022-02-17' ,    3,'p'), ('2022-02-17' ,     4,'p');
select * from students_d;
exit
us practicedb;
use practicedb;
select * from students_d;
select date_id, student_id, attendance ,  lead(attendance, 1) over (partition by student_id order by date_id) as t+ 1, 
lead(attendance, 2) over (partition by student_id order by date_id) as t+2 from students_d;
select date_id, student_id, attendance ,  lead(attendance, 1) over (partition by student_id order by date_id) as t+ 1,  lead(attendance, 2) over (partition by student_id order by date_id) as t+2 from students_d;
select date_id, student_id, attendance ,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance, 2) over (partition by student_id order by date_id) as 't+2' from students_d;
select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance, 2) over (partition by student_id order by date_id) as 't+2' from students_d;
with t as (select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance,
select * from students_d;
with t as (select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance, select * from students_d;
with tab as (select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance,2) over (partition by student_id order by date_id) as 't+2' from students_d) select student_id from t where t = 'p' and 't+1'= 'p' and 't+2' = 'p' from tab;
with tab as (select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as 't+1',  lead(attendance,2) over (partition by student_id order by date_id) as 't+2' from students_d) select student_id from tab where t = 'p' and 't+1'= 'p' and 't+2' = 'p' ;
with tab as (
select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select student_id from tab where t = 'p' and t1 =p  and t2= 'p' ;
with tab as ( select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select student_id from tab where t = 'p' and t1 =p  and t2= 'p';
with tab as (
select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select student_id from tab where t = 'p' and t1 = 'p'  and t2= 'p' ;
with tab as ( select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select student_id from tab where t = 'p' and t1 = 'p'  and t2= 'p';
with tab as (
select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select distinct student_id from tab where t = 'p' and t1 = 'p'  and t2= 'p' ;
with tab as ( select date_id, student_id, attendance  as t,  lead(attendance, 1) over (partition by student_id order by date_id) as t1,  lead(attendance,2) over (partition by student_id order by date_id) as t2 from students_d) select distinct student_id from tab where t = 'p' and t1 = 'p'  and t2= 'p';
select * from students_d;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from person;
select distinct fname from person;
select distinct lname from person;
select distinct fname, lname from person;
call myproc();
select * from books;
call myproc();
call myproc(11);
call myproc2();
call myproc2('Tom');
call myproc2('jom');
call myproc2(7);
call myproc2(-7);
call myproc2(0);
call proc_if(1);
call proc_if(0);
exit
use practicedb;
call proc_simpleloop();
call proc_simpleloop(2);
call proc_simpleloop(7);
call proc_repeat(5);
call proc_repeat(4);
call proc_while(2);
call proc_while(3);
select * from books;
call proc_lclvar();
select title from books;
call proc_lclvar();
select * from marks;
select * from books;
call proc_lclvar(13);
select * from books;
select * from marks;
call new_procedure();
select * from marks;
call students_grade(1);
call students_gradae(1);
call student_gradae(1);
select * from marks;
call student_gradae(1);
call student_gradae(5);
call student_gradae(6);
exit
use practicedb;
select * from marks;
call proc_cursor();
 select * from products limit 5;
 select * from products limit 15;
desc orders;
select * from orders;
 select * from products limit 15;
call stock();
select * from orders;
 select * from products ;
 select * from products limit 15;
select * from orders;
select lower(vendor) from orders;
select * from marks;
select left(sname,1) from marks;
select * from marks where left(sname,1) in ('h','k');
select * from marks;
select left(sname,2) from marks;
select right(sname,1) from marks;
select * from myemp limit 10;
select first_name, hire_date, year(hire_date) from myemp limit 10;
select first_name, hire_date, experience(emp_id) from myemp limit 10;
select first_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
desc book_sales;
update books set sales = sales + 3 where bookid = 7;
select * from books;
desc book_sales;
select * from book_sales;
update books set sales = sales + 6 where bookid = 12;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 7;
select * from books;
select * from book_sales;
exit
use practicedb;
select * from students;
desc students;
show tables;
exit
use practicedb;
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
show tables;
insert into patients values(1, 'Harry', '1997-11-14', '2022-11-15 08:30:00');
insert into patients values(2,'Potter', '1990-03-27', '2022-11-15 20:30:00');
select * from patients;
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
create table if not exists patients(pid integer);
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid sno integer;
select * from students;
desc students;
alter table students modify column sname varchar(20);
desc students;
show tables;
alter table students rename to mystudents;
show tables;
select * from mystudents;
select * from students;
rename table mystudents students;
rename table mystudents to students;
show tables;
drop table tt;
show tables;
select * from students;
insert into students values(300,'Larry', 'Dance', 78);
insert into students values(400,'Kate', null, 87);
select * from students;
insert into students (sid,sname,marks) values(500,'Meghan',55);
insert into students (sno,sname,marks) values(500,'Meghan',55);
select * from students;
insert into students values(600,'Harry','Magic', 89),(700,'Potter','Magic', 65),(800,'Lara','Dance',77);
select * from students;
exit
use practicedb;
select * from students;
update students set course = 'Music' where sno=300;
select * from students;
set sql_safe_updates = 0;
update students
set marks = 85
where sname = 'potter';
update students set marks = 85 where sname = 'potter';
select * from students;
select 5 + 6;
select 456*895;
select 5 + 6 as result;
select 5 + null as res;
select 5 = 5;
select 5 = 4 as res;
select 5 = null as res;
select * from students;
update students set marks = 0 where marks is null;
select * from students;
update students set course='Mysql', marks=93 where sno=600;
select * from students;
update students set course = 'Analytics', marks = 0 where course is null;
select * from students;
update students set course = 'Analytics';
select * from students;
delete from students where marks=0;
select * from students;
delete from students where sname = 'lara';
select * from students;
delete from students;
select * from students;
insert into students values(600,'Harry','Magic', 89),(700,'Potter','Magic', 65),(800,'Lara','Dance',77);
select * from students;
truncate students;
select * from students;
show create table students;
select * from myemp limit 5;
select * from myemp ;
select * from myemp limit 5;
select first_name, last_name, job_id, salary from myemp limit 10;
select first_name, last_name, job_id, salary, salary*0.3 from myemp limit 10;
select first_name, last_name, job_id, salary, salary*0.3 as bonus from myemp limit 10;
select first_name as fname, last_name as lname, job_id as role, salary, salary*0.3 as bonus from myemp limit 10;
select * from myemp limit 10;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from myemp limit 10;
select distinct job_id from myemp;
select * from person;
select distinct fname, lname from person;
select * from myemp limit 15;
select * from myemp order by dep_id ;
select * from myemp order by dep_id desc;
select * from myemp order by salary desc;
select * from myemp order by  last_name;
select * from myemp order by hire_date desc;
select * from myemp order by dep_id, salary;
select first_name, last_name, dep_id, salary  from myemp order by dep_id, salary;
select first_name, last_name, dep_id, salary  from myemp order by dep_id, salary desc;
exit
use practicedb;
select * from myemp where salary  > 10000;
select * from myemp where salary  >= 10000;
select * from myemp where hire_date > '2010-01-01';
select * from myemp where hire_date >= '2010-01-01';
select * from myemp where hire_date >= 2010-01-01;
select * from myemp where hire_date >= '2010-01-01';
select * from myemp where dep_id != 80;
select * from myemp where salary > 10000 and dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 60;
select * from myemp where dep_id != 80;
select * from myemp where dep_id=40 or dep_id = 20 or dep_id = 10;
select * from myemp where dep_id in (40,20,10);
select * from myemp where job_id in ('IT_PROG', 'MK_REP');
select * from myemp where salary between 10000 and 15000;
select * from myemp where first_name like 'A%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
select distinct first_name from myemp where first_name like 'J____';
select 10%2 as res;
select 37 % 4 as res;
select 37 / 4 as res;
select 37 % 4 as res;
select * from myemp where emp_id % 2 = 0;
select first_name, hire_date, year(hire_date) from myemp limit 10;
select avg(salary) from myemp; 
select max(salary) from myemp;
select count(*) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, count(salary) from myemp group by dep_id;
select dep_id, count(*) from myemp group by dep_id;
select dep_id, count(*) from myemp group by dep_id order by dep_id;
select job_id, count(*) from myemp group by job_id ;
select job_id, count(*) from myemp group by job_id order by count(*) desc;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id, max(salary) from myemp group by dep_id;
select first_name, dep_id, max(salary) from myemp group by dep_id;
select max(salary) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id having dep_id = 60;
select dep_id, max(salary) from myemp group by dep_id having dep_id IN (100,50,30);
select * from cats;
select breed, avg(weight) from cats group by breed;
select color, count(*) from cats group by color having color in ('black','brown');
exit
use practicedb;
select color, count(*) from cats group by color where color in ('black','brown');
select * from movies;
select * from members;
select * from members inner join movies on movieid = id;
select first_ name, last_name, tile , category  from members inner join movies on movieid = id where category = 'animations';
select first_name, last_name, title , category  from members inner join movies on movieid = id where category = 'animations';
select * from movies;
select * from members;
select * from movies left join members on movieid = id ;
select * from movies right join members on movieid = id ;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
select mealname, rate, drinkname from meals cross join drinks;
select m.mealname, m.rate, d.drinkname, d.rate from meals as m cross join drinks as d;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, drinkname, rate from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select * from movies left join members on movieid = id ;
select first_name, last_name, title, category from movies lect join members on movieid = id;
select first_name, last_name, title, category from movies left join members on movieid = id;
select mm.first_name, mm.last_name, mv.title, mv.category from movies as mv left join members as mm on mv.id = mm.movieid;
select emp_id, first_name, last_name, mgr_id from myemp limit 15;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
exit
use practicedb;
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(20) NOT NULL, 
age integer CHECK(age > 18),
course varchar(20) );
create table students( sid integer UNIQUE, sname varchar(20) NOT NULL,  age integer CHECK(age > 18), course varchar(20) );
desc students;
insert into students values(1,'Tony', 23, 'Mysql');
insert into students values(1,'Tommy', 23, 'Mysql');
insert into students values(2,'Tommy', 23, 'Mysql');
select * from students;
insert into students values(3,'Maria', 17, 'Analytics');
insert into students values(3,'Maria', 19, 'Analytics');
select * from students;
insert into students values(4,null,45,'Dance');
insert into students (sid, age,course) values(5,34,'Magic');
desc students;
alter table students modify column sname varchar(20) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students values(4,null,45,'Dance');
insert into students (sid, age,course) values(5,34,'Magic');
select * from students;
select * from authors;
select * from books;
drop table books;
drop table authors;
create table authors(
aid integer PRIMARY KEY,
name varchar(50) );
create table authors( aid integer PRIMARY KEY, name varchar(50) );
desc authors;
create table books(
bid integer PRIMARY KEY,
title varchar(100),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(aid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bid integer PRIMARY KEY, title varchar(100), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(aid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where aid = 1;
select * from authors;
select * from books;
update authors set aid = 80 where aid = 8;
select * from authors;
select * from books;
create table test( id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc test;
insert into test (name, age) values('Tom', 23);
select * from test;
insert into test (name, age) values('Tim',11),('Jim', 20);
select * from test;
insert into test values(10,'Larry', 22);
select * from test;
insert into test (name, age) values('Harry', 67);
select * from test;
delete from test;
select * from test;
insert into test (name, age) values('Harry', 67);
select * from test;
truncate test;
select * from test;
insert into test (name, age) values('Harry', 67);
select * from test;
exit
use practicedb;
select * from students;
insert into students (6,'Tom',33,'Mysql');
insert into students values (6,'Tom',33,'Mysql');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values (7,'Kate', 19,'Math');
select * from students;
rollback;
select * from students;
insert into students values (7,'Kate', 19,'Math');
select * from students;
commit;
rollback;
select * from students;
set autocommit = 1;
insert into students values (8,'Bill',43,'Mysql');
select * from students;
rollback;
select * from students;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
use employees;
select count(*) from employees;
select * from employees limit 10;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
exit
use practicedb;
desc students;
show indexes from students;
desc authors;
show indexes from authors;
select * from myemp;
select first_name, last_name, salary , job_id from myemp limit 10;
create view myview select first_name, last_name, salary , job_id from myemp;
create view myview as select first_name, last_name, salary , job_id from myemp;
select first_name, last_name, salary , job_id from myemp limit 10;
select * from myview limit 10;
select * from movies;
select * from members;
select mm.first_name, mm.last_name, mv.title, mv.category from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mv.category, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rental as select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rental;
show tables;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 15;
create view aview as select * from authors where aid < 15;
select * from aview;
insert into aview values(8, 'Tom Hanks');
select * from aview;
select * from authors;
select * from aview;
insert into aview values(25,'Jon Hamm');
select * from authors;
select * from aview;
drop view aview
;
create view aview as select * from authors where aid < 15 WITH CHECK OPTION;
insert into aview values(30,'TIM HOOKS');
insert into aview values(13,'TIM HOOKS');
drop view aview;
create view aview as select * from authors where aid < 15 WITH CHECK OPTION;
select * from aview;
call myproc();
call myproc(6);
call myproc(13);
call myproc(10);
exit
use practicedb;
call test();
call test(22);
select * from books;
call myproc(5);
call myproc(10);
select title, aid from books where bid = 10;
select title, authorid from books where bid = 10;
call myproc(10);
call myproc(7);
select * from myemp limit 10;
call bonus(100);
call bonus(101);
call bonus(104);
select * from myemp limit 10;
call bonus(101);
call bonus(103);
call bonus(107);
call proc_simpleloop();
call proc_simpleloop(3);
call proc_simpleloop(7);
call proc_repeat(5);
call proc_repeat(3);
call proc_while()
;
call proc_while(4);
exit
use practicedb;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from products;
select * from orders;
select * from products;
select * from products limit 10;
desc orders;
call stock_chk();
select * from orders;
select * from books;
desc book_sales;
select now() as msg;
select * from books_sales;
select * from book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bid = 7;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 12 where bid = 7;
select * from books;
select * from book_sales;
exit
use practicedb;
select * from patients;
select dob, year(dob) from patients;
update patients set pname = 'Tim' where year(dob) > 2000;
select adddate('2008-02-02', interval 31 day) as msg;
select adddate('2009-02-02', interval 31 day) as msg;
select adddate('2009-02-02', interval 1 month) as msg;
select adddate('2009-02-02', interval 1 week) as msg;
select adddate('2009-02-02', interval 3 week) as msg;
select subdate('2009-02-02', interval 3 week) as msg;
select adddate(dob, interval 31 day) from patients;
select dob, adddate(dob, interval 31 day) as new_dob from patients;
select dob, year(dob) from patients;
select dob, year(dob), month(dob) from patients;
select dob, year(dob), month(dob), day(dob) from patients;
select dob, year(dob), monthname(dob), dayname(dob) from patients;
select week('2022-12-02') as msg;
select current_date(), current_time(), current_timestamp();
select lcase(pname) from patients;
select * from patients;
select lower(pname) from patients;
select upper(pname) from patients;
select concat(first_name, ' ', last_name) as full_name from myemp limit 10;
select concat(first_name, last_name) as full_name from myemp limit 10;
select first_name, left(first_name, 1) from myemp limit 10;
select first_name, left(first_name, 2) from myemp limit 10;
select first_name, right(first_name, 2) from myemp limit 10;
select first_name from myemp where left(first_name, 1) in ('a','k','n');
select first_name from myemp where right(first_name, 1) in ('a','k','n');
select first_name, length(first_name) from myemp limit 10;
select first_name, length(first_name) as len from myemp order by len desc;
select * from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) from myemp limit 10;
SET GLOBAL log_bin_trust_function_creators = 1; 
select first_name, last_name, hire_date, experience(emp_id) as exp from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) as exp from myemp where experience(emp_id) < 10;
show tables;
select * from employees;
select dep_id, max(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, salary, max(salary) over (patition by dep_id) as max_sal from myemp limit 20;
select first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp limit 20;
select first_name, last_name, job_id, salary, max(salary) over ( partition by job_id) as max_sal from myemp limit 20;
select first_name, last_name, dep_id, salary, count(*) over (patition by dep_id) as max_ppl from myemp limit 20;
select first_name, last_name, dep_id, salary, count(*) over (partition by dep_id) as max_ppl from myemp limit 20;
exit
use practicedb;
select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal from myemp limit 15;
select * from books;
select title, authorid from books;
select * from (select title,authorid from books) as t;
with t as (select title, authorid from books)
select * from t;
with t as (select title, authorid from books) select * from t;
select first_name, last_name, dep_id, salary from myemp where dep_id in (40,80,50);
with cte as (select first_name, last_name, dep_id, salary from myemp where dep_id in (40,80,50))
select * from cte where salary > 8000;
with cte as (select first_name, last_name, dep_id, salary from myemp where dep_id in (40,80,50)) select * from cte where salary > 8000;
select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal from myemp limit 15;
with cte as (select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal from myemp)
select * from cte where salary = max_sal;
with cte as (select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal from myemp) select * from cte where salary = max_sal;
select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal from myemp limit 15;
select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal,
min(salary) over (partition by dep_id) as min_sal,
avg(salary) over(partition by dep_id ) as avg_sal
from myemp;
select first_name, last_name, dep_id, salary , max(salary) over (partition by dep_id) as max_sal, min(salary) over (partition by dep_id) as min_sal, avg(salary) over(partition by dep_id ) as avg_sal from myemp;
select first_name, last_name, dep_id, salary , 
max(salary) over w as max_sal,
min(salary) over w as min_sal,
avg(salary) over w as avg_sal
from myemp
window w as (partition by dep_id);
select first_name, last_name, dep_id, salary ,  max(salary) over w as max_sal, min(salary) over w as min_sal, avg(salary) over w as avg_sal from myemp window w as (partition by dep_id);
select first_name, last_name, dep_id, salary , 
max(salary) over w as max_sal,
min(salary) over w as min_sal,
avg(salary) over w as avg_sal
from myemp
window w as (partition by dep_id);
select first_name, last_name, dep_id, salary ,  max(salary) over w as max_sal, min(salary) over w as min_sal, avg(salary) over w as avg_sal from myemp window w as (partition by dep_id);
select first_name, last_name, dep_id, salary , 
max(salary) over w as max_sal,
min(salary) over w as min_sal,
avg(salary) over w as avg_sal
from myemp
window w as (partition by dep_id);
select first_name, last_name, dep_id, salary ,  max(salary) over w as max_sal, min(salary) over w as min_sal, avg(salary) over w as avg_sal from myemp window w as (partition by dep_id);
select first_name, last_name, dep_id, salary , 
max(salary) over w as max_sal,
min(salary) over w as min_sal,
avg(salary) over w as avg_sal
from myemp
window w as (partition by dep_id);
select first_name, last_name, dep_id, salary ,  max(salary) over w as max_sal, min(salary) over w as min_sal, avg(salary) over w as avg_sal from myemp window w as (partition by dep_id);
select * from marks;
show tables;
create table marks(sid integer, name varchar(20), marks integer);
insert into marks values(1,'Lara',  45),(2,'Harry',37),(3,'Tim',45),(4,'Jim', 76),(5,'Jon',87),(6,'Kate',76);
select * from marks;
select sid,name, marks, rank() over( order by marks desc);
select sid,name, marks, rank() over( order by marks desc) from marks;
select sid,name, marks, rank() over( order by marks desc) as rnk from marks;
select sid,name, marks, dense_rank() over( order by marks desc) as rnk from marks;
select first_name, last_name, salary, dense_rank() over( order by salary desc) as rnk from myemp;
with cte as (select first_name, last_name, salary, dense_rank() over( order by salary desc) as rnk from myemp)
select * from cte where rnk = 3;
with cte as (select first_name, last_name, salary, dense_rank() over( order by salary desc) as rnk from myemp) select * from cte where rnk = 3;
with cte as (select first_name, last_name, salary, dense_rank() over( order by salary desc) as rnk from myemp) select * from cte where rnk = 2;
select * from sales;
with s as (select sales_employee, fiscal_year, sale , dense_rank() over ( order by sale desc) as rnk from sales)
select * from s order by fiscal_year;
with s as (select sales_employee, fiscal_year, sale , dense_rank() over ( order by sale desc) as rnk from sales) select * from s order by fiscal_year;
with s as (select sales_employee, fiscal_year, sale , dense_rank() over ( partition by fiscal_year order by sale desc) as rnk from sales) select * from s order by fiscal_year;
with s as (select sales_employee, fiscal_year, sale , dense_rank() over ( partition by fiscal_year order by sale desc) as rnk from sales) select * from s where rnk = 1;
select * from cats;
select name, breed, color, age, weight, dense_rank() over (partition by breed order by weight) from cats;
select name, breed, color, age, weight, dense_rank() over (partition by breed order by weight) as rnk from cats;
select name, breed, color, age, weight, dense_rank() over (partition by breed order by weight desc) as rnk from cats;
select * from marks;
select *, first_value(marks) over( order by marks desc) as mrk from marks;
select *, first_value(name) over( order by marks desc) as mrk from marks;
select *, last_value(name) over( order by marks desc) as mrk from marks;
select *, nth_value(name,2) over( order by marks desc) as mrk from marks;
select *, nth_value(name,3) over( order by marks desc) as mrk from marks;
select *  from marks order by marks desc;
select * from trains;
select *, lead(time,1) over (partition by train_id order by time) as next_station from trains;
with cte as (select *, lead(time,1) over (partition by train_id order by time) as next_station from trains)
select *, subtime(next_station, time) as journey_time from cte;
with cte as (select *, lead(time,1) over (partition by train_id order by time) as next_station from trains) select *, subtime(next_station, time) as journey_time from cte;
select * from students_d;
select *, lead(attendance,1) over(partition by student_id order by date_id) as next_day, lead(attendance,2) over(partition by student_id order by date_id) as day_after from students_d;
exit
use practicedb;
select * from books;
call my_proc();
call simple_loop();
use learndb;
call simple_loop();
call simple_loop(2);
call simple_loop(3);
call repeat_loop();
call repeat_loop(2);
call repeat_loop(3);
call repeat_loop(4);
call while_loop(2);
call while_loop(3);
call while_loop(4);
exit
use learndb;
select * from books;
call proc_cursors();
select * from products limit 10;
select * from orders;
desc orders;
alter table orders add column qty integer;
select * from products limit 10;
desc orders;
select * from orders;
call orders();
select * from orders;
select first_name, last_name, salary, dep_id from myemp;
select * from myemp;
select first_name, last_name, salary, dep_id from myemp;
select * from (select first_name, last_name, salary from myemp) as t;
select * from myemp limit 10;
select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp limit 10;
select * from (select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp) as t where rnk = 3;
select * from (select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp) as t where rnk = 6;
with t as ((select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp)
select * from t where rnk = 3;
with t as ((select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from t where rnk = 3;
with t as (select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from t where rnk = 3;
select first_name, last_name,salary, dense_rank() over (order by salary desc) as rnk from myemp limit 10;
show databases;
desc students;
use practicedb;
desc students;
select * from students;
insert into students values(200,'Mary', 25,'Analytics');
select * from students;
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1,'Harry', '1999-09-12', '2023-01-08 08:30:00');
insert into patients values(2,'Potter','2000-01-25', '2023-01-08 20:30:00');
select * from patients;
exit
use practicedb;
select * from patients;
select 5 + 7 as result;
select 65 * 87 as res;
select 5 + null as result;
select 2 = 2 as result;
select 2 = 3 as result;
select 2 = null as result;
create table patients(id integer);
create table if not exists patients(id integer);
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(255);
desc students;
show tables;
alter table students rename to mystudents;
show tables;
select * from students;
select * from mystudents;
rename table mystudents to students;
show tables;
create table mytab(id integer, name char(20));
show tables;
drop table mytab;
show tables;
select * from students;
insert into students values(300,'James','Data Science', 79);
insert into students values(400, 'Mona', null, 88);
select * from students;
insert into students (std_id, sname,marks)
values(500,'Tim',85);
insert into students (std_id, sname,marks) values(500,'Tim',85);
select * from students;
insert into students values (600,'Harry','Magic',90),(700,'Potter','Magic',88),(800,'Hugh','Acting',77);
select * from students;
update students set sname = 'Jonathan' where std_id = 100;
select * from students;
update students set marks = 75 where sname = 'mary';
select * from students;
update students set course = 'Mysql' where course = null;
select * from students;
update students set course = 'Mysql' where course is null;
select * from students;
update students set sname='Monalisa', course='Analytics', marks=99 where std_id = 400;
select * from students;
update students set course = 'Mysql';
select * from students;
delete from students where std_id = 300;
select * from students;
delete from students;
select * from students;
exit
use practicedb;
select * from students;
insert into students values (600,'Harry','Magic',90),(700,'Potter','Magic',88),(800,'Hugh','Acting',77);
select * from students;
truncate students;
select * from students;
show tables;
select * from myemp;
select * from myemp limit 5;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select emp_id, first_name, last_name, job_id , salary, salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, job_id , salary, salary*0.2 , salary+salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, job_id , salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 15;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from myemp limit 15;
select distinct job_id from myemp;
select * from person;
select distinct fname,lname from person;
select * from myemp limit 15;
select * from students;
select * from patients;
select * from myemp order by dep_id limit 20;
select * from myemp order by dep_id desc limit 20;
select * from myemp order by dep_id desc ;
select * from myemp order by hire_date;
select emp_id, first_name, last_name, dep_id from myemp order by dep_id, first_name;
select * from cats;
select * from cats order by weight;
select * from myemp where emp_id = 150;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >'2016-01-01';
select * from myemp where hire_date >='2016-01-01';
select * from myemp where hire_date >='2015-01-01';
select * from myemp where dep_id <> 80;
select * from myemp where salary > 8000  and dep_id = 80 from myemp;
select * from myemp where salary > 8000  and dep_id = 80 ;
select * from myemp where salary > 8000  or dep_id = 80 ;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id = 30;
select * from myemp where dep_id in (30,40,60);
select * from myemp where salary between 10000 and 15000;
select * from myemp where hire_date between '1987-01-01' and '1987-12-31'
;
exit
use practicedb;
select * from myemp where first_name like 'a%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '% %';
select * from myemp where first_name like 'j____';
select distinct first_name from myemp where first_name like 'j____';
select hire_date , yera(hire_date) from myemp limit 10;
select hire_date , year(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select count(salary) from myemp;
select count(*) from myemp;
select min(salary), max(salary) from myemp;
select distinct dep_id from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select * from cats;
select breed, max(weight) from cats group by breed;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id ;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id in (100,70);
select dep_id, avg(salary) from myemp group by dep_id;
select first_name,  dep_id, avg(salary) from myemp group by dep_id;
select * from movies;
select * from members;
select * from movies inner join members on movied=id;
select * from movies inner join members on movieid=id;
select * from movies inner join members on movieid=id where category='animations';
select * from movies;
select * from members;
select * from movies left join members on movieid=id where category='animations';
select * from movies left join members on movieid=id;
select * from movies;
select * from members;
select * from movies right join members on movieid=id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate, drinkname from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
,0c
;
select mealname, meals.rate, drinkname from meals cross join drinks;
select m.mealname, m.rate, d.drinkname from meals as m cross join drinks as d;
select id, title, first_name, last_name from movies left join members on movieid=id;
select mv.id, mv.title, mm.first_name, mm.last_name 
from movies as mv
left join members as mm
on mm.movieid = mv.id;
select mv.id, mv.title, mm.first_name, mm.last_name  from movies as mv left join members as mm on mm.movieid = mv.id;
use practicedb;
select * from myemp limit 10;
select * from movies;
select * from members;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name as emp_fname, emp.last_name emp_lnmae, mgr.first_name mgr_fname, mgr.last_name as mgr_lname from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from movies;
select * from members;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age > 18),
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
desc students;
insert into students values(100,'Lara',23,'Mysql');
select * from students;
insert into students values(100,'Jon', 23, 'Mysql');
insert into students values(200,'Jon', 23, 'Mysql');
select * from students;
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students values(300, null,25,'DS');
insert into students (sid, age, course) values(300,25,'Mysql');
desc students;
select * from students;
insert into students values(400,'Baby',13,'Mysql');
insert into students values(400,'Baby',23,'Mysql');
select * from students;
show tables;
select * from cats;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(100),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(100), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
exit
use practicedb;
create table myproducts(pid integer primary key auto_increment,
pname varchar(50),
description varchar(255),
qtyinstock integer);
create table myproducts(pid integer primary key auto_increment, pname varchar(50), description varchar(255), qtyinstock integer);
desc myproducst;
desc myproducts;
insert into myproducts (pname, description,qtyinstock) values('Pendrive', 'Very good drive', 200),('Ear Phones','High Clarity',100),('Mouse','Wireless Mouse', 50);
select * from myproducts;
create table myorders(orderid integer primary key auto_increment, pid integer, qty_ord integer, ship_date date,
foreign key(pid) references myproduct(pid) on delete cascade on update cascade);
create table myorders(orderid integer primary key auto_increment, pid integer, qty_ord integer, ship_date date, foreign key(pid) references myproduct(pid) on delete cascade on update cascade);
create table myorders(orderid integer primary key auto_increment, pid integer, qty_ord integer, ship_date date, foreign key(pid) references myproducts(pid) on delete cascade on update cascade);
desc myproducts;
desc myorders;
show create table myorders;
show create table students;
desc myorders;
select * from products;
desc myorders;
select * from myproducts;
insert into orders (pid,qty_ord,ship_date) values(2,6,'2023-01-17'),(1,3,'2023-01-24'),(3,1,'2023-02-01'),(2,3,'2023-01-26');
insert into myorders (pid,qty_ord,ship_date) values(2,6,'2023-01-17'),(1,3,'2023-01-24'),(3,1,'2023-02-01'),(2,3,'2023-01-26');
select * from myproducts;
select * from myorders;
delete from myproducts where pid = 2;
select * from myproducts;
select * from myorders;
create table mytab(id integer primary key auto_increment,
name varchar(20));
create table mytab(id integer primary key auto_increment, name varchar(20));
insert into mytab (name) values('Tom');
select * from mytab;
insert into mytab (name) values('Jon');
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name) values('Jon');
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name) values('Jon');
select * from mytab;
insert into mytab (name) values('Tom');
select * from mytab;
insert into mytab values(5,'Jim');
select * from mytab;
insert into mytab (name) values('Tim');
select * from mytab;
use practicedb
show create table authors;
show indexes from students;
desc authors;
show indexes from authors;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
show indexes from employees;
select * from employees where hire_date >= '2000-01-01';
u
;
use practicedb;
select * from myemp limit 10;
select emp_id, last_name, salary, salary*0.2 as bonus, salary*0.2 + salary as total from myemp limitb10;
select emp_id, last_name, salary, salary*0.2 as bonus, salary*0.2 + salary as total from myemp limit 10;
create view bonus as select emp_id, last_name, salary, salary*0.2 as bonus, salary*0.2 + salary as total from myemp;
select * from bonus limit 10;
show tables;
select * from movies;
select * from members;
select mv.title, mv.category, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(18,'Tom Cruise');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 15 with check option;
insert into aview values(19,'Jon Hamm');
insert into aview values(9,'Jon Hamm');
exit
use practicedb;
select * from meals;
select * from drinks;
select * from drinks cross join meals;
select drinkname, mealname, rate from meals cross join drinks;
select drinkname, mealname, meals.rate from meals cross join drinks;
select drinkname, mealname, m.rate from meals m cross join drinks d;
select drinkname, mealname, m.rate+d.rate as total from meals m cross join drinks d;
call myproc();
select * from books;
call myproc();
call myproc(5);
call myproc(7);
call myproc();
select * from products;
select * from products limit 5;
desc products;
select qtyinstock from products where pcode = 's10_1678';
call check_stock('s10_1678');
call week_days(3);
call week_days(7);
call week_days(17);
call simple_loop();
call simple_loop(3);
call simple_loop(2);
 call repeat_loop();
 call repeat_loop(4);
call while_loop();
call while_loop(2);
select * from authors;
select * from x;
exit
use practicedb;
select * from students;
insert into students values(500,'Tony',22,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(600, 'Patty',33,'Cooking');
select * from students;
rollback;
select * from students;
insert into students values(600, 'Patty',33,'Cooking');
commit;
select * from students;
rollback;
select * from students;
set autocommit = 1;
create table tt (id char);
desc tt;
insert into tt values('a');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
call myproc();
use testdb;
call myproc();
call myproc(5);
call myproc(7);
call myproc(9);
select * from products limit 5;
use practicedb;
select * from myproducts;
call chk_stock(1);
call chk_stock(3);
call chk_stock(30);
exit
use testdb;
call except();
use testdb;
call except();
call my_except();
create table mytab(id integer, name varchar(20) not null);
insert into mytab values(1,null);
call my_except(1);
call my_except(11);
call my_except(1);
call my_except(11);
select * from authors;
select * from authors limit 3;
call proc_cursor();
select * from authors;
select * from products limit 10;
desc orders;
select * from orders;
call place_orders();
select * from orders;
use practicedb;
select hire_date, expc(hire_date) from myemp;
use testdb;
select hire_date , year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select first_name, last_name, hire_date, experience(hire_date) from myemp limit 15;
select first_name, last_name, hire_date, experience(hire_date) exp from myemp limit 15;
select first_name, last_name, hire_date, experience(hire_date) exp from myemp where experience(hire_date) < 10;
exit
use testdb;
call proc_elsif(4);
call proc_elseif(4);
use practicedb;
call proc_elseif(4);
call proc_elseif(6);
call proc_elseif(16);
call proc_elseif(5);
call roc_simpleloop();
call proc_simpleloop();
call proc_simpleloop(2);
call proc_simpleloop(4);
call proc_repeat();
call proc_repeat(2);
call proc_repeat(5);
call proc_while();
select * from authors;
call proc_cursor();
select * from products limit 5;
desc orders;
select * from orders;
select * from products limit 15;
call place_orders();
select * from orders;
use testdb;
select * from books;
desc book_sales;
alter table books add column sales integer default 0 ;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 14;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 5;
select * from books;
select * from book_sales;
select hire_date, year(hire_date) from myemp limit 10;
select max(salary)  from myemp;
select max(salary), avg(salary)  from myemp;
select count(*) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select job_id, avg(salary) from myemp group by job_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id = 20;
select dep_id, avg(salary) from myemp group by dep_id having dep_id IN (30,60,40);
select depid, mgr_id , max(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id , max(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id , max(salary) from myemp group by dep_id, mgr_id having dep_id=50 and mgr_id in (100,120);
select dep_id, mgr_id , max(salary) from myemp group by dep_id, mgr_id having dep_id=50;
select dep_id, avg(salary), first_name  from myemp group by dep_id;
show tables;
select * from sales;
select * from cats;
show tables;
create table marks(name varchar(30), mark integer);
insert into marks values('Tom',67),('Jon',73),('Tim',67),('Jim',45),('Pat', 45),('Pam', 33);
select * from marks;
select * from cats;
select name, breed, weight, max(weight) over (partition by breed) max_weight from cats;
select first_name, salary, salary*0.2 as bonus from myemp limit 10;
select * from (select first_name, salary, salary*0.2 as bonus from myemp) e where e.bonus > 4000;
with e as (select first_name, salary, salary*0.2 as bonus from myemp)
select e.bonus, e.salary from e;
with e as (select first_name, salary, salary*0.2 as bonus from myemp) select e.bonus, e.salary from e;
select name, breed, weight, max(weight) over (partition by breed) max_weight from cats;
select name, breed, weight-max_weight from (select name, breed, weight, max(weight) over (partition by breed) max_weight from cats) e;
select * from marks;
select name, rank() over(order by marks desc) from marks;
select name, rank() over(order by mark desc) from marks;
select name, rank() over(order by mark desc) rnk from marks;
select name, dense_rank() over(order by mark desc) rnk from marks;
select * from myemp order by salary desc;
select * from sales;
select sales_employee, year, sale, dense_rank() over(partition by fiscal_year order by sale) as rnk from sales;
select sales_employee, fiscal_year, sale, dense_rank() over(partition by fiscal_year order by sale) as rnk from sales;
exit
use practicedb;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
desc book_sales;
update books set sales = sales + 2 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 6;
select * from books;
select * from book_sales;
select dep_id , avg(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg, max(salary) over (partition by dep_id) as max_sal from myemp limit 20;
select first_name, last_name, dep_id, salary, avg(salary) over was dep_avg, max(salary) over w as max_sal from myemp window as w;
select first_name, last_name, dep_id, salary, avg(salary) over was dep_avg, max(salary) over w as max_sal from myemp w as window;
select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as tot_sal from myemp limit 10;
select salary, bonus, tot_sal from (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as tot_sal from myemp) as e;
with e as (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as tot_sal from myemp)
select salary, bonus from e;
with e as (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as tot_sal from myemp) select salary, bonus from e;
select * from marks;
create table marks as select * from testdb.marks;
select * from marks;
select name, mark, rank() over(order by mark desc) as rnk from marks;
select name, mark, dense_rank() over(order by mark desc) as rnk from marks;
select name, mark, dense_rank() over(order by mark desc) as rnk from marks where rnk = 2;
with e as (select name, mark, dense_rank() over(order by mark desc) as rnk from marks)
select * from e where e.rnk = 2;
with e as (select name, mark, dense_rank() over(order by mark desc) as rnk from marks) select * from e where e.rnk = 2;
select * from myemp order by salary desc limit 10;
select name, mark, row_number() over(order by mark desc) as rnk from marks;
select * from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale) from sales;
select sales_employee, fiscal_year, sale, dense_rank() over (partition by fiscal_year order by sale) as rnk from sales;
select * from cats;
exit
use testdb;
select * from marks;
select name, mark, row_number over (order by mark desc) as rn from marks;
select name, mark, row_number() over (order by mark desc) as rn from marks;
select * from trains;
select train_id, station, time, lead(time) over (partition by train_id order by time) as nxt_time from trains;
with e as (select train_id, station, time, lead(time) over (partition by train_id order by time) as nxt_time from trains)
select e.train_id, e.station, e.time, e.nxt_time, subtime(e.nxt_time, e.time) as duration frome;
with e as (select train_id, station, time, lead(time) over (partition by train_id order by time) as nxt_time from trains) select e.train_id, e.station, e.time, e.nxt_time, subtime(e.nxt_time, e.time) as duration frome;
with e as (select train_id, station, time, lead(time) over (partition by train_id order by time) as nxt_time from trains) select e.train_id, e.station, e.time, e.nxt_time, subtime(e.nxt_time, e.time) as duration from e;
select * from students_d;
select date_id, student_id, attendance, lead(attendance,1) over(partition by student_id order by date_id) as day_2,  lead(attendance,2) over(partition by student_id order by date_id) day_3 from students_d;
with cte as (select date_id, student_id, attendance, lead(attendance,1) over(partition by student_id order by date_id) as day_2,  lead(attendance,2) over(partition by student_id order by date_id) day_3 from students_d) select student_id from e where e.attendance = 'p' and e.day_2 ='p' and e.day_3='p';
with e as (select date_id, student_id, attendance, lead(attendance,1) over(partition by student_id order by date_id) as day_2,  lead(attendance,2) over(partition by student_id order by date_id) day_3 from students_d) select student_id from e where e.attendance = 'p' and e.day_2 ='p' and e.day_3='p';
with e as (select date_id, student_id, attendance, lead(attendance,1) over(partition by student_id order by date_id) as day_2,  lead(attendance,2) over(partition by student_id order by date_id) day_3 from students_d) select distinct student_id from e where e.attendance = 'p' and e.day_2 ='p' and e.day_3='p';
select * from trains;
select train_id, station, time, lag(time) over (partition by train_id order by time) as nxt_time from trains;
select * from marks;
select name, mark, first_value(name) over ( order by mark desc) as first_person from marks;
select name, mark, last_value(name) over ( order by mark desc) as first_person from marks;
select name, mark, last_value(name) over ( order by mark ) as first_person from marks;
select name, mark, nth_value(name,2) over ( order by mark ) as first_person from marks;
select name, mark, nth_value(name,3) over ( order by mark ) as first_person from marks;
select name, mark, nth_value(name,1) over ( order by mark ) as first_person from marks;
create table marks2 as select * from marks;
select * from marks2;
update marks2 set mark = 46 where name = 'pat';
update marks2 set mark = 68 where name = 'tim';
select * from marks2;
select name, mark, last_value(name) over ( order by mark ) as first_person from marks2;
select name, mark, last_value(name) over ( order by mark range between unbounded preceding and unbounded following) as first_person from marks2;
select name, mark, last_value(name) over ( order by mark range between unbounded preceding and unbounded following) as first_person from marks;
select name, mark, last_value(name) over ( order by mark range between 2 preceding and 2 following) as first_person from marks;
select name, mark, last_value(name) over ( order by mark range between 1 preceding and 1 following) as first_person from marks;
show tables;
show create table books;
create table test(id integer unique, name char(20));
desc test;
show indexes from test;
show indexes from books;
use employees;
select count(*) from employees;
select * from employees limit 10;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
exit;
use practicedb;
select * from cities;
show tables;
select * from trains;
select train_id, station, time, lead(time) over (partition by train_id order by time) as nx_station from trains;
with cte as (select train_id, station, time, lead(time) over (partition by train_id order by time) as nx_station from trains) select *, subtime(nx_station, time) journey_time from cte;
select train_id, station, time, lag(time) over (partition by train_id order by time) as nx_station from trains;
select * from students_d;
select * from trains;
show tables;
select * from offices;
select * from employees;
select * from students_d;
select date_id, student_id, attendance as day1, lead(attendance,1) over ( partition by student_id order by date_id) as day2,
lead(attendance, 2) over (partition by student_id order by date_id ) as day3 from students_d;
select date_id, student_id, attendance as day1, lead(attendance,1) over ( partition by student_id order by date_id) as day2, lead(attendance, 2) over (partition by student_id order by date_id ) as day3 from students_d;
with cte as (select date_id, student_id, attendance as day1, lead(attendance,1) over ( partition by student_id order by date_id) as day2, lead(attendance, 2) over (partition by student_id order by date_id ) as day3 from students_d) select student_id from cte where day1='p' and day2 = 'p' and day3 = 'p' ;
with cte as (select date_id, student_id, attendance as day1, lead(attendance,1) over ( partition by student_id order by date_id) as day2, lead(attendance, 2) over (partition by student_id order by date_id ) as day3 from students_d) select distinct student_id from cte where day1='p' and day2 = 'p' and day3 = 'p' ;
select * from marks;
select *, first_value(name) over ( order by mark desc) as first_person from marks;
select *, first_value(mark) over ( order by mark desc) as first_person from marks;
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
select * from products limit 10;
select * from products where mrp = (select max(mrp) from products) ;
select * from products where mrp > (select avg(mrp) from products) ;
select * from employees;
select * from employees limit 10;
select * from offices;
select * from employees where officecode in (select officecode from offices where country = 'usa');
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id)
;
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
exit
select * from products;
use testdb;
select * from products;
select * from orders;
select * from products where not exists (select * from orders);
select * from products where exists (select * from orders);
select * from products where exists (select * from orders where products.pcode = orders.pcode);
select * from products where exists (select * from orders where products.pcode = orders.product_code);
select distinct product_code from orders;
select  product_code from orders;
CREATE TABLE nycust(  
  cust_id int NOT NULL,  
  name varchar(35),  
  occupation varchar(25),  
  age int  
);  
CREATE TABLE nycust(     cust_id int NOT NULL,     name varchar(35),     occupation varchar(25),     age int   );
INSERT INTO mycust(cust_id, name, occupation, age)   
VALUES (101, 'Peter', 'Engineer', 32),  
(102, 'Joseph', 'Developer', 30),  
(103, 'John', 'Leader', 28),  
(104, 'Stephen', 'Scientist', 45),  
(105, 'Suzi', 'Carpenter', 26),  
(106, 'Bob', 'Actor', 25),  
(107, NULL, NULL, NULL);  
INSERT INTO mycust(cust_id, name, occupation, age)    VALUES (101, 'Peter', 'Engineer', 32),   (102, 'Joseph', 'Developer', 30),   (103, 'John', 'Leader', 28),   (104, 'Stephen', 'Scientist', 45),   (105, 'Suzi', 'Carpenter', 26),   (106, 'Bob', 'Actor', 25),   (107, NULL, NULL, NULL);
drop table if exists myord;
CREATE TABLE myord (  
    order_id int NOT NULL,   
    cust_id int,   
    prod_name varchar(45),  
    order_date date  
);  
CREATE TABLE myord (       order_id int NOT NULL,        cust_id int,        prod_name varchar(45),       order_date date   );
INSERT INTO myord (order_id, cust_id, prod_name, order_date)   
VALUES (1, '101', 'Laptop', '2020-01-10'),  
(2, '103', 'Desktop', '2020-02-12'),  
(3, '106', 'Iphone', '2020-02-15'),  
(4, '104', 'Mobile', '2020-03-05'),  
(5, '102', 'TV', '2020-03-20');  
INSERT INTO myord (order_id, cust_id, prod_name, order_date)    VALUES (1, '101', 'Laptop', '2020-01-10'),   (2, '103', 'Desktop', '2020-02-12'),   (3, '106', 'Iphone', '2020-02-15'),   (4, '104', 'Mobile', '2020-03-05'),   (5, '102', 'TV', '2020-03-20');
select * from mycust;
use testdb;
CREATE TABLE nycust(  
  cust_id int NOT NULL,  
  name varchar(35),  
  occupation varchar(25),  
  age int  
);  
CREATE TABLE nycust(     cust_id int NOT NULL,     name varchar(35),     occupation varchar(25),     age int   );
INSERT INTO mycust(cust_id, name, occupation, age)   
VALUES (101, 'Peter', 'Engineer', 32),  
(102, 'Joseph', 'Developer', 30),  
(103, 'John', 'Leader', 28),  
(104, 'Stephen', 'Scientist', 45),  
(105, 'Suzi', 'Carpenter', 26),  
(106, 'Bob', 'Actor', 25),  
(107, NULL, NULL, NULL);  
INSERT INTO mycust(cust_id, name, occupation, age)    VALUES (101, 'Peter', 'Engineer', 32),   (102, 'Joseph', 'Developer', 30),   (103, 'John', 'Leader', 28),   (104, 'Stephen', 'Scientist', 45),   (105, 'Suzi', 'Carpenter', 26),   (106, 'Bob', 'Actor', 25),   (107, NULL, NULL, NULL);
drop table if exists myord;
CREATE TABLE myord (  
    order_id int NOT NULL,   
    cust_id int,   
    prod_name varchar(45),  
    order_date date  
);  
CREATE TABLE myord (       order_id int NOT NULL,        cust_id int,        prod_name varchar(45),       order_date date   );
INSERT INTO myord (order_id, cust_id, prod_name, order_date)   
VALUES (1, '101', 'Laptop', '2020-01-10'),  
(2, '103', 'Desktop', '2020-02-12'),  
(3, '106', 'Iphone', '2020-02-15'),  
(4, '104', 'Mobile', '2020-03-05'),  
(5, '102', 'TV', '2020-03-20');  
INSERT INTO myord (order_id, cust_id, prod_name, order_date)    VALUES (1, '101', 'Laptop', '2020-01-10'),   (2, '103', 'Desktop', '2020-02-12'),   (3, '106', 'Iphone', '2020-02-15'),   (4, '104', 'Mobile', '2020-03-05'),   (5, '102', 'TV', '2020-03-20');
select * from mycust;
CREATE TABLE nycust(     cust_id int NOT NULL,     name varchar(35),     occupation varchar(25),     age int   );
alter table nycust rename to mycust;
select * from mycust;
INSERT INTO mycust(cust_id, name, occupation, age)   
VALUES (101, 'Peter', 'Engineer', 32),  
(102, 'Joseph', 'Developer', 30),  
(103, 'John', 'Leader', 28),  
(104, 'Stephen', 'Scientist', 45),  
(105, 'Suzi', 'Carpenter', 26),  
(106, 'Bob', 'Actor', 25),  
(107, NULL, NULL, NULL);  
INSERT INTO mycust(cust_id, name, occupation, age)    VALUES (101, 'Peter', 'Engineer', 32),   (102, 'Joseph', 'Developer', 30),   (103, 'John', 'Leader', 28),   (104, 'Stephen', 'Scientist', 45),   (105, 'Suzi', 'Carpenter', 26),   (106, 'Bob', 'Actor', 25),   (107, NULL, NULL, NULL);
select * from mycust;
select * from myord;
select * from mycust where exists (select * from myord where mycust.cust_id = myord.cust_id);
select * from mycust where not exists (select * from myord where mycust.cust_id = myord.cust_id);
select * from mycust where cust_id in  (select cust_id from myord where mycust.cust_id = myord.cust_id);
select * from mycust where cust_id not in  (select cust_id from myord where mycust.cust_id = myord.cust_id);
select * from mycust where cust_id in  (select cust_id from myord where mycust.cust_id != myord.cust_id);
select * from mycust where cust_id exists  (select cust_id from myord where mycust.cust_id != myord.cust_id);
select * from mycust where  exists  (select cust_id from myord where mycust.cust_id != myord.cust_id);
select cust_id from myord where mycust.cust_id != myord.cust_id;
select cust_id from myord, mycust  where mycust.cust_id != myord.cust_id;
select * from myord, mycust  where mycust.cust_id != myord.cust_id;
select cust_id from myord where cust_id not in (select cust_id from mycust);
select cust_id from myord where cust_id  in (select cust_id from mycust);
select cust_id from myord where cust_id  in (1,null,102);
select cust_id from mycust where cust_id  in (1,null,102);
ds
;
exit
use practicedb;
create table bks(id integer primary key, aid integer, foreign key (aid) references testdb.authors(authorid));
insert into bks values(1,1000);
insert into bks values(1,2);
select max(salary) from myemp;
select * from myemp where salary = ( select max(salary) from myemp);
select * from myemp where emp_id = (select count(*) from myemp);
select * from employees;
select * from moffices;
select * from employees limit 10;
select * from offices;
select * from employees where officecode in (select officecode from offices where country='Usa');
select officecode from offices where country='Usa';
select * from employees where officecode IN (select officecode from offices where country='Usa');
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id); 
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
exit
use demodb;
show tables;
create table patients (pid integer, pname varchar(30), dob date, toa datetime);
insert into patients values(1,'Tom', '1990-09-19', '2023-01-23 07:30:00');
insert into patients values(2, 'Patrick', '1987-07-14', '2023-01-23 19:30:00');
select * from patients;
select 5 + 6 as result;
select 6 * 8 as result;
select 6 + null as result;
select 2 = 2 as result;
select 2 = 3 as result;
select 3 = null as result;
select 2 is null as result;
select 2 is not null as result;
create table students(id integer);
create table if not exists students(id integer);
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students change modify column sname varchar(20);
alter table students modify column sname varchar(20);
desc students;
show tables;
alter table students rename to mystudents;
show tables;
select * from mystudents;
rename table mystudents to students;
show tables;
alter table students add column age integer after course;
select * from mystudents;
select * from students;
alter table students add column sno integer first;
select * from students;
use demodb;
show tables;
create table mytab(id integer, name char(30));
show tables;
drop table mytab;
show tables;
select * from students;
alter table students drop column sno, age;
alter table students drop column sno;
alter table students drop column age;
select * from students;
insert into students values(3, 'Tom', 'Analytics', 67);
insert into students values(4, 'Jim', null, 56);
select * from students;
insert into students (std_id, sname, marks) values( 5,'Tim',77);
select * from students;
insert into students values(6,'Harry', 'Magic', 88),(7,'Potter','Magic', 99),(8,'Lara','Data Science' ,66);
select * from students;
update students
set sname = 'Thomas'
where std_id = 3;
update students set sname = 'Thomas' where std_id = 3;
select * from students;
update students set marks = 0 where course = null;
select * from students;
update students set marks = 0 where course is null;
select * from students;
update students
set course = 'Dance',
marks = 55,
sname = 'James' 
where std_id = 4;
update students set course = 'Dance', marks = 55, sname = 'James'  where std_id = 4;
select * from students;
update students set marks = 0;
select * from students;
delete from students where course = 'magic';
select * from students;
delete from students ;
select * from students;
insert into students values(6,'Harry', 'Magic', 88),(7,'Potter','Magic', 99),(8,'Lara','Data Science' ,66);
select * from students;
truncate students;
select * from students;
select * from myemp;
select * from myemp limit 5;
select first_name, last_name, job_id, salary limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
select job_id, last_name, first_name, salary;
select job_id, last_name, first_name, salary from myemp limit 10;
select * from myemp limit 5;
select first_name, last_name, salary, salary*0.2 from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
select first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 10;
select distinct dep_id from myemp;
select distinct job_id from myemp;
selectn* from person;
select * from person;
select distinct fname,lname from person;
select * from cats;
select distinct breed from cats;
select * from myemp limit 10;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from marks;
select * from cats;
select * from cats order by age asc;
select *m from cats order by name;
select * from cats order by name;
select * from myemp limit 10;
select * from myemp order by hire_date desc;
select * from myemp order by dep_id, hire_date desc;
select * from myemp where dep_id = 30;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date > '2000-12-31';
exit
use demodb;
select * from myemp where salary > 10000 and dep_id = 100;
select * from myemp where salary > 10000 and dep_id = 50;
select * from myemp where salary > 10000 and dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 60;
select * from myemp where dep_id = 30 or dep_id = 50 or dep_id = 60;
select * from myemp where dep_id IN (30,40,60);
select * from myemp where salary between 10000 and 20000;
select * from myemp where hire_date between '1987-01-01' and '1987-12-31';
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '% %';
select * from myemp where first_name like 'J____';
select 5%2 as result;
select 34%4 as result;
select * from from myemp limit 10;
select * from  myemp limit 10;
select * from myemp where emp_id%2 = 0;
select * from patients;
select adddate(dob, interval 10 day) from patients;
select curdate() as today;
select curtime() as time;
select now();
select * from patients;
select dob, year(dob), month(dob), day(dob) from patients;
select dob, year(dob), monthname(dob), day(dob) from patients;
select concat(first_name, last_name) as name from myemp limit 10;
select concat(first_name, ' ',last_name) as name from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select min(salary) from myemp;
select max(salary) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select * from cats;
select breed, avg(weight) from cats group by breed;
select breed, round(avg(weight),2) as avg_wt from cats group by breed;
select count(*) from myemp;
select * from cats group by color;
select color from cats group by color;
select color, count(*) from cats group by color;
select first_name, dep_id, max(salary) from myemp group by dep_id;
select dep_id, mgr_id, max(salary) from myemp group by dep_id, mgr_id;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id = 60;
select dep_id, avg(salary) from myemp group by dep_id having dep_id IN (20,30,40);
exit
use demodb;
show tables;
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select * from movies;
select * from members;
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate, drinkname from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
select m.mealname, m.rate, d.drinkname from meals as m cross join drinks as d;
select first_name, last_name, title, category from movies left join members on movieid = id;̵
;
select mv.title, mv.category, mm.first_name, mm.last_name
from movies as mv 
left join members as mm
on mv.id = mm.movieid;
select mv.title, mv.category, mm.first_name, mm.last_name from movies as mv  left join members as mm on mv.id = mm.movieid;
select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv  left join members as mm on mv.id = mm.movieid;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.first_name, emp.last_name, mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id;
select emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id;
select * from members;
select * from movies;
select * from students;
desc students;
insert into students values(1,'Tom', 'Mysql', 45)(1,'Jon','Mysql', 88);
insert into students values(1,'Tom', 'Mysql', 45),(1,'Jon','Mysql', 88);
select * from students;
drop table students;
create table students( sid integer UNIQUE, sname varchar(50) NOT NULL, age integer CHECK(age > 18), course varchar(25) );
desc students;
insert into students values(1,'Tom' 23, 'Mysql');
insert into students values(1,'Tom', 23, 'Mysql');
select * from students;
insert into students values(1,'Jon', 23, 'Mysql');
insert into students values(2,'Jon', 23, 'Mysql');
insert into students values(1,'Jon', 23, 'Mysql');
select * from students;
insert into students values(3,'Jenny', 13, 'Mysql');
insert into students values(3,'Jenny', 19, 'Mysql');
select * from students;
insert into students values(4, null, 32,'DS');
insert into students (sid, age, course) values (5,43,'Mysql');
desc students;
alter table students modify column sname varchar(50) not null default 'Smith';
desc students;
insert into students values(4, null, 32,'DS');
insert into students (sid, age, course) values (5,43,'Mysql');
select * from students;
exit
use demodb;
desc authors;
desc books;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(
authorid integer PRIMARY KEY,
name varchar(255) );
create table authors( authorid integer PRIMARY KEY, name varchar(255) );
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
delect * from authors;
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
desc books;
show create table books;
create table mytab ( id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30));
desc mytab;
insert into mytab (name) values ('Tom');
select * from mytab;
insert into mytab (name) values ('Jon');
select * from mytab;
insert into mytab (name) values ('Jim'),('James');
select * from mytab;
insert into mytab values(10,'Lara');
select * from mytab;
insert into mytab (name) values ('Jonathan');
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name) values ('Jon');
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name) values ('Jon');
select * from mytab;
select * from myemp limit 10;
create view myview as select first_name, last_name, job_id, salary from myemp;
select * from myview;
show tables;
select * from movies;
select * from members;
select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, mv.category, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(17, 'Tom Hanks')
;
select * from aview;
select * from authors;
select * from myemp limit 10;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
drop view aview;
create view aview as select * from authors where authorid < 15 WITH CHECK OPTION;
SELECT * FROM AVIEW;
insert into aview values(19, 'Tom Cruise');
insert into aview values(9, 'Tom Cruise');
select * from aview;
select * from authors;
exit
use demodb;
select * from students;
insert into students values(6,'Larry',34,'Analytics');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Harry', 19,'Magic');
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(7,'Harry', 19,'Magic');
select * from students;
rollback;
select * from students;
create table tt (id char);
insert into tt ('a');
insert into tt values ('a');
insert into tt values ('b');
select * from tt;
delete from tt;
start transaction;
insert into tt values ('a');
insert into tt values ('b');
insert into tt values ('c');
select * from tt;
rollback;
select * from tt;
insert into tt values ('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values ('a');
insert into tt values ('b');
insert into tt values ('c');
select * from tt;
commit;
insert into tt values ('d');
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values ('a');
insert into tt values ('b');
savepoint sb;
insert into tt values ('c');
insert into tt values ('d');
savepoint sd;
insert into tt values ('e');
insert into tt values ('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values ('f');
rollback;
select * from tt;
show create books;
show create table books;
desc students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
use demodb;
call myproc();
call myproc(5);
call myproc(7);
call myproc(10);
call if_proc(4);
call if_proc(-4);
select * from cats;
call fat_cats('ashes');
call fat_cats('Felix');
select 5 >= 5 as msg;
call fat_cats('ashes');
call fat_cats('Ashes');
call grades(87);
call grades(67);
call grades(58);
exit
use demodb;
call simple_loop();
call simple_loop(2);
call simple_loop(4);
call simple_loop(5);
call repeat_loop();
call repeat_loop(2);
call repeat_loop(4);
call while_loop(2);
call while_loop(3);
call while_loop(5);
select * from yyy;
select authorname from authors;
call except_handle();
select authorname from authors;
call except_handle(1);
call except_handle(2);
select * from payments;
desc payments;
insert into payments values (2,null);
call payments(1, 700);
select * from payments;
desc fraud;
select * from fraud;
call payment(2,300);
call payments(2,300);
select * from payments;
select * from fraud;
call payments(3, null);
insert into payments values (2,null);
select * from fraud;
insert into payments values (2,null);
call payments(3, null);
select * from fraud;
select * from payments;
call payments(4, 500);
select * from payments;
select * from fraud;
call payments(4, null);
select * from fraud;
use practicedb;
select * from marks;
use demodb;
create table marks as select * from practicedb.marks;
select * from marks;
select mark from marks;
call cursor_proc();
select mark from marks;
select * from marks;
call cursor_proc();
selext * from products limit 10;
select * from products limit 10;
select * from orders;
desc orders;
select * from orders;
call orders();
select * from orders;
select * from products;
exit
use demodb;
select * from marks;
select adddate('2023-02-09', interval 30 day) as msg;
select * from patients;
select dob, adddate(dob, interval 30 day) as msg from patients;
select curdate();
select curdate(), current_date(), current_date ;
select curtime(), current_time(), current_time ;
select now();
select * from patients;
select left(pname, 1) from patients;
select left(pname, 2) from patients;
select right(pname, 2) from patients;
select right(pname, 1) from patients;
select * from myemp where left(first_name,1)='a' and right(first_name,1) = a;
select * from myemp where left(first_name,1)='a' and right(first_name,1) = 'a';
select * from myemp where left(first_name,1) in ('a','e','i','o','u') and right(first_name,1) in ('a','e','i','o','u');
select concat(first_name, ' ', last_name) as full_name from myemp limit 20;
select first_name, length(first_name) from myemp limit 20;
select lower(first_name), upper(first_name) from myemp limit 20;
select * from myemp limit 10;
select first_name, last_name, hire_date, experience(hire_date) as exp from myemp limit 20;
select first_name, last_name, hire_date, experience(hire_date) as exp from myemp where experience(hire_date) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
update books set sales = sales + 2 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 9;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 5;
select * from books;
select * from book_sales;
select sum(salary) from myemp;
select dep_id, max(salary) from departments group by dep_id;
select dep_id, max(salary) from memp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id;
select  first_name, last_name, salary, dep_id, max(salary) over (partition by dep_id)  as max_sal from myemp limit 20;
select  first_name, last_name, salary, dep_id, max(salary) over (partition by dep_id)  as max_sal , min(salary) over (partition by dep_id) as min_sal from myemp limit 20;
select  first_name, last_name, salary, dep_id, max(salary) over w  as max_sal , min(salary) over w as min_sal from myemp window w as (partition by dep_id); 
select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as total from myemp;
select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as total from myemp limit 10;
select * from (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as total from myemp) as e limit 10;
select * from (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as total from myemp) as e where e.bonus > 3000;
with e as (select first_name, last_name, salary, salary*0.2 as bonus, salary + salary*0.2 as total from myemp) select * from e where e.bonus > 3000;
exit
use demodb;
select * from products limit 20;
select *, avg(mrp) over (partition by productline) as avg_price from products limit 20;
select *, avg(mrp) over (partition by productline) as avg_price from products ;
with cte as select *, avg(mrp) over (partition by productline) as avg_price from products 
select * from cte where cte.mrp > cte.avg_price;
with cte as select *, avg(mrp) over (partition by productline) as avg_price from products  select * from cte where cte.mrp > cte.avg_price;
select * from (select *, avg(mrp) over (partition by productline) as avg_price from products) as e where e.mrp > e.avg_price;
select first_name, last_name, job_id, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp limit 20;
with e as (select first_name, last_name, job_id, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp) 
select * from e where e.salary = e.max_sal;
with e as (select first_name, last_name, job_id, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp)  select * from e where e.salary = e.max_sal;
select * from marks;
select name, mark, rank() over(order by mark desc) as rnk from marks;
select name, mark, dense_rank() over(order by mark desc) as rnk from marks;
with e as (select *, dense_rank() over( order by salary desc) as rnk from myemp) select * from e where e.rnk = 3;
select * from myemp order by salalry desc limit 10;
select * from myemp order by salary desc limit 10;
select * , dense_rank() over(partition by dep_id order by salary desc) as rnk from myemp limit 20;
with cte as (select * , dense_rank() over(partition by dep_id order by salary desc) as rnk from myemp) select * from cte where rnk = 3;
select * from sales;
select *, dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select * from trains;
select * , lead(time,1) over(partition by train_id order by time) as nxt_time from trains;
with cte as (select * , lead(time,1) over(partition by train_id order by time) as nxt_time from trains) 
select *, subtime(nxt_time, time) as journet_time from cte;
with cte as (select * , lead(time,1) over(partition by train_id order by time) as nxt_time from trains)  select *, subtime(nxt_time, time) as journet_time from cte;
select * FROM STUDENTS_D;
select *, lead(attendance,1) over(partition by student_id order by date) as day_2, lead(attendance,2) over(partition by student_id order by date) as day_3 from students_d;
select *, lead(attendance,1) over(partition by student_id order by date_id) as day_2, lead(attendance,2) over(partition by student_id order by date_id) as day_3 from students_d;
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day_2, lead(attendance,2) over(partition by student_id order by date_id) as day_3 from students_d) select student_id from cte where attendance='p' and day_2 = 'p' and day_3 = 'p';
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day_2, lead(attendance,2) over(partition by student_id order by date_id) as day_3 from students_d) select distinct student_id from cte where attendance='p' and day_2 = 'p' and day_3 = 'p';
select max(salary) from myemp;
select * from myemp where salalry = (select max(salary) from myemp);
select * from myemp where salary = (select max(salary) from myemp);
select * from employees;
select * from employees limit 10;
select * from offices;
select officecode from offices where country = 'usa';
select * from employees where officecode in (select officecode from offices where country = 'usa');
exit
use practicedb;
select * from students;
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients values(1,'Francis','1980-08-17', '2023-02-28 09:30:00');
insert into patients values(2,'Hugh', '1959-09-19', '2023-02-28 21:30:00');
select * from patients;
select 5 + 6 as result;
select 5 + null as result;
select 5 > 10 as result;
select 5 > null as result;
select 5= 5 as result;
select 5 = null as result;
create table test (id integer, name varchar(20));
show tables;
drop table test;
show tables;
exit
use practicedb;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to mystudents;
show tables;
select * from mystudents;
rename table mystudents to students;
show tables;
alter table students add column c1 integer, c2 integer;
alter table students add columns c1 integer, c2 integer;
alter table students add column c1 integer, column c2 integer;
alter table students add column (c1 integer, c2 integer);
select * from students;
alter table students drop column c1;
alter table students drop column c2;
select * from students;
insert into table values(3,'Tom','Mysql', 78);
insert into students values(3,'Tom','Mysql', 78);
insert into students values(4,'George', null, 88);
select * from students;
insert into students (std_id, sname,marks) values(5,'Hugh',77);
select * from students;
insert into students values(6,'Harry', 'Magic', 67),(7,'Potter','Magic',88),(8,'Larry','Music',90);
select * from students;
update students set sname = 'Thomas' where std_id = 3;
select * from students;
update students set marks = 0 where course = null;
select * from students;
update students set marks = 0 where course is null;
select * from students;
update students set marks = 50 where marks is null;
select * from students;
update students set sname='Jonathan', course = 'Analytics', marks = 0 where std_id =1;
select * from students;
update students set marks = 80 ;
select * from students;
delete from students where std_id = 2;
select * from students;
delete from students where course = 'magic';
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry', 'Magic', 67),(7,'Potter','Magic',88),(8,'Larry','Music',90);
select * from students;
truncate students;
select * from students;
create table mytab (id integer, name varchar(10));
select * from mytab;
desc mytab;
insert into mytab values(1,'Tom'),(2,'Jon');
select * from mytab;
drop table mytab;
select * from mytab;
create table mytab (id integer, name varchar(10));
select * from mytab;
desc mytab;
insert into mytab values(1,'Tom'),(2,'Jon');
select * from mytab;
delete from mytab;
select * from mytab;
desc mytab;
show create table patients;
exit
use practicedb;
select * from myemp;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary from myemp;
select emp_id, first_name, last_name, salary from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2, salary+salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select emp_id, first_name, last_name, salary, round(salary*0.2,2) as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select emp_id, first_name, last_name, salary, round(salary*0.2) as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name as fname, last_name, salary, salary*0.2 as bonus, salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name  fname, last_name, salary, salary*0.2  bonus, salary+salary*0.2  total_sal from myemp limit 10;
select dep_id from myemp ;
select distinct dep_id from myemp;
select * from myemp limit 10;
select distinct mgr_id from myemp;
select distinct job_id from myemp;
select * from person;
select distinct fname,lname from myemp;
select distinct fname,lname from person;
select * from person;
select * from myemp limit 10;
select * from myemp order by salary;
select * from myemp order by salary asc;
select * from myemp order by salary desc;
select * from myemp order by last_name ;
select * from myemp order by hire_date;
select * from myemp order by dep_id,hire_date;
select emp_id, first_name, last_name, dep_id, hire_date from myemp order by dep_id,hire_date;
select * from myemp where emp_id = 200;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >= '2000-01-01';
select * from myemp where dep_id != 50;
select * from myemp where emp_id%2 = 0;
select * from myemp where salary*0.2 > 3000;
select *. salary*0.2 as bonus  from myemp where salary*0.2 > 3000;
select *, salary*0.2 as bonus  from myemp where salary*0.2 > 3000;
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '% %'
;
select * from myemp where first_name like 'J____';
exit
use practicedb;
select * from cats;
select * from cats where color='black' and weight > 4;
select * from cats where color='black' and weight > 5;
select * from myemp where dep_id = 80 and salary >= 10000;
select * from myemp where dep_id = 40 or salary >= 15000;
select * from myemp where job_id = 'sa_rep' and hire_date > '1995-12-31';
select * from myemp where dep_id in (40,20,60,70);
select * from myemp;
select * from myemp where job_id like '%clerk';
select * from myemp where job_id in ('sh_clerk', 'st_clerk','pu_clerk');
select hire_date, year(hire_date) from myemp limit 10;
select hire_date, month(hire_date) from myemp limit 10;
select hire_date, monthname(hire_date) from myemp limit 10;
select concat(first_name, ' ', last_name) as name from myemp limit 15;
select first_name, last_name , concat(first_name, ' ', last_name) as name from myemp limit 15;
select * from patients;
select dob, adddate(dob, interval 10 day) from patients;
select first_name, upper(first_name) from myemp limit 10;
select left(first_name,1) from myemp limit 10;
select first_name, left(first_name,1) from myemp limit 10;
select first_name, left(first_name,2) from myemp limit 10;
select first_name, right(first_name,2) from myemp limit 10;
select avg(salalry) from myemp;
select avg(salary) from myemp;
select max(salary) from myemp;
select min(salary) from myemp;
select count(*) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id,mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id,mgr_id, avg(salary) from myemp group by dep_id, mgr_id order by dep_id;
select * from cats;
select breed, max(weight), min(weight), avg(weight) from cats group by breed;
select breed, max(weight), min(weight), round(avg(weight),2)  from cats group by breed;
select first_name from myemp where  left(first_name,1) in ('a','e','i','o','u') and right(first_name,1) in ('a','e','i','o','u'); 
select first_name from myemp where  first_name like 'a%a' or first_name like 'e%e';
select * from movies;
select * from members;
select * from members inner join movies on id = movieid;
select * from members inner join movies on id = movieid where category = 'animation';
select * from members inner join movies on id = movieid where category = 'animations';
exit
use practicedb;
select * from movies;
select * from members;
select * from members inner join movies on movieid = id ;
select * from movies;
select * from members;
select * from movies left join members on movieid = id ;
select * from movies right join members on movieid = id ;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate,drinkname from meals cross join drinks;
select mealname, meals.rate,drinkname from meals cross join drinks;
select m.mealname, m.rate, d.drinkname from meals as m cross join drinks as d;
select * from movies left join members on movieid = id ;
select mv.title,mm.first_name, mm.last_name from movies as mv left join members as mm on mm.movieid = mv.id ;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mm.movieid = mv.id ;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname 
from movies as mv left join members as mm 
on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname  from movies as mv left join members as mm  on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname 
from movies as mv 
left join members as mm 
on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname  from movies as mv  left join members as mm  on mm.movieid = mv.id;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
exit
use practicedb;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname char(30) NOT NULL,
age integer CHECK(age > 18),
course char(30));
create table students( sid integer UNIQUE, sname char(30) NOT NULL, age integer CHECK(age > 18), course char(30));
desc students;
insert into students values(1,'Tom',23,'Mysql');
insert into students values(1,'Jon',23,'Mysql');
insert into students values(2,'Jon',23,'Mysql');
select * from students;
insert into students values(3,'Mary', 17,'Analytics');
insert into students values(3,'Mary', 19,'Analytics');
select * from students;
insert into students values(4,null,34,'Analytics');
insert into students (sid,age,course) values(4,34,'Analytics');
alter table students modify column sname cahr(30) NOT NULL DEFAULT 'Smith';
alter table students modify column sname char(30) NOT NULL DEFAULT 'Smith';
desc students;
insert into students values(4,null,34,'Analytics');
insert into students (sid,age,course) values(4,34,'Analytics');
select * from students;
alter table students modify column sname char(30) NOT NULL DEFAULT 'Kumar';
desc students;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors (authorid integer PRIMARY KEY, name varchar(30));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE );
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 88 where authorid = 8;
select * from authors;
select * from books;
show create table books;
exit
use practicedb;
show tables;
create table test(id integer PRIMARY KEY AUTO_INCREMENT, name char(30), age integer);
desc test;
insert into test (name,age) values('Tom',33);
select * from test;
insert into test (name,age) values('Jon',34);
select * from test;
insert into test (name,age) values('Tim',14),('Jim',15);
select * from test;
insert into test values(10,'Kim',30);
select * from test;
insert into test (name,age) values('Hugh',60);
select * from test;
delete from test;
select * from test;
insert into test (name,age) values('Jon',34);
select * from test;
insert into test (name,age) values('Tim',14),('Jim',15);
select * from test;
truncate test;
select * from test;
insert into test (name,age) values('Jon',34);
select * from test;
truncate test;
alter table test auto_increment = 100;
insert into test (name,age) values('Jon',34);
alter table test auto_increment = 100;
select * from test;
d
;
drop table test;
create table test(id integer PRIMARY KEY AUTO_INCREMENT = 100, name char(30), age integer);
create table test(id integer PRIMARY KEY AUTO_INCREMENT 100, name char(30), age integer);
create table test(id integer PRIMARY KEY AUTO_INCREMENT , name char(30), age integer);
alter table test auto_increment = 100;
insert into test (name,age) values('Jon',34);
select * from test;
insert into test (name,age) values('Harry',44);
select * from test;
select * from students;
insert into students values(5,'Harry',26,'Magic');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(6,'Potter',35,'Magic');
select * from students;
rollback;
select * from students;
insert into students values(6,'Potter',35,'Magic');
commit;
select * from students;
rollback;
set autocommit = 1;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
delete from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
rollback;
select * from tt;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
exit
use practicedb;
show create table authors;
desc students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
show indexes from employees;
select * from universities;
use practicedb;
select * from universities;
use practicedb;
select * from myemp limit 10;
select first_name, last_name , job_id, salary from myemp;
create view myview as select first_name, last_name , job_id, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.id,mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
select * from myview;
show tables;
select * from myemp;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(8,'Larry Collins');
select * from aview;
select * from authors;
insert into aview values(18,'Dominique Lap');
select * from aview;
select * from dep60;
drop view aview;
create view aview as select * from authors where authorid < 15 WITH CHECK OPTION;
insert into aview values(19,'Dominique Lap');
insert into aview values(9,'Nith Author');
select * from aview;
select * from authors;
call myproc();
call myproc(5);
call myproc(7);
call myproc(10);
call myproc(6);
call hello();
use practicedb;
call proc_id();
call proc_if();
call proc_if(9);
call proc_if(-9);
call proc_if(11);
call proc_if(101);
select * from cats;
show tables;
select *n from myord;
select * from myord;
select * from basic_pays;
create table marks(sid integer primary key, sname varchar(30), mark integer)
;
insert into marks values(1,'Tom',45),(2,'Tim',87),(3,'Jim',56),(4,'Jon',78),(5,'Harry',52),(6,'Potter',59);
select * from marks;
call grade();
call grades();
call grades(5);
call grades(4);
call grades(2);
call proc_elsif(6);
call proc_elseif(6);
call proc_elseif(16);
call proc_elseif(3);
call proc_elseif(2);
select * from myemp where salary between 10000 and 20000;
select * from marks;
call grades(1);
call grades(2);
call grades(3);
call grades(4);
call grades(5);
call grades(6);
call proc_case(3);
call proc_case(1);
call proc_case(7);
call proc_case(11);
exit
use practicedb;
call proc_loop();
call proc_loop(2);
call proc_loop(3);
call proc_loop(4);
call proc_loop(7);
call proc_repeat();
call proc_repeat(4);
call proc_repeat(5);
call proc_while(2);
call proc_while(4);
call proc_ins();
select * from authors;
select * from autors;
select x from authors;
select * from memp;
call proc_except();
select x from authors;
exit
use practicedb;
desc payments;
select * from payments;
insert into payments values(1,750);
select * from payments;
insert into payments values(1,null);
call payments(2,200);
select * from payments;
call payments(3,null);
desc fraud;
select now();
select * from fraud;
select * from payments;
call payments(3,null);
select * from payments;
select * from fraud;
call payments(4,100);
select * from payments;
select * from fraud;
call payments(5, null);
select * from payments;
select * from fraud;
select * from marks;
call grades(1);
call grades(2);
select * from authors;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
select * from products limit 10;
call orders();
select * from orders;
select * from marks;
exit
use practicedb;
select * from myemp limit 10;
select emp_id, first_name,last_name, hire_date, experience(emp_id) from myemp limit 15;
select *  from marks;
select *, grade(mark) as grade  from marks;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
desc book_sales;
select * from books;
update books set sales = sales + 6 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales + 12 where bookid = 9;
select * from books;
select * from book_sales;
update books set sales = sales + 2 where bookid = 6;
select * from books;
select * from book_sales;
select * from sales;
use practicedb;
select * from sales;
select *, sum(sale) over (partition by fiscal_year) as total;
select *, sum(sale) over (partition by fiscal_year) as total from sales;
CREATE TABLE orders (
  order_id INT,
  order_date DATE,
  order_total INT
);
CREATE TABLE orders (   order_id INT,   order_date DATE,   order_total INT );
INSERT INTO orders (order_id, order_date, order_total) VALUES
(1, '2020-04-03', 100),
(2, '2020-04-03', 250),
(3, '2020-04-04', 80),
(4, '2020-04-05', 10),
(5, '2020-04-03', 120),
(6, '2020-04-04', 90),
(7, '2020-04-04', 50),
(8, '2020-04-04', 15);
INSERT INTO orders (order_id, order_date, order_total) VALUES (1, '2020-04-03', 100), (2, '2020-04-03', 250), (3, '2020-04-04', 80), (4, '2020-04-05', 10), (5, '2020-04-03', 120), (6, '2020-04-04', 90), (7, '2020-04-04', 50), (8, '2020-04-04', 15);
CREATE TABLE w_orders (
  order_id INT,
  order_date DATE,
  order_total INT
);
CREATE TABLE w_orders (   order_id INT,   order_date DATE,   order_total INT );
INSERT INTO w_orders (order_id, order_date, order_total) VALUES
(1, '2020-04-03', 100),
(2, '2020-04-03', 250),
(3, '2020-04-04', 80),
(4, '2020-04-05', 10),
(5, '2020-04-03', 120),
(6, '2020-04-04', 90),
(7, '2020-04-04', 50),
(8, '2020-04-04', 15);
INSERT INTO w_orders (order_id, order_date, order_total) VALUES (1, '2020-04-03', 100), (2, '2020-04-03', 250), (3, '2020-04-04', 80), (4, '2020-04-05', 10), (5, '2020-04-03', 120), (6, '2020-04-04', 90), (7, '2020-04-04', 50), (8, '2020-04-04', 15);
select *, sum(order_total) over () from w_orders;
select *, sum(order_total) over (order by oder_date) from w_orders;
select *, sum(order_total) over (order by order_date) from w_orders;
select *, sum(order_total) over (order by order_id) from w_orders;
select dep_id, avg(salary) from myemp group by dep_id;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id);
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) from myemp limit 20;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) , max(salary) over (partition by dep_id) from myemp limit 20;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w from myemp window w as (partition by dep-id) limit 20;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over w , max(salary) over w from myemp window w as (partition by dep_id) limit 20;
select * from cats;
select name, breed, weight, avg(weight) over(partition by breed) from cats;
select name, breed, weight, avg(weight) over(partition by breed) avg_weight from cats;
select * from (select name, breed, weight, avg(weight) over(partition by breed) avg_weight from cats) e;
select * from (select name, breed, weight, avg(weight) over(partition by breed) avg_weight from cats) e where weight > avg_weight;
with e as (select name, breed, weight, avg(weight) over(partition by breed) avg_weight from cats)
select * from e where weight > avg_weight;
with e as (select name, breed, weight, avg(weight) over(partition by breed) avg_weight from cats) select * from e where weight > avg_weight;
select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp limit 20;
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp)
;
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp) with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) from myemp);
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp)
select * from cte where salary  = max_sal;
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp) select * from cte where salary  = max_sal;
select * from marks;
insert into marks values(7,'Kate', 45),(8,'Meghan',52),(9,'William',34),(10,'Hugh',45);
select * from marks;
select *, rank() over ( order by mark desc) from marks;
select *, rank() over ( order by mark desc) as rnk from marks;
select *, dense_rank() over ( order by mark desc) as rnk from marks;
with cte as (select *, dense_rank() over ( order by mark desc) as rnk from marks)
select * from cte where rnk = 3;
with cte as (select *, dense_rank() over ( order by mark desc) as rnk from marks) select * from cte where rnk = 3;
select emp_id, first_name, last_name, salary, dense_rank() over (order by salalry desc) as rnk from myemp limit 20;
select emp_id, first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp limit 20;
with cte as (select emp_id, first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp)
select * from cte where rnk = 3;
with cte as (select emp_id, first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from cte where rnk = 3;
with cte as (select emp_id, first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from cte where rnk in (3,5,7);
with cte as (select emp_id, first_name, last_name, salary, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp) select * from cte where rnk = 2;
select * from sales;
select *, dense_rank() over (partition by fiscal_year order by sale) as rnk from sales;
exit
use practicedb;
DROP TABLE IF EXISTS `uber_logs`;
CREATE TABLE `uber_logs` (
  `request_id` int DEFAULT NULL,
  `request_date` text,
  `request_status` text,
  `distance_to_travel` double DEFAULT NULL,
  `monetary_cost` double DEFAULT NULL,
  `driver_to_client_distance` double DEFAULT NULL
) ;
CREATE TABLE `uber_logs` (   `request_id` int DEFAULT NULL,   `request_date` text,   `request_status` text,   `distance_to_travel` double DEFAULT NULL,   `monetary_cost` double DEFAULT NULL,   `driver_to_client_distance` double DEFAULT NULL );
select * from uber_logs;
select *, avg(distance_to_travel/monetary_cost) over ( partition by month(request_date)) as dd from uber_logs;
select * from w_products;
select * from w_orders;
select *, sum(order_total) over(order by order_date) from w_orders;
select *, sum(order_total) over(order by order_id) from w_orders;
select * from w_orders;
select * , sum(order_total) over (order by order_id) as running_total from w_orders;
select * from trains;
select * , lead(time,1) over( partition by train_id order by time)  as next_station from trains; 
with cte as (select * , lead(time,1) over( partition by train_id order by time)  as next_station from trains)
select *, subtime(next_station,time) as journey_time from cte;
with cte as (select * , lead(time,1) over( partition by train_id order by time)  as next_station from trains) select *, subtime(next_station,time) as journey_time from cte;
select * from students_d;
select *, lead(attendance,1) over(partition by student_id order by date_id) as day2 , lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d;
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day2 , lead(attendance,2) over (partition by student_id ord
;
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day2 , lead(attendance,2) over (partition by student_id ord
er by date_id) as day3 from students_d) selectdistinct student_id from cte where attendance='p' and day2 = 'p' and day3 = 'p';
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day2 , lead(attendance,2) over (partition by student_id ord er by date_id) as day3 from students_d) selectdistinct student_id from cte where attendance='p' and day2 = 'p' and day3 = 'p';
with cte as (select *, lead(attendance,1) over(partition by student_id order by date_id) as day2 , lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d) select distinct student_id from cte where attendance='p' and day2 = 'p' and day3 = 'p';
select * from uber_logs;
delete from uber_logs;
select * from uber_logs;
select * , distance_to_travel/monetary_cost as distance_per_dollar, avg(distance_to_travel/monetary_cost) over(partition by month(request_date)) as avg_dtd from uber_logs;
select abs(10 -18) as res;
show tables;
select * from employees;
select * from uber_logs;
select *, distance_to_travel/monetary_cost as dist_per_doll , avg(distance_to_travel/monetary_cost) over (partition by month(request_date)) as avg_dtd from uber_logs;
with cte as (select *, distance_to_travel/monetary_cost as dist_per_doll , avg(distance_to_travel/monetary_cost) over (partition by month(request_date)) as avg_dtd from uber_logs) select *, dist_per_doll - avg_dtd as diff from cte;
with cte as (select request_id, request_date, distance_to_travel, monetary_cost, distance_to_travel/monetary_cost as dist_per_doll , avg(distance_to_travel/monetary_cost) over (partition by month(request_date)) as avg_dtd from uber_logs) select *, dist_per_doll - avg_dtd as diff from cte;
with cte as (select request_id, request_date, distance_to_travel, monetary_cost, round(distance_to_travel/monetary_cost,2) as dist_per_doll , round(avg(distance_to_travel/monetary_cost) over (partition by month(request_date)),2) as avg_dtd from uber_logs) select *, dist_per_doll - avg_dtd as diff from cte;
with cte as 
(select request_id, request_date, distance_to_travel, monetary_cost, round(distance_to_travel/monetary_cost,2) as dist_per_doll , 
round(avg(distance_to_travel/monetary_cost) over (partition by month(request_date)),2) as avg_dtd 
from uber_logs) 
select *, round(abs(dist_per_doll - avg_dtd),2) as diff 
from cte;
with cte as  (select request_id, request_date, distance_to_travel, monetary_cost, round(distance_to_travel/monetary_cost,2) as dist_per_doll ,  round(avg(distance_to_travel/monetary_cost) over (partition by month(request_date)),2) as avg_dtd  from uber_logs)  select *, round(abs(dist_per_doll - avg_dtd),2) as diff  from cte;
select max(salary) from myemp;
select * from myemp where salary = (select max(salary) from myemp);
select * from employees;
seelect * from offices;
select * from offices;
select * from employees where officecode in ( select officecode from offices where country= 'usa');
select * from trains;
exit
use practicedb;
create table patients(pid integer, pname varchar(255), dob date, toa datetime);
show tables;
desc patients;
insert into patients values(1,'Harry','2000-01-26', '2023-04-04 08:30:00');
insert into patients values(2,'Potter','2002-10-11','2023-04-03 20:30:00');
select * from patients;
select 5 + 5 as result;
select 5 = 5 as result;
select 5 <> 5 as result;
select 5 + null as result;
select 5 = null as result;
create table patients(id integer, name char(10));
create table if not exisits patients(id integer, name char(!0));
create table if not exists patients(id integer, name char(10));
create table test(id integer);
show tables;
drop table test;
show tables;
exit
use practicedb;
select * from students;
alter table students add column marks integer default 0;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
show tables;
select * from myclass;
select * from students;
insert into students values(3,'Jon', null, 50);
select * from students;
insert into students (std_id, sname,marks) values(4,'Jim',77);
select * from students;
insert into students (std_id, sname, course) values(5,'Hugh','Analytics');
select * from students;
insert into students values(6,'Harry','Magic',67),(7,'Potter','Magic',89),(8,'Peter','Dance',88);
select * from students;
update students set sname = 'Tom' where std_id = 1;
select * from students;
update students set marks = null where marks = 0;
select * from students;
update students set course='Dance', marks=80 where std_id = 6;
select * from students;
update students set course = 'Mysql' ;
select * from students;
delete from students where std_id = 8;
select * from students;
delete from students where marks = null;
delete from students where marks is null;
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry','Magic',67),(7,'Potter','Magic',89),(8,'Peter','Dance',88);
select * from students;
truncate students;
select * from students;
show create table patients;
exit
use practicedb;
show tables;
select * from students;
select * from myemp;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id from myemp;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus , salary+salary*0.2 as total_sal from myemp limit 10;
select * from myemp limit 10;
select dep_id from myemp;
select distinct dep_id from myemp;
select * from myemp limit 10;
select distinct job_id from myemp;
select * from person;
select distinct fname.lname from person;
select distinct fname,lname from person;
select * from myemp limit 10;
select * from myemp order by dep_id;
select * from myemp order by hire_date desc;
select * from myemp order by dep_id, mgr_id;
select * from myemp order by dep_id, hire_date desc;
select emp_id, first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date desc;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date < '2000-01-01';
select * from myemp where salary between 10000 and 15000;
select * from myemp where salary between '1987-01-01' and '1987-12-31';
select * from myemp where hire_date between '1987-01-01' and '1987-12-31';
select * from myemp where dep_id != 80;
select * from myemp where dep_id = 80 and salary > 10000;
select * from myemp where dep_id = 60 or dep_id = 70 or dep_id= 40;
select * from myemp where dep_id IN (60,70,40,20);
select * from myemp where first_name like 'a%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%a%';
select * from myemp;
select * from myemp where job_id like 'SA_%';
select * from myemp where job_id like '%_CLERK';
select * from myemp where job_id like 'J____';
select * from myemp where first_name like 'J____';
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '% %';
select * from patients;
select adddate(dob, interval 20 day) as res from patients;
select year(dob) from patients;
select year(dob), month(d0b) from patients;
select year(dob), month(dob) from patients;
select year(dob), month(dob), monthname(dob) from patients;
select hire_date, year(hire_dsate) from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp where first_name NOT like 'A%';
select left(first_name,1) from myemp limit 10;
exit
use practicedb;
select * from cats;
select avg(weight) from cats;
select round(weight) from cats;
select sum(weight) from cats;
select max(weight), min(weight) from cats;
select count(*) from cats;
select count( distinct breed ) from cats;
select breed, avg(weight) from cats group by breed;
select breed, round(avg(weight), 2) from cats group by breed;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select * from cats;
select breed, avg(weight) from cats group by breed;
select name, breed, avg(weight) from cats group by breed;
select * from movies;
select * from members;
select * from movies inner join members ON movieid = id;
select * from movies left join members ON movieid = id;
select * from movies right join members ON movieid = id;
select * from authors;
select * from books;
select title, name from authors inner join members on authorid = authorid;
select title, name from authors inner join books on authorid = authorid;
select title, name from authors inner join books on books.authorid = authors.authorid;
select * from meals;
select * from drinks;
select * from meals cross jpoin drinks;
select * from meals cross join drinks;
select mealname, drinkname, meals.rate+drinks.rate as total_rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate+d.rate as total_rate from meals as m cross join drinks as d;
select * from meals;
select * from drinks;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name,
mgr.first_name, mgr.last_name
from myemp as emp join myemp as mgr
ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
exit
use practicedb;
select * from students;
desc students;
insert into students values(1,'Tom','Mysql',45);
insert into students values(1,'Tim','Mysql',45);
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(20) NOT NULL,
age integer CHECK(age > 18),
course varchar(20));
create table students( sid integer UNIQUE, sname varchar(20) NOT NULL, age integer CHECK(age > 18), course varchar(20));
desc students;
insert into students(1,'Tom',19,'Mysql');
insert into students values(1,'Tom',19,'Mysql');
insert into students values(1,'Tim',19,'Mysql');
insert into students values(2,'Tim',19,'Mysql');
select * from students;
insert into students values(null,'Jon',22,'Analytics');
select * from students;
insert into students values(null,'Jim',32,'Mysql');
select * from students;
insert into students values(3,'Pat',17,'Mysql');
insert into students values(3,'Pat',19,'Mysql');
select * from students;
desc students;
insert into students values(4, null,25,'Mysql');
insert into students (sid, age, course) values(5, 32,'Analytics');
alter table students modify column sname varchar(20) not null default 'Smith';
desc students;
insert into students values(4, null,25,'Mysql');
insert into students (sid, age, course) values(5, 32,'Analytics');
select * from students;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(100));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 88 where authorid = 8;
select * from authors;
select * from books;
show tables;
create table test(id integer PRIMARY KEY AUTO_INCREMENT,
name varchar(20),
age integer);
create table test(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc test;
insert into test (name, age) values('Tom',22);
select * from test;
insert into test (name, age) values('Tim',20),('Jim',25);
select * from test;
delete from test;
select * from test;
insert into test (name, age) values('Tom',22);
select * from test;
truncate test;
select * from test;
insert into test (name, age) values('Tom',22);
select * from test;
drop table test;
create table test(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
alter table test auto_increment = 100;
insert into test (name, age) values('Tom',22);
select * from test;
exit
use practicedb;
select * from students;
insert into students values(6,'Harry',44,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Kate',44,'Dance');
select * from students;
rollback;
select * from students;
insert into students values(7,'Kate',44,'Dance');
commit;
select * from students;
rollback;
select * from students;
set autocommit = 1;
show tables;
create table tt(id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
delete from tt;
start transactions;
start transaction;
insert into tt values('a');
insert into tt values('b');
select * from tt;
rollback;
select * from tt;
insert into tt values('a');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from tt;
rollback;
select * from tt;
select * from myemp limit 10;
create view myview as select emp_id, first_name, last_name, job_id, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm ON mv.id = mm.movieid;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select * from rentals;
show tables;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(20,'Jon Hamm');
select * from authors;
select * from aview;
drop view aview;
create view aview as select * from authors where authorid < 15 WITH CHECK OPTION;
insert into aview values(21, 'TOM CRUISE');
insert into aview values(14, 'TOM CRUISE');
select * from aview;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
exit
use practicedb;
show create table books;
desc students;
desc authors;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
select * from employees limit 10;
show indexes from employees;
drop index hidx on emploees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
show indexes from employees;
call myproc();
use practicedb;
call myproc();
select * from books;
call myproc();
select * from books;
call myproc(11);
call myproc(14);
select * from books;
call myproc(14);
exit
use practicedb;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
show tables;
show create table books;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select * from marks
;
insert into marks values(7,'Pat',56),(8,'Lara',59),(9,'Hugh',56);
select * from marks;
select *, rank() over (order by marks desc) as rnk from marks;
select *, rank() over (order by mark desc) as rnk from marks;
select *, dense_rank() over (order by mark desc) as rnk from marks;
select * from ( select emp_id, first_name, last_name from myemp where wmp_id < 220) as e;
select * from ( select emp_id, first_name, last_name from myemp where emp_id < 220) as e;
select * from ( select emp_id, first_name, last_name from myemp where emp_id < 110) as e;
use practicedb;
call proc_if(3);
call proc_if(-3);
call proc_if(3);
call proc_if(-3);
call proc_if(0);
call grade(67);
call grades(67);
call grades(80);
call grades(30);
call proc_simpleloop();
call proc_simpleloop(2);
call proc_simpleloop(5);
call proc_simpleloop(3);
call proc_repeat(4);
call proc_while(5);
select * from hjhjhh;
call except1();
select title from authors;
call except1();
exit
use practicedb;
select * from payments;
desc payments;
insert into payments values(1,null);
desc fraud;
call make_payment(1,200);
select * from payments;
call make_payment(2, null);
select * from fraud;
call make_payment(2, 500);
select * from payments;
select * from fraud;
call make_payment(3,null);
select * from payments;
select * from fraud;
call make_payment(4,null);
select * from payments;
select * from fraud;
select * from marks;
call print_grades();
select * from products limit 10;
desc orders;
select * from orders;
select * from products limit 20;
desc orders;
call place_order();
select * from orders;
use practicedb;
̦0
;
select hire_date, year(hire_date) from myemp limit 10;
select * from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp where exp(emp_id) < 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp where exp(emp_id) < 20;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp where exp(emp_id) < 40;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
select * from book_sales;
update books set sales = sales+3 where bookid = 6;
select * from books;
select * from book_sales;
update books set sales = sales+1 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales+2 where bookid = 6;
select * from books;
select * from book_sales;
select dep_id, avg(salary) from myemp group by dep_id;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal from myemp limit 20;
select first_name, last_name, salary, salary*0.2 as bonus from myemp limit 20;
with cte as (select first_name, last_name, salary, salary*0.2 as bonus from myemp)
select * from cte where cte.bonus > 3000;
with cte as (select first_name, last_name, salary, salary*0.2 as bonus from myemp) select * from cte where cte.bonus > 3000;
exit
use practicedb;
show tables;
select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp limit 25;
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp)
select * from cte where cte.salary = max_sal;
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp) select * from cte where cte.salary = max_sal;
select * from cats;
select *, avg(weight) over (partition by breed) as avg_wt from cats;
with cte as (select *, avg(weight) over (partition by breed) as avg_wt from cats)
select name, breed, weight, avg_wt from cte where weight < avg_wt;
with cte as (select *, avg(weight) over (partition by breed) as avg_wt from cats) select name, breed, weight, avg_wt from cte where weight < avg_wt;
with cte as (select *, avg(weight) over (partition by breed) as avg_wt from cats) select name, breed, weight, round(avg_wt,2) from cte where weight < avg_wt;
select * from marks;
select * , rank() over ( order by mark desc) as rnk from marks;
select * , dense_rank() over ( order by mark desc) as rnk from marks;
with cte as (select * , dense_rank() over ( order by mark desc) as rnk from marks)
select * from cte where rnk = 3;
with cte as (select * , dense_rank() over ( order by mark desc) as rnk from marks) select * from cte where rnk = 3;
with cte as (select * , dense_rank() over ( order by salary desc) as rnk from myemp) select * from cte where rnk = 3;
select * , dense_rank() over (partition by dep_id order by hire_date) as rnk from myemp limit 30;
with cte as (select * , dense_rank() over (partition by dep_id order by hire_date) as rnk from myemp)
select * from cte where rnk = 1;
with cte as (select * , dense_rank() over (partition by dep_id order by hire_date) as rnk from myemp) select * from cte where rnk = 1;
select * from sales;
select *, dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select * , percent_rank() over ( order by mark desc) as rnk from marks;
select * , percent_rank() over ( order by mark desc) , cume_dist() over(order by mark desc) as rnk from marks;
select * , percent_rank() over ( order by mark) , cume_dist() over(order by mark ) as rnk from marks;
select * from offices;
select * from cities;
select * from employees;
select * from myemp e where salary = (select max(salary) from myemp where e.dep_id = dep_id);
with cte as (select emp_id, first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as max_sal from myemp) select * from cte where cte.salary = max_sal;
select * , percent_rank() over (order by mark) from marks;
select * , row_number() over (order by mark) from marks;
select * from trains;
select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains;
with cte as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains)
select *, subtime(nxt_station, time) as journey from cte;
with cte as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains) select *, subtime(nxt_station, time) as journey from cte;
select * from students_d;
select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d;
with cte as (select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order
;
with cte as (select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d) select * from cte where attendance='p' and day2 = 'p' and day3 = 'p';
select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d;
with cte as (select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d) select distinct student_id from cte where attendance='p' and day2 = 'p' and day3 = 'p';
select * from myemp where salary = (select max(salary) from myemp);
select max(salary) from myemp;
select * from employees;
select * from offices;
select * from offices where country = 'usa';
select office  from offices where country = 'usa';
select officecode  from offices where country = 'usa';
select * from employees where officecode in (select officecode from offices where country = 'usa');
exit
use practicedb;
show databases;
desc students;
select * from students;
show tables;
show create table students;
desc students;
show indexes from students;
show create table students;
create table mytab(id integer PRIMARY KEY, naame varchar(50), age integer);
desc mytab;
create table mytab2 (id integer UNIQUE NOT NULL, name varchar(60), age integer);
desc mytab2;
drop table mytab2;
create table mytab2 (sid integer primary key ,id integer UNIQUE NOT NULL, name varchar(60), age integer);
desc mytab2;
select * from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select * from myemp limit 15;
select emp_id, first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal from myemp limit 15;
select emp_id, first_name, last_name, dep_id, salary - avg(salary) over (partition by dep_id) as diff_sal from myemp limit 15;
select eid, first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
with cte as select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp 
select * from cte where bonus > 3000;
with cte as select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp  select * from cte where bonus > 3000;
with cte as (select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp)  select * from cte where bonus > 3000;
select * from cte where bonus > 3000;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
with cte as (select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp)  select * from cte where bonus > 3000;
exit
use practicedb;
show tables;
create table students(id integer);
create table if not exists students(id integer);
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
alter table students change column sid std_id integer;
select * from students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
show tables;
create table mytab(id integer);
show tables;
drop table mytab;
show tables;
select * from students;
insert into students values(3,'Jon', Null, 78);
select * from students;
insert into students(std_id, sname, marks) values(4,'George',77);
select * from students;
desc students;
insert into students values(5,'Lara','Mysql',78),(6,'Harry','Magic',88),(7,'Potter','Magic', 98);
select * from students;
update students set course = 'Dance' where sname='potter';
select * from students;
update students set course = 'Data Science' where course is null;
select * from students;
update students set sname='Thomas', marks = 70 where std_id = 1;
select * from students;
update students set course = 'Mysql';
select * from students;
delete from students where std_id = 3;
select * from students;
delete from students;
select * from students;
insert into students values(5,'Lara','Mysql',78),(6,'Harry','Magic',88),(7,'Potter','Magic', 98);
select * from students;
truncate students;
show tables;
select * from students;
show create table students;
show tables;
select *  from cats;
select *  from cats limit 3;
select * from myemp limit 15;
select emp_id, first_name, last_name, salary from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus from myemp limit 10;
select emp_id, first_name, last_name, salary, salary*0.2 as bonus, salary+ salary*0.2 as total_sal from myemp limit 10;
select emp_id EmpNo, first_name FName, last_name LName, salary Income from myemp limit 10;
,0
;
select *  from cats limit 3;
select *  from cats;
select *  from cats order by weight;
select *  from cats order by color;
select *  from cats order by color, age;
select *  from cats order by color, age desc ;
select * from myemp limit 15;
select * from myemp order by hire_date limit 10;
select * from myemp order by dep_id , hire_date limit 20;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >= '2000-01-01';
select * from myemp where first_name like 'J%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'J____';
select * from myemp where first_name like '% %';
use practicedb;
select * from myemp limit 10;
select * from myemp where salary > 8000 and dep_id = 80;
select * from cats;
select * from cats where color = 'black' and age > 4;
select * from cats where color = 'black' or age > 4;
select * from myemp limit 10;
select * from myemp where salary > 5000 and job_id = 'it_prog';
select * from myemp where dep_id = 20 or dep_id = 40 or dep_id = 60;
select * from myemp where dep_id IN (20,40,60,70);
select * from myemp where salary >= 5000 and salary <= 10000;
select * from myemp where salary between 5000 and 10000;
select * from myemp where hire_date between '2000-01-01' and '2000-12-31';
select dep_id, avg(salary) from myemp group by dep_id;
select hire_date, year(hire_date) from myemp limit 20;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, avg(salary) from myemp group by dep_id, mgr_id;
select * from myemp limit 10;
select dep_id , count(*) from myemp group by dep_id;
select dep_id , count(*) from myemp group by dep_id having dep_id in (40,60,80);
select breed, max(weight) from cats greoup by breed;
select breed, max(weight) from cats group by breed;
select * from cats;
select * from myemp limit 10;
select * from products limit 5;
select productline, min(mrp) from products group by productline;
select productline, min(mrp), max(mrp), avg(mrp)  from products group by productline;
select productline, min(mrp), max(mrp), round( avg(mrp),2 )  from products group by productline;
select productline, min(mrp), max(mrp), round( avg(mrp))  from products group by productline;
select * from myemp limit 20;
select distinct dep_id from myemp;
select distinct dep_id from myemp order by dep_id;
select dep_id , count(*) from myemp group by dep_id having dep_id in (40,60,80);
select dep_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, avg(salary) from myemp group by dep_id, mgr_id order by dep_id;
select dep_id , count(*) from myemp group by dep_id having dep_id in (40,60,80) order dep_id;
select dep_id , count(*) from myemp group by dep_id having dep_id in (40,60,80) order by dep_id;
select distinct dep_id from myemp order by dep_id;
select * from person;
select distinct fname,lname from person;
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select title, first_name, last_name from movies inner join members on movieid = id;
select title, first_name, last_name from movies inner join members on movieid = id where category = 'animation';
select title, first_name, last_name from movies inner join members on movieid = id where category = 'animations';
select title, first_name, last_name from movies left join members on movieid = id;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, drinkname, meals.rate from meals cross join drinks;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select title, first_name, last_name from movies left join members on movieid = id;
select m.mealname, d.drinkname, m.rate, d.rate from meals as m cross join drinks as d;
select mv.title, mm.first_name, mm.last_name 
from movies as mv left join members as mm
on mm.movieid = mv.id;
select mv.title, mm.first_name, mm.last_name  from movies as mv left join members as mm on mm.movieid = mv.id;
select * from movies;
select * from members;
select mv.title, ifnull(mm.first_name,’-‘),  ifnull(mm.last_name ,’-‘)
from movies as mv left join members as mm
on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,’-‘),  ifnull(mm.last_name ,’-‘) from movies as mv left join members as mm on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,”-“),  ifnull(mm.last_name ,”-“)
from movies as mv left join members as mm
on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,”-“),  ifnull(mm.last_name ,”-“) from movies as mv left join members as mm on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,'-'),  ifnull(mm.last_name ,'-') from movies as mv left join members as mm on mm.movieid = mv.id;
select mv.title, ifnull(mm.first_name,'-') as fname,  ifnull(mm.last_name ,'-') as lname from movies as mv left join members as mm on mm.movieid = mv.id;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON emp.mgr_id = mgr.emp_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON mgr.emp_id = emp.mgr_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as mgr join myemp as emp ON mgr.emp_id =
emp.mgr_id;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as mgr join myemp as emp ON mgr.emp_id = emp.mgr_id;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr ON emp.emp_id = mgr.mgr_id;
select * from movies;
select * from members;
exit
use practicedb;
create table parents(Idinteger, FirstNamevarchar(20), Age integer,ParentId integer);
insert into parents values(1,'Jonathan',5,3),
(2,'Alexandra',7,3)
(3,'Barbara',30,4)
(4,'Tom',50,6)
(5,'George',55,6)
(6,'Amy',80,7)
(7,'Josephine',99,35));
insert into parents values(1,'Jonathan',5,3), (2,'Alexandra',7,3) (3,'Barbara',30,4) (4,'Tom',50,6) (5,'George',55,6) (6,'Amy',80,7) (7,'Josephine',99,35));
insert into parents values(1,'Jonathan',5,3),
(2,'Alexandra',7,3),
(3,'Barbara',30,4),
(4,'Tom',50,6),
(5,'George',55,6),
(6,'Amy',80,7),
(7,'Josephine',99,35));
insert into parents values(1,'Jonathan',5,3), (2,'Alexandra',7,3), (3,'Barbara',30,4), (4,'Tom',50,6), (5,'George',55,6), (6,'Amy',80,7), (7,'Josephine',99,35));
insert into parents values(1,'Jonathan',5,3),
(2,'Alexandra',7,3),
(3,'Barbara',30,4),
(4,'Tom',50,6),
(5,'George',55,6),
(6,'Amy',80,7),
(7,'Josephine',99,35);
insert into parents values(1,'Jonathan',5,3), (2,'Alexandra',7,3), (3,'Barbara',30,4), (4,'Tom',50,6), (5,'George',55,6), (6,'Amy',80,7), (7,'Josephine',99,35);
create table parents(Id integer, Name varchar(20), Age integer,ParentId integer);
insert into parents values(1,'Jonathan',5,3),
(2,'Alexandra',7,3),
(3,'Barbara',30,4),
(4,'Tom',50,6),
(5,'George',55,6),
(6,'Amy',80,7),
(7,'Josephine',99,35);
insert into parents values(1,'Jonathan',5,3), (2,'Alexandra',7,3), (3,'Barbara',30,4), (4,'Tom',50,6), (5,'George',55,6), (6,'Amy',80,7), (7,'Josephine',99,35);
select * from parents;
select * from parents par join parents chi on chi.parentId = par.id;
select * from students;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age >= 18),
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age >= 18), course varchar(30) );
desc students;
insert into students values(1,'Tom',23,'MySql');
select * from students;
insert into students values(1,'Tim',23,'MySql');
insert into students values(2,'Tim',23,'MySql');
select * from students;
insert into students values(3,Null,23,'Mysql');
insert into students (sid, age, course) values(3,23,'Analytics');
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values(3,23,'Analytics');
select * from students;
insert into students values(3,'Mary', 16,'Analytics');
insert into students values(3,'Mary', 26,'Analytics');
insert into students values(4,'Mary', 26,'Analytics');
select * from students;
show create table students;
create table mytab( id integer PRIMARY KEY, name varchar(20), age integer);
desc mytab;
insert into mytab values(1,'Jon',23);
insert into mytab values(null,'Jon',23);
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors( authorid integer PRIMARY KEY, name varchar(255) );
desc authors;
create table books (bookid integer PRIMARY KEY, title varchar(255) NOT NULL, aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
create table books (bookid integer PRIMARY KEY, title varchar(255) NOT NULL, aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
desc books;
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from books;
update authors set authorid = 88 where authorid = 8;
select * from authors;
select * from books;
create table tt (dd date check(date > current_date);
create table tt (dd date check(dd > current_date);
create table tt (dd date check(dd > current_date));
create table tt (od date, sd date check(sd > od));
create table tt (od date, sd date check(sd > '2023-05-04'));
drop table tt;
create table myproducts(pid integer PRIMARY KEY, pname varchar(255), vendor varchar(255));
create table myorders(oid integer PRIMARY KEY, pid integer, qty integer, ship_date date check(ship_date > '2023-05-04'),
FOREIGN KEY(pid) REFERENCES myproducts(pid));
create table myorders(oid integer PRIMARY KEY, pid integer, qty integer, ship_date date check(ship_date > '2023-05-04'), FOREIGN KEY(pid) REFERENCES myproducts(pid));
insert into myproducts values(1,'Soap','Santoor'),(2,'Shampoo', 'Clinic Plus'),(3,'Deo', 'Eau de Cologne'));
insert into myproducts values(1,'Soap','Santoor'),(2,'Shampoo', 'Clinic Plus'),(3,'Deo', 'Eau de Cologne');
select * from myproducts;
insert into myorders values(1,1,12,'20203-05-05'),(2,2,12,'2023-05-10'),(3,1,6,'2023-05-15');
insert into myorders values(1,1,12,'2023-05-05'),(2,2,12,'2023-05-10'),(3,1,6,'2023-05-15');
select * from myorders;
select * from myproducts;
select * from myorders;
select od.oid, pd.pname,pd.vendor, od.qty, od.ship_date 
from myproducts as pd inner join myorders as od
ON od.pid =pd.pid;
select od.oid, pd.pname,pd.vendor, od.qty, od.ship_date  from myproducts as pd inner join myorders as od ON od.pid =pd.pid;
select pd.pid, pd.pname, od.qty, od.ship_date from myproducts as pd left join myorders as od ON od.pid = pd.pid;
select pd.pid, pd.pname, ifnull(od.qty,0) as qty, ifnull(od.ship_date,'-') as shipDate from myproducts as pd left join myorders as od ON od.pid = pd.pid;
select * from parents;
select c.name, c.age, p.name, p.age 
from parents as c inner join parents as p
ON c.parent_id = p.id;
select c.name, c.age, p.name, p.age  from parents as c inner join parents as p ON c.parent_id = p.id;
select c.name, c.age, p.name, p.age  from parents as c inner join parents as p ON c.parentid = p.id;
exit
use practicedb;
create table mytab (id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
select  * from mytab;
drop table mytab;
create table mytab (id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc mytab;
insert into mytab (name, age) values('Tom',23);
select * from mytab;
insert into mytab (name, age) values('Tim',20),('Jim',30);
select * from mytab;
delete from mytab;
select * from mytab;
insert into mytab (name, age) values('Harry',17);
select * from mytab;
insert into mytab (name, age) values('Tim',20),('Jim',30);
select * from mytab;
truncate mytab;
select * from mytab;
insert into mytab (name, age) values('Harry',17);
select * from mytab;
insert into mytab (name, age) values('Potter',17);
select * from mytab;
rollback;
select * from mytab;
set autocommit 0;
set autocommit= 0;
select * from mytab;
insert into mytab (name, age) values('Peter',22);
select * from mytab;
rollback;
select * from mytab;
insert into mytab (name, age) values('Peter',22);
select * from mytab;
commit;
rollback;
select * from mytab;
set autocommit=1;
create table tt(id char);
insert into tt values('a'),('b');
select * from tt;
start transaction;
insert into tt values('c'),('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('e');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
select * from tt;
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('e'),('f');
select * from tt;
rollback;
select * from tt;
show create table students;
use employees;
select * from employees limit 10;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
show indexes from employees;
select * from employees where hire_date >= '2000-01-01';
use practicedb;
desc students;
show create table students;
show indexes fro students;
show indexes from students;
desc authors;
show indexes from authors;
select first_name from myemp limit 10;
select left(first_name,1) from myemp limit 10;
select left(first_name,1) from myemp not in ('a','e','i','o','u');
select first_name from myemp where left(first_name,1) not in ('a','e','i','o','u');
select first_name, last_name, job_id, salary from myemp limit 10;
create view myview as select first_name, last_name, job_id, salary from myemp;
select * from myview;
select * from movies;
select * from members;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm ON mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(20,'Tom Hanks');
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 15 WITH CHECK OPTION;
insert into aview values(21,'Tom CRUISE');
insert into aview values(11,'Tom CRUISE');
exit
use practicedb;
call myproc();
select * from movies;
call get_columns();
select * from offices;
select title , category from movies where id = 1;
select * from marks;
call get_address();
select * from marks;
call get_address();
select * from offices;
call get_address(5);
call get_address(1);
call get_address(7);
select * from offices;
call get_address(7);
call get_address(2);
select * from movies;
call get_columns(3);
call get_columns(10);
call proc_if(9);
call proc_if(0);
call proc_if(9);
call proc_if(-1);
select * from cats;
call get_weight('ashes');
call get_weight('Felix');
call get_weight('Oscar');
call proc_if(2);
call proc_if(-2);
call proc_if(0);
select * from marks;
call get_grade(1);
call get_grade(2);
call get_grade(3);
call get_grade(4);
call get_grade(5);
call get_grade(6);
call simpleloop();
exit
use practicedb;
select database;
select database();
select if(salary > 10000 ,'Rich','Poor') from myemp limit 10;
select bin(10);
select select user();
select user();
select version();
select * from city;
select * from country;
CREATE TABLE country (
    id int  PRIMARY KEY,
    country_name char(128)  NOT NULL,
    country_name_eng char(128)  NOT NULL,
    country_code char(8)  NOT NULL,
);
CREATE TABLE country (     id int  PRIMARY KEY,     country_name char(128)  NOT NULL,     country_name_eng char(128)  NOT NULL,     country_code char(8)  NOT NULL, );
-- Table: city
CREATE TABLE city (
    id int  PRIMARY KEY,
    city_name char(128)  NOT NULL,
    lat decimal(9,6)  NOT NULL,
    long decimal(9,6)  NOT NULL,
    country_id int  NOT NULL,
);
CREATE TABLE city (     id int  PRIMARY KEY,     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL, );
-- Table: country
CREATE TABLE country (
    id int  PRIMARY KEY,
    country_name char(128)  NOT NULL,
    country_name_eng char(128)  NOT NULL,
    country_code char(8)  NOT NULL
);
CREATE TABLE country (     id int  PRIMARY KEY,     country_name char(128)  NOT NULL,     country_name_eng char(128)  NOT NULL,     country_code char(8)  NOT NULL );
-- Table: city
CREATE TABLE city (
    id int  PRIMARY KEY,
    city_name char(128)  NOT NULL,
    lat decimal(9,6)  NOT NULL,
    long decimal(9,6)  NOT NULL,
    country_id int  NOT NULL
);
CREATE TABLE city (     id int  PRIMARY KEY,     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL );
CREATE TABLE city (
    id int  PRIMARY KEY,
    city_name char(128)  NOT NULL,
    lat decimal(9,6)  NOT NULL,
    long decimal(9,6)  NOT NULL,
    country_id int  NOT NULL
);
CREATE TABLE city (     id int  PRIMARY KEY,     city_name char(128)  NOT NULL,     lat decimal(9,6)  NOT NULL,     long decimal(9,6)  NOT NULL,     country_id int  NOT NULL );
CREATE TABLE city (
    id int  PRIMARY KEY,
    city_name varchar(128)  NOT NULL,
    latitude float(9,6)  NOT NULL,
    longitude float(9,6)  NOT NULL,
    country_id int  NOT NULL
);
CREATE TABLE city (     id int  PRIMARY KEY,     city_name varchar(128)  NOT NULL,     latitude float(9,6)  NOT NULL,     longitude float(9,6)  NOT NULL,     country_id int  NOT NULL );
INSERT INTO country (country_name, country_name_eng, country_code) VALUES ('Deutschland', 'Germany', 'DEU');
INSERT INTO country (country_name, country_name_eng, country_code) VALUES ('Srbija', 'Serbia', 'SRB');
INSERT INTO country (country_name, country_name_eng, country_code) VALUES ('Hrvatska', 'Croatia', 'HRV');
INSERT INTO country (country_name, country_name_eng, country_code) VALUES ('United Stated of America', 'United Stated of America', 'USA');
INSERT INTO country (country_name, country_name_eng, country_code) VALUES ('Polska', 'Poland', 'POL');
INSERT INTO city (city_name, lat, long, country_id) VALUES ('Berlin', 52.520008, 13.404954, 1);
INSERT INTO city (city_name, lat, long, country_id) VALUES ('Belgrade', 44.787197, 20.457273, 2);
INSERT INTO city (city_name, lat, long, country_id) VALUES ('Zagreb', 45.815399, 15.966568, 3);
INSERT INTO city (city_name, lat, long, country_id) VALUES ('New York', 40.73061, -73.935242, 4);
INSERT INTO city (city_name, lat, long, country_id) VALUES ('Los Angeles', 34.052235, -118.243683, 4);
INSERT INTO city (city_name, lat, long, country_id) VALUES ('Warsaw', 52.237049, 21.017532, 5);
INSERT INTO city VALUES ('Berlin', 52.520008, 13.404954, 1);
INSERT INTO city  VALUES ('Belgrade', 44.787197, 20.457273, 2);
INSERT INTO city VALUES ('Zagreb', 45.815399, 15.966568, 3);
INSERT INTO city VALUES ('New York', 40.73061, -73.935242, 4);
INSERT INTO city VALUES ('Los Angeles', 34.052235, -118.243683, 4);
INSERT INTO city  VALUES ('Warsaw', 52.237049, 21.017532, 5);
INSERT INTO country  VALUES (1,'Deutschland', 'Germany', 'DEU');
INSERT INTO country  VALUES (2,'Srbija', 'Serbia', 'SRB');
INSERT INTO country VALUES (3,'Hrvatska', 'Croatia', 'HRV');
INSERT INTO country VALUES (4,'United Stated of America', 'United Stated of America', 'USA');
INSERT INTO country VALUES (5,'Polska', 'Poland', 'POL');
INSERT INTO city VALUES (1,'Berlin', 52.520008, 13.404954, 1);
INSERT INTO city  VALUES (2,'Belgrade', 44.787197, 20.457273, 2);
INSERT INTO city VALUES (3,'Zagreb', 45.815399, 15.966568, 3);
INSERT INTO city VALUES (4,'New York', 40.73061, -73.935242, 4);
INSERT INTO city VALUES (5,'Los Angeles', 34.052235, -118.243683, 4);
INSERT INTO city  VALUES (6,'Warsaw', 52.237049, 21.017532, 5);
select * from country;
select * from city;
select * from customer;
select * from customers;
-- Table: customer
CREATE TABLE customer (
    id int  PRIMARY KEY AUTO_INCREMENT,
    customer_name varchar(255)  NOT NULL,
    city_id int  NOT NULL,
    customer_address varchar(255)  NOT NULL,
    next_call_date date  NULL,
    ts_inserted datetime  NOT NULL
);
CREATE TABLE customer (     id int  PRIMARY KEY AUTO_INCREMENT,     customer_name varchar(255)  NOT NULL,     city_id int  NOT NULL,     customer_address varchar(255)  NOT NULL,     next_call_date date  NULL,     ts_inserted datetime  NOT NULL );
select * from employee;
CREATE TABLE employee (
    id int  PRIMARY KEY AUTO_INCREMENT,
    first_name varchar(255)  NOT NULL,
    last_name varchar(255)  NOT NULL
);
CREATE TABLE employee (     id int  PRIMARY KEY AUTO_INCREMENT,     first_name varchar(255)  NOT NULL,     last_name varchar(255)  NOT NULL );
CREATE TABLE call (
    id int  PRIMARY KEY AUTO_INCREMENT,
    employee_id int  NOT NULL,
    customer_id int  NOT NULL,
    start_time datetime  NOT NULL,
    end_time datetime  NULL,
    call_outcome_id int  NULL
);
CREATE TABLE call (     id int  PRIMARY KEY AUTO_INCREMENT,     employee_id int  NOT NULL,     customer_id int  NOT NULL,     start_time datetime  NOT NULL,     end_time datetime  NULL,     call_outcome_id int  NULL );
CREATE TABLE calls (
    id int  PRIMARY KEY AUTO_INCREMENT,
    employee_id int  NOT NULL,
    customer_id int  NOT NULL,
    start_time datetime  NOT NULL,
    end_time datetime  NULL,
    call_outcome_id int  NULL
);
CREATE TABLE calls (     id int  PRIMARY KEY AUTO_INCREMENT,     employee_id int  NOT NULL,     customer_id int  NOT NULL,     start_time datetime  NOT NULL,     end_time datetime  NULL,     call_outcome_id int  NULL );
CREATE TABLE call_outcome (
    id int  PRIMARY KEY AUTO_INCREMENT,
    outcome_text char(128)  NOT NULL
);
CREATE TABLE call_outcome (     id int  PRIMARY KEY AUTO_INCREMENT,     outcome_text char(128)  NOT NULL );
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 4, '2020/1/11 9:0:15', '2020/1/11 9:12:22', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 2, '2020/1/11 9:14:50', '2020/1/11 9:20:1', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (2, 3, '2020/1/11 9:2:20', '2020/1/11 9:18:5', 3);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 1, '2020/1/11 9:24:15', '2020/1/11 9:25:5', 3);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 3, '2020/1/11 9:26:23', '2020/1/11 9:33:45', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 2, '2020/1/11 9:40:31', '2020/1/11 9:42:32', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (2, 4, '2020/1/11 9:41:17', '2020/1/11 9:45:21', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (1, 1, '2020/1/11 9:42:32', '2020/1/11 9:46:53', 3);
INSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (eINSERT INTO calls (e(employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (2, 2, '2020/1/11 9:50:12', '2020/1/11 9:55:35', 2);
select * from calls
;
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (2, 1, '2020/1/11 9:46:0', '2020/1/11 9:48:2', 2);
INSERT INTO calls (employee_id, customer_id, start_time, end_time, call_outcome_id) VALUES (2, 2, '2020/1/11 9:50:12', '2020/1/11 9:55:35', 2);
select * from calls;
INSERT INTO call_outcome (outcome_text) VALUES ('call started');
INSERT INTO call_outcome (outcome_text) VALUES ('finished - successfully');
INSERT INTO call_outcome (outcome_text) VALUES ('finished - unsuccessfully');
select subtime(end_time,start_time) from calls;
select start_time, end_time from city;
select start_time, end_time from calls;
select datediff(end_time,start_time) from calls;
select timediff(end_time,start_time) from calls;
INSERT INTO employee (first_name, last_name) VALUES ('Thomas (Neo)', 'Anderson');
INSERT INTO employee (first_name, last_name) VALUES ('Agent', 'Smith');
INSERT INTO customer (customer_name, city_id, customer_address, next_call_date, ts_inserted) VALUES ('Jewelry Store', 4, 'Long Street 120', '2020/1/21', '2020/1/9 14:1:20');
INSERT INTO customer (customer_name, city_id, customer_address, next_call_date, ts_inserted) VALUES ('Bakery', 1, 'Kurfürstendamm 25', '2020/2/21', '2020/1/9 17:52:15');
INSERT INTO customer (customer_name, city_id, customer_address, next_call_date, ts_inserted) VALUES ('Café', 1, 'Tauentzienstraße 44', '2020/1/21', '2020/1/10 8:2:49');
INSERT INTO customer (customer_name, city_id, customer_address, next_call_date, ts_inserted) VALUES ('Restaurant', 3, 'Ulica lipa 15', '2020/1/21', '2020/1/10 9:20:21');
select * from calls where timediff(end_date, start_date) > '00:10:00';
select * from calls where timediff(end_time, start_time) > '00:10:00';
select * from epl;
call simpleloop();
call simpleloop(4);
call simpleloop(7);
call repeat_loop(5);
select * from marks;
select * from authors;
call proc_cursor();
select * from authors;
select * from products;
select * from products limit 5;
desc orders;
select * from products limit 20;
select * from orders;
call orders();
select * from orders;
select * from marks;
select * from abahag;
select aid from authors;
call except_1;
desc payments;
insert into payments values(1,null);
desc fraud;
select * from payments;
call except_2(1,760);
select * from payments;
call except_2(2,null);
desc fraud;
select now();
call except_2(2,650);
select * from payments;
select * from fraud;
call except_2(3,null);
select * from payments;
select * from fraud;
call except_2(4,500);
select * from payments;
select * from fraud;
call except_2(5,null);
select * from payments;
select * from fraud;
select * from forbes;
select * from sales;
select * from marks;
select * from mark;
select * from marks;
select *, percent_rank() over (order by mark) from marks;
select *, percent_rank() over (order by mark) prnk from marks;
select *, percent_rank() over (order by mark) prnk, cume_dist() over(order by mark) as crnk from marks;
create table tmpmarks as select * from marks;
insert into tmpmarks values(7,'Pat',56),(8,'Pam',56),(9,'Lara',78),(10,'Larry',78);
select * from tmpmarks;
select *, percent_rank() over (order by mark) prnk, cume_dist() over(order by mark) as crnk from tmpmarks;
select adddate('2023-06-18', interval 15 day) ;
select * from patients;
select dob, adddate(dob, interval 10 day) as new_date from patients;
select now();
select curdate(), current_date(), current_date;
select curtime(), current_time(), current_time;
select * from patients;
insert into patients values(3,'King','2000-01-09', now());
select * from patients;
select year(dob), month(dob), day(dob) from patients;
select year(dob), monthname(dob), dayname(dob) from patients;
select dob, year(dob), monthname(dob), dayname(dob) from patients;
select left(pname,1), pname from patients;
select * from patients where left(pname)='p';
select * from patients where left(pname,1)='p';
select * from myemp where left(first_name,1) IN ('a','e','i','o','u');
select * from myemp where left(first_name,1) = right(first_name,1);
select concat(email,'@excelr.com') from myemp limit 10;
select lower(email) from myemp limitb 10;
select lower(email) from myemp limit 10;
select concat(lower(email),'@excelr.com') from myemp limit 10;
select reverse(first_name) from myemp limit 10;
select * from myemp limit 10;
select first_name, last_name, hire_date, emp_id, experience(emp_id) from myemp limit 10;
select * from myemp where experience(emp_id) < 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
update books set sales = sales + 2 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 12;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 5;
select * from books;
select * from book_sales;
show tables;
select * from skills;
select * from mycust;
select * from myorders;
select max(salary), dep_id from myemp group by dep_id;
select * from myemp limit 10;
select first_name, last_name, max(salary) over (partition by dep_id) from myemp limit 10;
select first_name, last_name,dep_id, max(salary) over (partition by dep_id) from myemp limit 10;
select first_name, last_name,dep_id,salary, avg(salary) over (partition by dep_id) from myemp limit 10;
select first_name, last_name,dep_id,salary, avg(salary) over (partition by dep_id) as avg_sal , from myemp limit 10;
select first_name, last_name,dep_id,salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as diff from myemp limit 10;
select * from (select first_name, last_name, job_id, salary from myemp where dep_id in (20,40,60));
select * from (select first_name, last_name, job_id, salary from myemp where dep_id in (20,40,60)) as e;
with e as ((select first_name, last_name, job_id, salary from myemp where dep_id in (20,40,60))
select * from e;
with e as ((select first_name, last_name, job_id, salary from myemp where dep_id in (20,40,60)) select * from e;
with e as (select first_name, last_name, job_id, salary from myemp where dep_id in (20,40,60)) select * from e;
select first_name, last_name,dep_id,salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as diff from myemp limit 10;
with cte as (select first_name, last_name,dep_id,salary, avg(salary) over (partition by dep_id) as avg_sal , salary - avg(salary) over (partition by dep_id) as diff from myemp) select * from cte where cte.diff > 0;
select * from cats;
select *, max(weight) over (partition by breed) as max_wt from cats;
select *, max(weight) over (partition by breed) as max_wt, weight - max(weight) over(partition by breed) as diff from cats;
select *, weight - avg(weight) over (partition by breed) as diff from cats;
with cte as (select *, weight - avg(weight) over (partition by breed) as diff from cats)
select * from cte where cte.diff < 0;
with cte as (select *, weight - avg(weight) over (partition by breed) as diff from cats) select * from cte where cte.diff < 0;
select * from products limit 20;
with cte as (select *, min(mrp) over(partition by productline) as min_mrp from products)
select * from cte where cte.mrp = cte.min_mrp
;
with cte as (select *, min(mrp) over(partition by productline) as min_mrp from products) select * from cte where cte.mrp = cte.min_mrp;
exit
use practicedb;
show tables;
select * from patients;
select * from patients group by *;
select * from mytab;
with e as (select * from mytab) delete from e where e.id = 1;
SELECT *. ROW_NUMBER () Over (PARTITION BY id ORDER BY id) as row_number;
select * from patients;
delete from patients where row_number 
;
delete from patients where row_number > 1;
select t1.*, t2.* from t1 inner join t2 ;
select t1.*, t2.* from patients t1 inner join patients t2 ;
select t1.*, t2.* from patients t1 inner join patients t2 on t1.pid = t2.pid;
select t1.*, t2.* from patients t1 inner join patients ;
CREATE TABLE marks(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    class VARCHAR(1),
    marks INT
);
CREATE TABLE marks(     id INT AUTO_INCREMENT PRIMARY KEY,     name VARCHAR(100),     class VARCHAR(1),     marks INT );
drop table marks;
CREATE TABLE marks(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    class VARCHAR(1),
    marks INT
);
CREATE TABLE marks(     id INT AUTO_INCREMENT PRIMARY KEY,     name VARCHAR(100),     class VARCHAR(1),     marks INT );
INSERT INTOmarks(name, class, marks) VALUES
('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60),
('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70),
('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42),
('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83),
('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30),
('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
INSERT INTOmarks(name, class, marks) VALUES ('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60), ('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70), ('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42), ('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83), ('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30), ('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
INSERT INTO marks(name, class, marks) VALUES
('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60),
('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70),
('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42),
('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83),
('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30),
('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
INSERT INTO marks(name, class, marks) VALUES ('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60), ('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70), ('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42), ('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83), ('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30), ('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
select * from marks;
SELECT id, name, class, marks, 
RANK() OVER(ORDER BY marks DESC) as studs_rank
FROM marks; 
SELECT id, name, class, marks,  RANK() OVER(ORDER BY marks DESC) as studs_rank FROM marks;
drop table marks;
create table marks(sid integer primary key, sname varchar(30), mark integer);
insert into marks values(1,'Tom',45),(2,'Tim',87),(3,'Jim',56),(4,'Jon',78),(5,'Harry',52),(6,'Potter',59);
drop table wmarks;
CREATE TABLE wmarks(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    class VARCHAR(1),
    marks INT
);
CREATE TABLE wmarks(     id INT AUTO_INCREMENT PRIMARY KEY,     name VARCHAR(100),     class VARCHAR(1),     marks INT );
INSERT INTO wmarks(name, class, marks) VALUES
('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60),
('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70),
('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42),
('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83),
('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30),
('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
INSERT INTO wmarks(name, class, marks) VALUES ('John', 'A', 90), ('Peter', 'A', 80),('Amy', 'B', 70),('Bob', 'B', 60), ('Cindy', 'E', 50),('David', 'C', 40),('Eve', 'D', 30),('Frank', 'D', 70), ('Grace', 'D', 50),('Harry', 'E', 40),('Irene', 'A', 80),('Jack', 'E', 42), ('Kate', 'E', 85),('Linda', 'C', 75),('Mary', 'A', 96),('Nancy', 'A', 83), ('Olivia', 'B', 71),('Peter', 'D', 90),('Quinn', 'E', 40),('Robert', 'A', 30), ('Sally', 'B', 80),('Tom', 'B', 73),('Ursula', 'B', 80),('Victor', 'E', 97);
select * from marks;
select * from sales;
select * from car_launches;
rename table car_launches to cars;
select * from cars;
select *, count(*) over(partition by company_name, year) from cars;
select *, count(*) over(partition by company_name, year) from cars order by company_name, year;
select company_name, year , count(*) from cars group by company_name, year;
with cte as (select company_name, year , count(*) from cars group by company_name, year )
select lead(;
with cte as (select company_name, year , count(*) from cars group by company_name, year ) select lead(;
select company_name, year , count(*) from cars group by company_name, year;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year)
select *, lead(cnt) over() from cte;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, lead(cnt) over() from cte;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, cnt - lead(cnt) over() from cte;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, cnt - lead(cnt) over(partition by company_name) from cte;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, cnt - lead(cnt) over(partition by company_name) as diff from cte where diff is not null;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, cnt - lead(cnt) over(partition by company_name order by year) as diff from cte where diff is not null;
with cte as (select company_name, year , count(*) as cnt from cars group by company_name, year) select *, cnt - lead(cnt) over(partition by company_name order by year) as diff from cte;
select * from cars where year = 2019;
select company_name, count(*) from cars where year = 2019 group by company_name;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name)
with t2 as (select company_name, count(*) from cars where year = 2020 group by company_name)
select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name) with t2 as (select company_name, count(*) from cars where year = 2020 group by company_name) select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name),
with t2 as (select company_name, count(*) from cars where year = 2020 group by company_name)
select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name), with t2 as (select company_name, count(*) from cars where year = 2020 group by company_name) select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name),
t2 as (select company_name, count(*) from cars where year = 2020 group by company_name)
select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name), t2 as (select company_name, count(*) from cars where year = 2020 group by company_name) select * from t1 join t2;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name),
t2 as (select company_name, count(*) from cars where year = 2020 group by company_name)
select * from t1 join t2 on t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) from cars where year = 2019 group by company_name), t2 as (select company_name, count(*) from cars where year = 2020 group by company_name) select * from t1 join t2 on t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) as cnt19 from cars where year = 2019 group by company_name),
t2 as (select company_name, count(*) as cnt20 from cars where year = 2020 group by company_name)
select company_name, cnt20 - cnt19 from t1 join t2 on t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) as cnt19 from cars where year = 2019 group by company_name), t2 as (select company_name, count(*) as cnt20 from cars where year = 2020 group by company_name) select company_name, cnt20 - cnt19 from t1 join t2 on t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) as cnt19 from cars where year = 2019 group by company_name),
t2 as (select company_name, count(*) as cnt20 from cars where year = 2020 group by company_name)
select t1.company_name, cnt20 - cnt19 from t1 join t2 on t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) as cnt19 from cars where year = 2019 group by company_name), t2 as (select company_name, count(*) as cnt20 from cars where year = 2020 group by company_name) select t1.company_name, cnt20 - cnt19 from t1 join t2 on t1.company_name = t2.company_name;
exit
use practicedb;
select * from wmarks;
select * from wmarks order by marks desc;
select *, rank() over( order by marks desc) as rnk from marks;
select *, rank() over( order by marks desc) as rnk from wmarks;
select *, dense_rank() over( order by marks desc) as rnk from wmarks;
select *, dense_rank() over( partition by class order by marks desc) as rnk from wmarks;
select * sales;
select * from sales;
select * , dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * from wmarks;
select *, percent_rank() over( order by marks desc) as rnk from wmarks;
select *, round(percent_rank() over( order by marks desc),2) as rnk from wmarks;
select * from myemp order by salary desc limit 10;
select *, dense_rank() over(order by salary desc) as rnk from myemp limit 10;
with cte as (select *, dense_rank() over(order by salary desc) as rnk from myemp
select emp_id, first_name, last_name, salary from cte where rnk = 3;
with cte as (select *, dense_rank() over(order by salary desc) as rnk from myemp select emp_id, first_name, last_name, salary from cte where rnk = 3;
with cte as (select *, dense_rank() over(order by salary desc) as rnk from myemp) select emp_id, first_name, last_name, salary from cte where rnk = 3;
with cte as (select *, dense_rank() over(partition by dep_id order by salary desc) as rnk from myemp) select emp_id, first_name, last_name, dep_id , salary from cte where rnk = 2;
select *, row_number() over( order by marks desc) as rnk from wmarks;
select * from trains;
select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains;
with cte as (select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains);
select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains;
with cte as (select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains)
select *, subtime(nect_station,time) as journey_time from cte;
with cte as (select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains) select *, subtime(nect_station,time) as journey_time from cte;
with cte as (select * , lag(time,1) over( partition by train_id order by time) as nect_station from trains)
with cte as (select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains);
with cte as (select * , lag(time,1) over( partition by train_id order by time) as nect_station from trains) with cte as (select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains);
select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains;
select * , lag(time,1) over( partition by train_id order by time) as nect_station from trains;
select * , lead(time,1) over( partition by train_id order by time) as nect_station from trains;
select train_id,station, time as departure_time, lead(station,1) over(partiotion by train_id order by time) as nxt_station, lead(time,1) over (partition by train_id order by time) as arrival_time from trains;
select train_id,station, time as departure_time, lead(station,1) over(partition by train_id order by time) as nxt_station, lead(time,1) over (partition by train_id order by time) as arrival_time from trains;
select train_id,station, time as departure_time, lead(station,1) over w as nxt_station, lead(time,1) over w as arrival_time from trains
window w as (partition by train_id order by time);
select train_id,station, time as departure_time, lead(station,1) over w as nxt_station, lead(time,1) over w as arrival_time from trains window w as (partition by train_id order by time);
select 
train_id,
station, 
time as departure_time, 
lead(station,1) over w as nxt_station, 
lead(time,1) over w as arrival_time 
from trains
window w as (partition by train_id order by time);
select  train_id, station,  time as departure_time,  lead(station,1) over w as nxt_station,  lead(time,1) over w as arrival_time  from trains window w as (partition by train_id order by time);
select * from cars;
select *, count(*) over(partition by company_name order by year) as products from cars;
select company_name, year, count(*) from cars group by company_name, year;
select company_name, year, count(*) as cnt from cars group by company_name, year;
with cte as (select company_name, year, count(*) as cnt from cars group by company_name, year)
select *, lead(cnt,1) over (partition by company_name order by year) as products from cte;
with cte as (select company_name, year, count(*) as cnt from cars group by company_name, year) select *, lead(cnt,1) over (partition by company_name order by year) as products from cte;
select * from students_d;
select * , lead(attendance,1) over (partition by student_id order by date) as day2,
lead(attendance,2) over (partition by student_id order by date) as day3 from students_d;
select * , lead(attendance,1) over (partition by student_id order by date) as day2, lead(attendance,2) over (partition by student_id order by date) as day3 from students_d;
select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d;
with cte as (select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d) select distinct student_id where attendance='p' and day2='p' and day3='p';
with cte as (select * , lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over (partition by student_id order by date_id) as day3 from students_d) select distinct student_id from cte where attendance='p' and day2='p' and day3='p';
call cursor_except();
select * from cars;
select * from cars where year = 2019;
select company_name, count(*) cnt19 from cars where year= 2019 group by company_name;
select company_name, count(*) cnt20 from cars where year= 2020 group by company_name;
with t1 as (select company_name, count(*) cnt19 from cars where year= 2019 group by company_name),
t2 as (select company_name, count(*) cnt20 from cars where year= 2020 group by company_name)
select t1.company_name, cnt20 - cnt19 as products from t1 inner join t2 where t1.company_name = t2.company_name;
with t1 as (select company_name, count(*) cnt19 from cars where year= 2019 group by company_name), t2 as (select company_name, count(*) cnt20 from cars where year= 2020 group by company_name) select t1.company_name, cnt20 - cnt19 as products from t1 inner join t2 where t1.company_name = t2.company_name;
exit
create database excelrdb;
use excelrdb;
create table students(sid integer, sname varchar(30), age integer, course char(30));
show tables;
create table patients(
pid integer,
pname varchar(20),
dob date,
toa datetime);
create table patients( pid integer, pname varchar(20), dob date, toa datetime);
select * from patients;
desc patients;
insert into patients values(1,'Harry','1997-07-14','2023-07-16 08:30:00');
insert into patients values(2,'Potter','2011-01-04', '2023-07-16 20:30:00');
select * from patients;
select 5+null ;
select 5+null as result;
select 5 = null as result;
select 5 = 4 as result;
select null = null  as result;
select 5 isnull as result;
select 5 is null as result;
create table patients(id integer);
create table if not exists patients(id integer);
desc students;
insert into students values(1,'Tom',23,'Mysql'),(2,''Jon',25,'Analytics');
;
insert into students values(1,'Tom',23,'Mysql'),(2,'Jon',25,'Analytics');
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column course varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
select * from myclass;
show tables;
create table test(id integer, name char(10));
show tables;
drop table test;
show tables;
select * from students;
desc students;
select * from students;
insert into students values(3,'Pat',null,67);
select * from students;
insert into students (sid, sname, marks) values(4,'Pete',89);
insert into students (std_id, sname, marks) values(4,'Pete',89);
select * from students;
insert into students values(5,'Larry','Data Science',77),(6,'Harry','Magic',99),(7,'Kate','Dance',79);
select * from students;
exit
use excelrdb;
select * from students;
update students set sname = 'Catherine' where std_id = 7;
select * from students;
update students set course = 'ANalytics' where sname='harry';
select * from students;
update students set course = 'Magic', marks=100 where sname='harry';
select * from students;
update students set course ='Mysql' where course = null;
select * from students;
update students set course ='Mysql' where course is null;
select * from students;
select * from students where marks = null;
select * from students where marks is null;
update students set course ='Mysql' ;
select * from students;
delete from students where std_id = 7;
select * from students;
delete from students;
select * from students;
insert into students values(5,'Larry','Data Science',77),(6,'Harry','Magic',99),(7,'Kate','Dance',79);
select * from students;
truncate students;
select * from students;
show create table patients;
select * from myemp;
select * from myemp limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
select first_name, last_name, job_id, salary , salary*0.2 from myemp limit 10;
select first_name, last_name, job_id, salary , salary*0.2 as bonus from myemp limit 10;
select first_name as fname, last_name lname, job_id as role , salary as income , salary*0.2 as bonus , salary + salary*0.2 as total_sal from myemp limit 10;
select * from person;
select distinct fname from person;
select distinct lname from person;
select distinct fname, lname from person;
select dep_id from meyemp;
select dep_id from myemp;
select distinct dep_id from myemp;
select distinct job_id from myemp;
select * from myemp limit 25;
select * from myemp order by hire_date ;
select emp_id, first_name,last_name, dep_id, hire_date from myemp order by dep_id, hire_date; 
select * from myemp where dep_id = 30;
select * from myemp where salary > 15000;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary between 10000 and 15000;
select * from myemp 
where hire_date >= '2001-01-01';
select * from myemp  where hire_date >= '2001-01-01';
select * from myemp  where hire_date between '1996-01-01' and '1996-12-31';
select * from myemp;
show tables;
select * from myemp where first_name like 'a%';
select * from myemp where first_name like 'a%a';
select * from myemp where first_name like 'j____';
select * from myemp where dep_id = 80 and salary > 8000;
select * from myemp where dep_id = 60 or salary > 8000;
select * from myemp where dep_id = 60 or salary > 10000;
select * from myemp where dep_id = 60 or dep_id = 40 or dep_id = 20;
select * from myemp where dep_id IN (20,40,60);
select * from myemp where dep_id NOT IN (20,40,60);
select emp_id, last_name, hire_date, year(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select count(emp_id) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select * from cats;
select breed, max(weight) from cats group by breed;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id;
select dep_id, mgr_id, avg(salary) from myemp group by dep_id, mgr_id order by dep_id;
select * from movies;
select * from members;
select * from movies inner join members on movieId = id;
select * from movies left join members on movieId = id;
select title, ifnull(first_name,'-') as fname, ifnull(last_name,'-') as lname from movies left join members on movieId = id;
select * from movies right join members on movieId = id;
exit
use excelrdb;
select * from meals;
select * from drinks;
select *  from  meals cross join drinks;
select mealname, rate from meals cross join drinks;
select mealname, meals.rate from meals cross join drinks;
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select movie.title, members.fist_name, members.last_name from movies inner join members on movies.id = members.movieid;
select movies.title, members.fist_name, members.last_name from movies inner join members on movies.id = members.movieid;
select movies.title, members.first_name, members.last_name from movies inner join members on movies.id = members.movieid;
select mv.title, 
mm.first_name, 
mm.last_name 
from movies as mv
inner join members as mm
on mv.id = mm.movieid;
select mv.title,  mm.first_name,  mm.last_name  from movies as mv inner join members as mm on mv.id = mm.movieid;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.first_name, emp.last_name, mgr.first_name, mgr.last_name 
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 25;
select emp.first_name, emp.last_name, mgr.first_name, mgr.last_name  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 25;
select concat(emp.first_name,' ', emp.last_name) as emp_name, concat(mgr.first_name,' ', mgr.last_name) as mgr_name   from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 25;
select * from movies;
select * from members;
select concat(emp.first_name,' ', emp.last_name) as emp_name, concat(mgr.first_name,' ', mgr.last_name) as mgr_name   from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 25;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(20) NOT NULL,
age integer CHECK(age > 18),
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(20) NOT NULL, age integer CHECK(age > 18), course varchar(30) );
desc students;
insert into students values(1,'Jon',23,'Mysql');
select * from students;
insert into students values(1,'Jim',23,'Mysql');
insert into students values(2,'Jim',23,'Mysql');
select * from students;
insert into students values(2,'Mary',13,'Mysql');
insert into students values(2,'Mary',19,'Mysql');
insert into students values(3,'Mary',19,'Mysql');
select * from students;
insert into students values(4,null,34,'Analytics');
insert into students (sid, age, course) values (5,22,'Data Science');
alter table students modify column sname varchar(30) not null default 'Kumar';
desc students;
insert into students (sid, age, course) values (5,22,'Data Science');
select * from students;
insert into students values(4,null,34,'Analytics');
exit
use excelrdb;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(100));
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) references authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) references authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
SELECT * from authors;
SELECT * from books;
delete from authors where authorid = 1;
SELECT * from authors;
SELECT * from books;
update authors set authorid = 88 where authorid = 8;
SELECT * from authors;
SELECT * from books;
create table test_product(productid integer PRIMARY KEY, pname varchar(30), description varchar(255));
create table test_vendor(vendorid integer PRIMARY KEY, vname varchar(20), location varchar(20));
create table test_orders (orderid integer PRIMARY KEY,
vendorid integer,
productid integer,
FOREIGN KEY(vendorid) references test_vendor(vendorid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(productid) references test_product(productid) ON DELETE CASCADE ON UPDATE CASCADE);
create table test_orders (orderid integer PRIMARY KEY, vendorid integer, productid integer, FOREIGN KEY(vendorid) references test_vendor(vendorid) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(productid) references test_product(productid) ON DELETE CASCADE ON UPDATE CASCADE);
create table test (id integer PRIMARY KEY AUTO_INCREMENT, name varchar(20), age integer);
desc test;
insert into test (name, age) values('Tom',17);
select * from test;
insert into test (name, age) values('Tim',22),('Jim',55);
select * from test;
delete from test;
select * from test;
insert into test (name, age) values('Tom',17);
select * from test;
truncate test;
select * from test;
insert into test (name, age) values('Tom',17);
select * from test;
exit
use excelrdb;
select * from students;
insert into students values(6,'Jim',30,'Mysql');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7, 'Harry',22,'Magic');
select * from students;
rollback;
select * from students;
set autocommit = 1;
create table tt (id char);
insert into tt values('a');
insert into tt values('b');
select * from tt;
start transaction;
insert into tt values('c');
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('d');
select * from tt;
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
select * from myemp limit 10;
create view myview as select first_name, last_name, job_id, dep_id from myemp;
select first_name, last_name, job_id, dep_id from myemp;
select * from myview;
select * from myview limit 10;
select * from movies;
select * from members;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp limit 20;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 10;
select * from aview;
insert into aview values(8,'Tom Cruise');
select * from aview;
select * from authors;
insert into aview values(20,'Jon Hamm');
select * from authors;
select * from aview;
drop view aview;
create view aview as select * from authors where authorid < 10 with check option;
insert into aview values(22,'Jon Hamm');
insert into aview values(9,'Jon Hamm');
drop view aview;
exit
use excelrdb;
call myproc();
call myproc(9);
call myproc(10);
call proc_lvar();
call proc_lvar(100);
select * from books;
call myproc(10);
call proc_if1(100);
call proc_if1(200);
select avg(salary) from myemp;
select * from marks;
call grades(1);
call grades(2);
call grades(3);
exit
use excelrdb;
call proc_simpleloop();
call proc_simpleloop(4);
call proc_simpleloop(7);
call proc_repeat(6);
call proc_while(5);
select * from xxxxx;
select address from students;
call proc_except1();
call proc_except1(1);
call proc_except1(11);
desc payments;
desc fraud;
select * from payments;
select * from fraud;
call fraud(1,500);
select * from payments;
call fraud(2,null);
select now();
call fraud(2,450);
select * from payments;
select * from fraud;
call fraud(3,null);
select * from payments;
select * from fraud;
call fraud(4,1000);
select * from payments;
select * from fraud;
call fraud(5, null);
select * from payments;
select * from fraud;
call proc_cursor();
exit
use excelrdb;
call proc_cursor();
select * from products limit 5;
select * from products limit 10;
desc orders;
select * from orders;
call orders();
select * from orders;
select hire_date, year(hire_date) from myemp limit 10;
select adddate(dob, interval 31 day), dob from patients;
select current_date, current_time;
select now();
select year(dob), month(dob), day(dob) from patients;
select year(dob), monthname(dob), dayname(dob) from patients;
select left(first_name,1) from myemp limit 10;
select first_name,left(first_name,1) from myemp limit 10;
select first_name,left(first_name,2) from myemp limit 10;
select first_name,right(first_name,1) from myemp limit 10;
select ltrim("  Hello   ");
select rtrim("  Hello   ");
select length("  Hello  "), length(rtrim("  Hello   "));
select * from myemp limit 10;
select * from marks;
select *, get_grade(mark) from marks;
select *, get_grades(mark) from marks;
exit
use excelrdb;
select * from books;
desc book_sales;
alter table books add column sales default 0;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
update books set sales = sales + 2 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 9;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 5;
select * from books;
select * from book_sales;
exit
use exceelrdb;
use excelrdb;
show create table patients;
desc students;
show indexes from students;
desc authors;
show indexes from authors;
use employees;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 15;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
select * from myemp limit -5;
exit
use learndb;
select * from students;
create table patients(pid integer, pname varchar(50), dob date, toa datetime);
desc patients;
insert into patients values(1,'Harry','1997-07-19', '2023-08-02 08:30:00');
insert into patients values(2,'Potter','2000-06-23','2023-08-02 20:30:00');
select * from patients;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
select * from myclass;
show tables;
exit
use excelrdb;
select dep_id, avg(salary) from myemp group by dep_id;
select * from myemp limit 10;
select dep_id, avg(salary) from myemp group by dep_id;
select first_name, last_name,dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal from myemp limit 10;
select first_name, last_name,dep_id, salary, avg(salary) over (partition by dep_id) as avg_sal , max(salary) over (partition by dep_id) as max_sal from myemp limit 10;
select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal , max(salary) over w as max_sal from myemp window w as (partition by dep_id) limit 10;
select emp_id, dep_id, first_name, last_name from myemp limit 10;
select * from (select emp_id, dep_id, first_name, last_name from myemp) as e where dep_id in (60,40);
with e as (select emp_id, dep_id, first_name, last_name from myemp)
select * from e where dep_id in (60,40);
with e as (select emp_id, dep_id, first_name, last_name from myemp) select * from e where dep_id in (60,40);
select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal , max(salary) over w as max_sal from myemp window w as (partition by dep_id) limit 10;
select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal from myemp window w as (partition by dep_id) limit 10;
with e as (select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal from myemp window w as (partition by dep_id))
select * from e where salary > avg_sal;
with e as (select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal from myemp window w as (partition by dep_id)) select * from e where salary > avg_sal;
select * from cats;
select name, breed, weight, max(weight) over (partition by breed) as max_weight from cats;
with e as (select name, breed, weight, max(weight) over (partition by breed) as max_weight from cats)
select * from e where weight = max_weight;
with e as (select name, breed, weight, max(weight) over (partition by breed) as max_weight from cats) select * from e where weight = max_weight;
with e as (select first_name, last_name,dep_id, salary, avg(salary) over w  as avg_sal from myemp window w as (partition by dep_id)) select * from e where salary > avg_sal;
select * from marks;
select *, rank() over(order by mark desc) as rnk from marks;
show tables;
select * from t;
select *, rank() over(order by mark desc) as rnk from marks;
select * from t;
select val, rank() over (order by val) from t;
select val, rank() over (order by val) as rnk from t;
select * from t;
select *, rank() over(order by mark desc) as rnk from marks;
select * from t;
select val, rank() over (order by val) as rnk from t;
select val, dense_rank() over (order by val) as rnk from t;
select *, dense_rank() over(order by weight desc) as rnk from cats;
select first_name, last_name,salary , dense_rank() over (order by salary desc) as rnk from myemp limit 10;
with e as (select first_name, last_name,salary , dense_rank() over (order by salary desc) as rnk from myemp)
select * from e where rnk = 3;
with e as (select first_name, last_name,salary , dense_rank() over (order by salary desc) as rnk from myemp) select * from e where rnk = 3;
exit
use excelrdb;
select * from cats;
select name, breed, case when weight > 5 then 'heavy' else 'light' as haha from cats;
select name, breed, case when weight > 5 then 'heavy' else 'light'  from cats;
select name, breed, case when weight > 5 then 'heavy' else 'light' end as haha from cats;
select coalesce(null,'a','b','c');
select coalesce('col', null,'a','b','c');
use classicmodels;
select * from customers;
select * from customers limit 5;
select customername,addresslin1,addressline2,city,state from customers limit 5;
select customername,addressline1,addressline2,city,state from customers limit 5;
select customername,addressline1,coalesce(addressline2,city,state) as address from customers limit 5;
select customername,addressline1,coalesce(addressline2,city,state) as address from customers limit 15;
select customername,addressline1,addressline2,city,state from customers limit 15;
select customername,addressline1,addressline2,city,state from customers;
select ifnull(addressline2,city) fropm customers limit 15;
select ifnull(addressline2,city) from customers limit 15;
select customername,addressline1,addressline2,city,state from customers limit 15;
exit
use learndb;
show tables;
create table test(id integer, name char(30) );
show tables;
drop table test;
show tables;
select * from students;
desc students;
insert into students values(1,'Pat','Mysql', 70);
insert into students values(4,'Pete', null, 77);
select * from students;
insert into students (sid,sname, marks) values(5,'Tim',90);
insert into students (std_id,sname, marks) values(5,'Tim',90);
select * from students;
insert into students values(6,'Harry','Magic',80),(7,'Potter','Magic',90),(8,'Kate','Dance',77);
select * from students;
update students set sname='Thomas' where std_id = 1;
select * from students;
update students set sname='Catherine', course='Singing' where std_id=8;
select * from students;
update students set marks=0 where course=null;
select * from students;
update students set marks=0 where course is null;
select * from students;
update students set marks = 50 where marks is null;
select * from students;
update students set marks = 50 ;
select * from students;
delete from students where std_id=1;
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry','Magic',80),(7,'Potter','Magic',90),(8,'Kate','Dance',77);
select * from students;
truncate students;
select * from students;
show create table students;
show create table patients;
use excelrdb;
select first_name, last_name, dep_id, salary, dense_rank() over ( order by salary desc) as rn from myemp limit 10;
with e as (select first_name, last_name, dep_id, salary, dense_rank() over ( order by salary desc) as rn from myemp)
select * from e where rnk = 3;
with e as (select first_name, last_name, dep_id, salary, dense_rank() over ( order by salary desc) as rn from myemp) select * from e where rnk = 3;
with e as (select first_name, last_name, dep_id, salary, dense_rank() over ( order by salary desc) as rn from myemp) select * from e where rn = 3;
with e as (select first_name, last_name, dep_id, salary, dense_rank() over ( partition by dep_id order by salary desc) as rn from myemp) select * from e where rn = 3;
with e as (select first_name, last_name, dep_id, salary, dense_rank() over ( partition by dep_id order by salary desc) as rn from myemp) select * from e where rn = 2;
select * from sales;
select *, dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select * from trains;
select *, lead(time,1) over(partition by train_id order by time) as nxt_stop from trains;
with e as (select *, lead(time,1) over(partition by train_id order by time) as nxt_stop from trains)
select train_id,station, time, subtime(nxt_stop,time) as journey_time from e;
with e as (select *, lead(time,1) over(partition by train_id order by time) as nxt_stop from trains) select train_id,station, time, subtime(nxt_stop,time) as journey_time from e;
select *,subtime(time, lead(time,1) over(partition by train_id order by time)) as jrn_time from trains;
select * from students_d;
select * , lead(attendance,1) over (partition by student_id order by date_id) as nxt_day, lead(attendance,2) over (partition by student_id order by date_id) as third_day from students_d;
with e as (select * , lead(attendance,1) over (partition by student_id order by date_id) as nxt_day, lead(attendance,2) over (partition by student_id order by date_id) as third_day from students_d)
select student_id from e where attendance='p' and nxt_day='p' and third_day='p';
with e as (select * , lead(attendance,1) over (partition by student_id order by date_id) as nxt_day, lead(attendance,2) over (partition by student_id order by date_id) as third_day from students_d) select student_id from e where attendance='p' and nxt_day='p' and third_day='p';
with e as (select * , lead(attendance,1) over (partition by student_id order by date_id) as nxt_day, lead(attendance,2) over (partition by student_id order by date_id) as third_day from students_d) select distinct student_id from e where attendance='p' and nxt_day='p' and third_day='p';
select * , dense_rank() over (order by mark desc) as rnk, row_number() over (order by mark desc) from marks;
select * , dense_rank() over (order by mark desc) as rnk, row_number() over (order by mark desc) as rownum from marks;
insert into marks values(7,'Lara', 59),(8,'Larry',52);
select * , dense_rank() over (order by mark desc) as rnk, row_number() over (order by mark desc) as rownum from marks;
use assignment;
select * from station;
select * from station where left(city,1) in ['a','e','i','o','u'];
select * from station where left(city,1) in ('a','e','i','o','u');
use classicmodels;
select * from orders limit 20;
select * from address;
show tables;
select * from customers;
select * from customers limit 10;
select customername, addressline1, addressline2,city,state from customers limit 30;
select customername, addressline1, ifnull(addressline2,'Not Given') as add2,city,state from customers limit 30;
select customername, addressline1, ifnull(addressline2,city) as add2,city,state from customers limit 30;
select customername, addressline1, coalesce(addressline2,city,state) as add2,city,state from customers limit 30;
select coalesce(null,'a','b','c') as res;
select coalesce(null,null,null,'a','b','c') as res;
select coalesce('a','b','c') as res;
exit
use learndb;
select * from myemp;
select * from myemp limit 10;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select * from myemp limit 5,5;
select emp_id, first_name, last_name, job_id from myemp limit 10;
select emp_id, first_name, last_name, job_id , salary, salary*0.2 from myemp limit 10;
select emp_id, first_name, last_name, job_id , salary, salary*0.2 as bonus from myemp limit 10;
select emp_id, first_name, last_name, job_id as role, salary, salary*0.2 as bonus from myemp limit 10;
select * from myemp limit 10;
select distinct dep_id from myemp;
select distinct job_id from myemp;
select * from person;
select distinct fname, lname from person;
select * from myemp limit 10;
select * from myemp order by dep_id;
select * from myemp order by dep_id desc;
select * from myemp order by hire_date asc;
select * from myemp order by dep_id, hire_date asc;
select emp_id, first_name, last_name, dep_id, hire_date from myemp order by dep_id, hire_date;
select * from cats;
select * from cats order by breed asc, weight desc;
select * from myemp where dep_id = 30;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where salary between 10000 and 15000;
select * from myemp where hire_date between '1987-01-01' and '1987-12-31';
select * from myemp where first_name like 'a%';
select * from myemp where first_name like 'a%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like 'j____';
select * from myemp where dep_id = 60 and salary > 10000;
select * from myemp where dep_id = 60 and salary > 8000;
select * from myemp where dep_id = 60 or salary > 8000;
select * from myemp where dep_id = 60 or salary > 15000;
select * from myemp where dep_id = 60 or dep_id=40 or dep_id = 30;
select * from myemp where dep_id in (60,40,30);
select * from myemp where mgr_id in (100,101);
select * from myemp where dep_id != 80;
select first_name , case when job_id = 'sh_clerk' then 'Clerical' when salary > 10000 then 'Great' end as val from myemp;
show tables;
select * from employees;
select * from city;
select * from employees e where officecode = (select country_id from city where e.officecode = country_id);
select * from employees e where officecode = (select country_id from city where country_id = e.officecode);
select country_id from city where country_id=1;
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select avg(salary), dep_id from myemp group by dep_id;
select first_name from myemp union select job_id from myemp;
select * from employees;
select * from city;
show tables;
select * from countey;
select * from country;
select * from employees;
select * from country;
select * from employees where officecode = (select id from country where country_code='usa');
select * from myemp where salary > (select avg(salary) from myemp) ;
select * from myemp as e where salary > (select avg(salary) from myemp as t where t.dep_id = e.dep_id);
select * from city;
select * from employees;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id having dep_id in (30,70);
select * from employees;
select *, case officecode when 1 then 'USA' when 2 then 'Germany' end as mycol from employees;
select firstname, case officecode when 1 then 'USA' when 2 then 'Germany' end as mycol from employees;
select firstname, officecode, case officecode when 1 then 'USA' when 2 then 'Germany' end as mycol from employees;
select * from employees;
select firstname, officecode,reportsto, case when officecode=1 then 'USA' when reportsto = 1056 then 'BLAH' end  as new_col from employees;
exit
use learndb;
select hire_date, year(hire_date) from myemp;
select hire_date, year(hire_date) from myemp limit 10;
select dep_id,avg(salary) from myemp group by dep_id;
select dep_id,count(*) from myemp group by dep_id;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id;
select count(*) from myemp;
select avg(salary) from myemp;
select avg(salary), max(salary), min(salary) from myemp;
drop table students;
create table students( sid integer UNIQUE,
sname varchar(20) NOT NULL,
age integer CHECK(age > 18),
course varchar(20) );
create table students( sid integer UNIQUE, sname varchar(20) NOT NULL, age integer CHECK(age > 18), course varchar(20) );
desc students;
insert into students values(1,'Tom',23,'Mysql');
select * from students;
insert into students values(1,'Jon',23,'Mysql');
insert into students values(2,'Jon',23,'Mysql');
select * from students;
insert into students values(3, null, 23, 'Analytics');
insert into students (sid, age, course) values (4,23,'Mysql');
alter table students modify column sname varchar(20) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students (sid, age, course) values (4,23,'Mysql');
select * from students;
insert into students values(3, null, 23, 'Analytics');
insert into students values(5,'Mary',17,'Analytics');
insert into students values(5,'Mary',27,'Analytics');
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(50) );
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
SELECT * FROM AUTHORS;
SELECT * FROM BOOKS;
delete from authors where authorid = 1;
SELECT * FROM AUTHORS;
SELECT * FROM books;
update authors set authorid = 88 where authorid = 8;
SELECT * FROM AUTHORS;
SELECT * FROM books;
exit
use learndb;
create table ttest(id integer, name char(10));
insert into ttest values(1,'Hi'),(1,'Hello');
alter table ttest add constraint pkey primary key(id);
delete from ttest where name='hi';
alter table ttest add constraint pkey primary key(id);
desc ttest;
drop table ttest;
show tables;
create table test (id integer, name char(20));
insert into test values(1,'Tom'),(1,'Jon');
alter table test add constraint pkey PRIMARY KEY(id) ;
delete from test where name='jon';
select * from test;
alter table test add constraint pkey PRIMARY KEY(id) ;
desc test;
select * from test;
drop table test;
create table test (id integer primary key auto_increment, name char(20));
desc test;
insert into test values('Tom');
insert into test (name) values('Tom');
select * from test;
insert into test (name) values('Jon');
select * from test;
insert into test (name) values('James'),('Jim'),('Tim');
select * from test;
delete from test;
select * from test;
insert into test (name) values('Jon');
select * from test;
insert into test (name) values('James'),('Jim'),('Tim');
select * from test;
truncate test;
select * from test;
insert into test (name) values('Jon');
select * from test;
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select * from drinks cross join meals;;
select mealname, rate from meals cross join drinks;
select mealname, meals.rate from meals cross join drinks;
select meals.mealname, meals.rate, drinks.rate from meals cross join drinks;
select m.mealname, m.rate,d.rate from meals as m cross join drinks as d;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mv.id = mm.movieid;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select * from parents;
show tables;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
exit
use learndb;
create table parents(Id integer, Name varchar(20), Age integer,ParentId integer);
insert into parents values(1,'Jonathan',5,3),
(2,'Alexandra',7,3),
(3,'Barbara',30,4),
(4,'Tom',50,6),
(5,'George',55,6),
(6,'Amy',80,7),
(7,'Josephine',99,35);
insert into parents values(1,'Jonathan',5,3), (2,'Alexandra',7,3), (3,'Barbara',30,4), (4,'Tom',50,6), (5,'George',55,6), (6,'Amy',80,7), (7,'Josephine',99,35);
select * from parents;
select * from parents child join parents par on child.parentId = par.id;
show tables;
select * from employees;
select * from city;
select * from emplpoyees;
select * from employees;
select * from city;
select emp.employeenumber, emp.firstname,emp.lastname,city.city_name, city.latitude, city.longitude 
from employees as emp left join city 
on emp.officode = city.id;
select emp.employeenumber, emp.firstname,emp.lastname,city.city_name, city.latitude, city.longitude  from employees as emp left join city  on emp.officode = city.id;
select emp.employeenumber, emp.firstname,emp.lastname,city.city_name, city.latitude, city.longitude  from employees as emp left join city  on emp.officecode = city.id;
select emp.employeenumber, emp.firstname,emp.lastname,city.city_name, city.latitude, city.longitude  from employees as emp  join city  on emp.officecode = city.id;
select * from parents;
select child.name,child.age,p.name,p.age 
from parents as child join parents as p
on child.parentid = p.id;
select child.name,child.age,p.name,p.age  from parents as child join parents as p on child.parentid = p.id;
select * from students;
insert into students values(6,'Harry', 24,'Magic');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Potter', 28,'Magic');
select * from students;
rollback;
select * from students;
set autocommit = 1;
create table tt (id char);
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
insert into tt values('a');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a');
insert into tt values('b');
savepont sb;
savepoint sb;
insert into tt values('c');
insert into tt values('d');
savepoint sd;
insert into tt values('e');
insert into tt values('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('f');
select * from tt;
rollback;
select * from tt;
select * from myemp limit 10;
select first_name, last_name, job_id, salary from myemp limit 10;
create view myview as select first_name, last_name, job_id, salary from myemp;
select * from myview limit 10;
select mm.first_name, mm.last_name, mv.title from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from authors;
create view myview as select * from authors where authorid <= 20;
create view aview as select * from authors where authorid <= 20;
select * from aview;
insert into aview values (8,'Tom Cruise');
select * from authors;
select * from aview;
exit
use learndb;
select * from aview;
select * from myemp;
select * from myemp limit 10;
create view dep60 as select * from myemp where dep_id=60;
select * from dep60;
show create view aview;
select * from authors;
select * from aview;
insert into aview values(30,'Larry Collins');
drop view aview;
create view aview as select * from authors where authorid <=20 WITH CHECK OPTION;
insert into aview values(31,'Lara Dutt');
insert into aview values(19,'Lara Dutt');
select * from aview;
call myproc();
call myproc(5);
call myproc(10);
select * from myemp limit 10;
call proc_var(100);
call proc_var(103);
call myproc(10);
call myproc(5);
call myproc(7);
show tables;
select * from cats;
exit
use learndb;
select * from cats;
call heavy_cats('alfie');
call heavy_cats('Tigger');
call grades(51);
call grades(67);
call grades(87);
call grades(37);
call proc_case(44);
call proc_case(76);
select * from cats;
select *, case when weight > 5 then 'Heavy' end as status from cats;
select *, case when weight > 5 then 'Heavy' else 'Light' end as status from cats;
select * from marks;
select *, case when mark > 80 then 'Distinction' when mark > 60 then 'Fisrt Class' else 'Fail' end as grade from marks;
call simple_loop();
call simple_loop(6);
call simple_loop(4);
call proc_repeat(3);
call proc_repeat(5);
call proc_while(5);
exit
use learndb;
select * from stoodents;
call proc_except();
select myname from students;
call proc_except();
call proc_except(1);
call proc_except(2);
select * from payments;
desc payments;
insert into payments values(1,null);
desc fraud;
call may_payment(1,650);
select * from payments;
call may_payment(2,null);
select * from fraud;
select * from payments;
call may_payment(2,500);
select * from payments;
select * from fraud;
call may_payment(2,null);
select * from payments;
select * from fraud;
call may_payment(3,400);
select * from payments;
select * from fraud;
call may_payment(4,null);
select * from payments;
select * from fraud;
call proc_cursor();
exit
use learndb;
show tables;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call orders();
select * from orders;
select dep_id, mgr_id, count(*) from myemp;
select dep_id, mgr_id, count(*) from myemp group by dep_id, mgr_id;
select adddate('09-01-2024' interval 15 day);
select adddate('09-01-2024', interval 15 day);
select adddate('09-01-2024', interval 15 day) as new_date
;
select adddate('2024-01-09', interval 15 day) as new_date;
select * from patients;
select adddate(dob, interval 20 day) as new_date from patients;
select date_sub(dob, interval 20 day) as new_date from patients;
select * from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) as exp from myemp limit 10;
select * from marks;
select *, grade(mark) as grade from marks;
select *, grades(mark) as grade from marks;
exit
use learndb;
select * from books;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
select * from books;
update books set sales = sales + 2 where bookid = 5;
select * from books;
desc book_sales;
select * from book_sales;
update books set sales = sales + 6 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales + 3 where bookid = 5;
select * from books;
select * from book_sales;
show create table students;
use employees;
select count(*) from employees;
select * from employees limit 10;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
exit
use learndb;
desc students;
show indexes from students;
show create table students;
desc authors;
show indexes from authors;
select dep_id, max(salary) from myemp group by dep_id;
select * from myemp limit 10;
select dep_id, max(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, avg(salary) over (partition by dep_id) as avg_sal from myemp limit 20;
select first_name, last_name, dep_id, avg(salary) over (partition by dep_id) as avg_sal, max(salary) over ( partition by dep_id) as max_sal from myemp limit 20;
select first_name, last_name, dep_id, avg(salary) over w as avg_sal, max(salary) over w as max_sal from myemp window w as (partition by dep_id) limit 20;
select * from (select first_name, last_name, salary, o.2*salary as bonus from myemp) as e;
select * from (select first_name, last_name, salary, 0.2*salary as bonus from myemp) as e;
select * from (select first_name, last_name, salary, 0.2*salary as bonus from myemp) as e
where e.bonus > 5000;
select * from (select first_name, last_name, salary, 0.2*salary as bonus from myemp) as e where e.bonus > 5000;
select * from (select first_name, last_name, salary, 0.2*salary as bonus from myemp) as e where e.bonus > 2000;
with cte as (select first_name, last_name, salary, 0.2*salary as bonus from myemp)
select * from cte where bonus > 2000;
with cte as (select first_name, last_name, salary, 0.2*salary as bonus from myemp) select * from cte where bonus > 2000;
select first_name, last_name, dep_id, avg(salary) over w as avg_sal, max(salary) over w as max_sal from myemp window w as (partition by dep_id) limit 20;
select first_name, last_name, dep_id, salary, max(salary) over w as max_sal from myemp window w as (partition by dep_id) limit 20;
with e as (select first_name, last_name, dep_id, salary, max(salary) over w as max_sal from myemp window w as (partition by dep_id))
select * from e where salary = max_sal;
with e as (select first_name, last_name, dep_id, salary, max(salary) over w as max_sal from myemp window w as (partition by dep_id)) select * from e where salary = max_sal;
select * from cats;
with e as (select name, breed,weight, avg(weight) over ( partition by breed) as avg_wt from cats)
select * from e where weight > avg_wt;
with e as (select name, breed,weight, avg(weight) over ( partition by breed) as avg_wt from cats) select * from e where weight > avg_wt;
select * from marks;
insert into marks values (7,'Pinky',56),(8,'Tommy',78),(9,'Jimmy',56);
select * from marks;
select *, rank() over ( order by mark desc) as rnk from marks;
select *, dense_rank() over ( order by mark desc) as rnk from marks;
select first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp limit 10;
with e as (select first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp)
select * from e where rnk = 3;
with e as (select first_name, last_name, salary, dense_rank() over (order by salary desc) as rnk from myemp) select * from e where rnk = 3;
exit
use learndb;
select * from sales;
select *, dense_rank() over (partition by fiscal_year order by sale desc) as rnk from sales;
select * from marks;
select *, percent_rank() over (order by mark desc) as percent from marks;
select *, percent_rank() over (order by mark) as percent from marks;
select * from marks;
select * from trains;
select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains;
with e as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains)
select *, subtime(nxt_station,time) as jrn_time from e;
with e as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains) select *, subtime(nxt_station,time) as jrn_time from e;
create table gdp(fiscal_year year(4), gdp integer);
insert into gdp values('1990',150);
select * from gdp;
desc gdp;
insert into gdp values('1991',130),('1992',140),('1993',138),('1994',142),('1995',128),('1996',210),('1997',213);
select * from gdp;
drop table if exists gdp;
create table gdp(fiscal_year year(4), gdp integer);
insert into gdp values('1990',150),('1991',130),('1992',140),('1993',138),('1994',142),('1995',128),('1996',210),('1997',213);
select * from gdp;
select *,lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp;
with e as (select *,lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp)
select *, (nxt_gdp - gdp)/gdp as pct_chg from e;
with e as (select *,lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp) select *, (nxt_gdp - gdp)/gdp as pct_chg from e;
select * from students_d;
select *, lead(attendance,1) over (partition by student_id order by date_id) as day2 , lead(attendance,2) over(partition by student_id order by date_id) as day3 from students_d;
with e as (select *, lead(attendance,1) over (partition by student_id order by date_id) as day2 , lead(attendance,2) over(partition by student_id order by date_id) as day3 from students_d) select distinct student_id from e where attendance='p' and day2='p' and day3='p';
exit
use learndb;
select * from office;
show tables;
select * from offices;
select * from employees;
select dep_id, salary, first_name from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name from myemp where dep_id = 70 union select last_name from myemp where dep_id = 60;
select first_name, dep_id from myemp where dep_id = 70 union select last_name, dep_id from myemp where dep_id = 60;
use classicmodels;
show tables;
select * from customers;
use learndb;
select * from myemp where salary = (select max(salary) from myemp);
select * from myemp where salary > (select avg(salary) from myemp);
select * from employees;
select * from offices;
select * from employees limit 10;
select * from offices;
select officecode from offices where country='usa';
select * from employees where officecode in (select officecode from offices where country='usa');
select * from myemp e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select first_name,dep_id from myemp where dep_id = 60 union select email,dep_id from myemp where dep_id=50;
select first_name,dep_id from myemp where dep_id = 60 union select email,dep_id from myemp where dep_id=30;
select * from rentals;
show create table rentals;
use classicmodels;
select * from customers limit 10;
select custometnumber, customername, addressline1, addressline2,city,state from customers limit 10;
select customernumber, customername, addressline1, addressline2,city,state from customers limit 10;
select customernumber, customername, addressline1, addressline2,city,state from customers limit 25;
select customernumber, customername, addressline1, addressline2,city,state from customers where addressline1 is null;
select customernumber, customername, addressline1, addressline2,city,state from customers where city is null;
select customernumber, customername, addressline1, coalesce(addressline2,city,state) as address2 from customers where city is null;
select customernumber, customername, addressline1, coalesce(addressline2,city,state) as address2 from customers ;
select coalesce(null,null,'Hi',null) as msg;
select coalesce(null,null,'Hi','Hello') as msg;
select coalesce('Hey',null,'Hi','Hello') as msg;
exit
use learndb;
exit
use excelrdb;
show tables;
insert into students values(1,'Peter',20,'Mysql');
insert into students values(2,'Mary',25,'Analytics');
select * from students;
create table patients(pid integer, pname varchar(20), dob date, toa datetime);
desc patients;
insert into patients(1,'Lara','1997-07-23','2023-09-07 07:30:00');
insert into patients values(1,'Lara','1997-07-23','2023-09-07 07:30:00');
insert into patients values(2,'Thomas','1979-03-29','2023-09-07 19:30:00');
select * from patients;
exit
use excelrdb;
select * from patients;
desc patients;
create table patients(id integer);
create table if not exists patients(id integer);
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(20);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
show tables;
create table test(id integer, name varchar(20));
show tables;
drop table test;
show tables;
select * from students;
insert into students values(3,'Jim',null,89);
select * from students;
insert into students (std_id, sname, marks) values(4,'Pete',77);
select * from students;
insert into students values(5,'Harry','Magic',90),(6,'Potter','Magic',99),(7,'Kate','Dance',89),(9,'Meghan','Cooking',67);
select * from students;
update students set sname = 'Catherine' where std_id=7;
select * from students;
update students set marks=100 where sname='pete';
select * from students;
update students set course = 'MySql' where course=null;
update students set course = 'MySql' where course is null;
select * from students;
update students set sname='James', course='Analytics', marks=75 where std_id=3;
select * from students;
update students set course='Mysql';
select * from students;
delete from students where std_id=5;
select * from students;
delete from students where marks is null;
select * from students;
delete from students;
select * from students;
insert into students values(5,'Harry','Magic',90),(6,'Potter','Magic',99),(7,'Kate','Dance',89),(9,'Meghan','Cooking',67);
select * from students;
truncate students;
select * from students;
exit
use batch13;
show create table authors;
show tables;
use employees;
show tables;
use information_schema;
show tables;
select * from tables;
select * from tables limit 2;
select table_name , table_schema from information_schema.tables where table_schema in ('batch13', 'employees','practicedb');
exit
use xcelrdb;
use excelrdb;
select * from film;
use batch13;
create table patients(id integer);
create table if not exists patients(id integer);
use excelrdb;
select * from film where releasedate between '2000-01-01' and '2000-12-31';
select title from film where releasedate between '2000-01-01' and '2000-12-31';
exit
use batch13;
select hire_date, year(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id order by dep_id;
select dep_id, count(*) from myemp group by dep_id order by dep_id;
select dep_id, count(*) num_emp from myemp group by dep_id order by num_emp desc;
select * from employees limit 10;
select dep_id, max(salary) from myemp ;
select dep_id, max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id having dep_id in (100,90,70);
exit
use excelrdb;
exit
use batch13;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors( authorid integer PRIMARY KEY, name varchar(100));
create table books(bookid integer PRIMARY KEY, title varchar(255), aid integer , 
FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
create table books(bookid integer PRIMARY KEY, title varchar(255), aid integer ,  FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
insert into Authors values(1,'J K Rowling');
insert into Authors values(2,'Thomas Hardy');
insert into Authors values(3,'Oscar Wilde');
insert into Authors values(4,'Sidney Sheldon');
insert into Authors values(5,'Alistair MacLean');
insert into Authors values(6,'Jane Austen');
insert into Authors values(7,'Chetan Bhagat');
insert into Authors values(8,'Oscar Wilde');
insert into Books values(1,'Harry Potter and the Philosopher\134's Stone',1);
insert into Books values(2,'Harry Potter and the Chamber of Secrets',1);
insert into Books values(3,'Harry Potter and the Half-Blood Prince',1);
insert into Books values(4,'Harry Potter and the Goblet of Fire',1);
insert into Books values(5,'Night Without End',5);
insert into Books values(6,'Fear is the Key',5);
insert into Books values(7,'Where Eagles Dare',5);
insert into Books values(8,'Sense and Sensibility',6);
insert into Books values(9,'Pride and Prejudice',6);
insert into Books values(10,'Emma',6);
insert into Books values(11,'Five Point Someone',7);
insert into Books values(12,'Two States',7);
insert into Books values(13,'Salome',8);
insert into Books values(14,'The Happy Prince',8);
SELECT * from authors;
SELECT * from books;
delete from authors where authorid = 1;
SELECT * from authors;
SELECT * from books;
update authors set authorid = 80 where authorid = 8;
SELECT * from authors;
SELECT * from books;
exit
use excelrdb;
select * from authors;
select * from books;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(100));
desc authors;
desc students;
create table books(
bookid integer PRIMARY KEY,
title varchar(255),
aid integer,
FOREIGN KEY(aid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255), aid integer, FOREIGN KEY(aid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
select * from authors;
select * from books;
|
|     14 | The Happy Prince                         |    8 |
select * from authors;
select * from books;
delete from authors where authorid = 1;
select * from authors;
select * from books;
update authors set authorid = 80 where authorid = 8;
select * from authors;
select * from books;
desc books;
exit
use batch13;
drop table test;
create table test(id integer primary key auto_increment, name varchar(20), age ineteger);
create table test(id integer primary key auto_increment, name varchar(20), age integer);
insert into test (name, age) values('Jon',23);
select * from test;
insert into test (name, age) values('Tom',23);
select * from test;
insert into test (name, age) values('Hugh',33);
select * from test;
delete from test;
select * from test;
insert into test (name, age) values('Tom',23);
select * from test;
insert into test (name, age) values('Hugh',33);
select * from test;
truncate test;
insert into test (name, age) values('Tom',23);
select * from test;
show create table test;
show create table ord;
desc ord;
desc test;
select * from test;
insert into test values(5,'Jim',11);
select * from test;
insert into test (name, age) values('Tim',57);
select * from test;
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select title, first_name, last_name from movies join members on movieid = id;
select title, first_name, last_name from movies left join members on movieid = id;
select * from movies;
select * from members;
select title, first_name, last_name from movies left join members on movieid = id;
select title, first_name, last_name from movies right join members on movieid = id;
select * from movies right join members on movieid = id;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate, drinkname from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
select mealname,  drinkname, meals.rate + drinks.rate as total_cost from meals cross join drinks;
exit
use excelrdb;
select * from test;
delete from test;
insert into test(name, age) values('Kate', 37);
delete from test;
insert into test(name, age) values('Kate', 37);
select * from test;
truncate test;
select * from test;
insert into test(name, age) values('Kate', 37);
select * from test;
show create table patients;
show create table test;
select * from movies;
select * from members;
select * from movies inner join members on movieid=id;
select title, first_name, category from movies inner join members on movieid=id where category='animations';
select * from authors;
select * from books;
select title, name from authors inner join books on aid = authorid;
select ordid,pname,quantity from ord inner join prod on prod.prodid = ord.prodid;
use batch13;
select ordid,pname,quantity from ord inner join prod on prod.prodid = ord.prodid;
select ordid,pname,quantity from ord inner join prod on prod.prodid = ord.prodid order by ordid;
exit
use batch13;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name 
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 20;
select emp.emp_id, emp.first_name, emp.last_name, mgr.first_name, mgr.last_name  from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select * from parents;
select child.name, child.age, parent.name, parent.age
from parent as parent join parents as child
on child.parent_id = parent.id;
select child.name, child.age, parent.name, parent.age from parent as parent join parents as child on child.parent_id = parent.id;
select child.name, child.age, parent.name, parent.age from parents as parent join parents as child on child.parentid = parent.id;
select * from movies;
select * from members;
exit
use excelrdb;
select * movies;
select * from movies;
select * from members;
select mv.title, mm.first_name, mm.last_name 
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name  from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name  from movies as mv right join members as mm on mv.id = mm.movieid;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select * from meals cross join drinks cross join patients;
select m.mealname, d.drinkname, m.rate
from meals as m cross join drinks as d;
select m.mealname, d.drinkname, m.rate from meals as m cross join drinks as d;
select * from meals cross join drinks cross join patients;
select * from meals cross join drinks;
select m.mealname, d.drinkname, m.rate+d.rate as total from meals as m cross join drinks as d;
select emp_id, first_name, last_name, mgr_id from myemp limit 10;
select emp.first_name as ename, emp.last_name elname, mgr.first_name as mname, mgr.last_name as mlname
from myemp as emp join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 20;
select emp.first_name as ename, emp.last_name elname, mgr.first_name as mname, mgr.last_name as mlname from myemp as emp join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select * from parents;
select c.name, c.age , p.name, p.age from parents as c join parents as p on c.parentid = p.id;
exit
use batch13;
select * from students;
use batch13;
select * from students;
insert into students values(6,'Meghan',33,null, 'Dance', 88);
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Kete',33,null, 'Dance', 88);
select * from students;
rollback;
select * from students;
set autocommit = 1;
create table tt (id char);
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('e'),('f');
select * from tt;
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values('a'),('b');
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
rollback to sd;
rollback to sb;
insert into tt values('g'),('h');
savepoint sh;
rollback ;
select * from tt;
select * from myemp limit 5;
select first_name, last_name, job_id, salary limit 10;
select first_name, last_name, job_id, salary from myemp  limit 10;
create view myview as select first_name, last_name, job_id, salary from myemp;
select *from myview;
select *from myview limit 10;
select mv.title, mm.first_name, mm.last_name
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name from movies as mv left join members as mm on mv.id = mm.movieid;
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on
mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull(mm.last_name,'-') as lname from movies as mv left join members as mm on mv.id = mm.movieid;
select * from rentals;
show tables;
select * from myemp limit 20;
create view dep60 as select * from myemp where dep_id=60;
select * from dep60;
select * from authors;
create view aview as select * from authors where authorid < 15;
select * from aview;
insert into aview values(8,'Tom Cruise');
select * from aview;
select * from authors;
insert into aview values(18,'Tom Hanks');
select * from aview;
drop view myview;
drop view AVIEW;
create view aview as select * from authors where authorid < 15 WITH CHECK OPTION;
insert into aview values(19,'Tom Hanks');
insert into aview values(14,'Tom Hanks');
delete from aview where authorid=9;
select * from aview;
exit
use excelrdb;
select hire_date, year(hire_date) from myemp limit 10;
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY) as result;
select * from patients;
select adddate(dob, interval 40 day) from patients;
select * from students;
insert into students values(6,'Kate',22,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Meghan',22,'Dance');
select * from students;
rollback;
select * from students;
insert into students values(7,'Meghan',22,'Dance');
select * from students;
commit;
rollback;
select * from students;
insert into students values(8,'Harry',22,'Dance'),(9,'Potter',33,45);
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(18,'larry',22,'Dance');
select * from students;
rollback;
select * from students;
create table tt (id char);
insert into tt values('a'),(,b');
;
insert into tt values('a'),('b');
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
select * from tt;
insert into tt values('c'),('d');
select * from tt;
rollback;
select * from tt;
insert into tt values('a'),('b');
select * from tt;
rollback;
select * from tt;
delete from tt;
start transaction;
insert into tt values('a'),('b');
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
select * from tt;
rollback to sb;
select * from tt;
insert into tt values('g'),('h');
select * from tt;
rollback;
select * from tt;
insert into tt values('g'),('h');
select * from tt;
rollback;
select * from tt;
case when id='g' then 'good' when id='h' then 'High' end as new from tt;
select id, case when id='g' then 'good' when id='h' then 'High' end as new from tt;
exit
use batch13;
call myproc();
call myproc(5);
call myproc(8);
call myproc(10);
call pos_neg(6);
call pos_neg(-6);
call pos_neg(0);
call pos_neg(-6);
call pos_neg(6);
call proc_elseif(4);
call proc_elseif(6);
call proc_elseif(16);
call proc_case(7);
call proc_case(1);
call myproc2();
exit
use excelrdb;
select * from myemp limit 10;
select first_name, last_name, email, hire_date from myemp limit 10;
create view myview as select first_name, last_name, email, hire_date from myemp;
select * from myview limit 10;
select * from myemp limit 25;
create view dep60 as select * from myemp where dep_id=60;
select * from dep60;
show tables;
select * from authors;
create view aview as select * from authors where authoid < 20;
create view aview as select * from authors where authorid < 20;
select * from aview ;
insert into aview values(8,'Tom Cruise');
select * from authors;
select * from aview;
insert into aview values(28,'Tom Hanks');
select * from aview;
select * from authors;
create view aview as select * from authors where authorid < 20;
drop view aview;
create view aview as select * from authors where authorid < 20 WITH CHECK OPTION;
insert into aview values(29,'Tom Hanks');
insert into aview values(19,'Tom Hanks');
select *, if(authorid > 10,"Hi",'Hello') as new from authors;
select * from marks;
select *, if(mark >50 , "Pass","Fail") as grade from marks;
select *, case when marks >= 80 then "Distinction" when marks >=60 then "First Class" else "Fail end as grade;
select *, case when marks >= 80 then "Distinction" when marks >=60 then "First Class" else "Fail" end as grade;
select *, case when marks >= 80 then "Distinction" when marks >=60 then "First Class" else "Fail" end as grade from marks;
select *, case when mark >= 80 then "Distinction" when mark >=60 then "First Class" else "Fail" end as grade from marks;
select *, case when salary > 10000 then "Excellent" when salary >= 5000 then "Good" else "OK" end as status from myemp limit 20;
select mv.title, mm.first_name, mm.last_name 
from movies as mv left join members as mm
on mv.id = mm.movieid;
select mv.title, mm.first_name, mm.last_name  from movies as mv left join members as mm on mv.id = mm.movieid;
create table coal(id integer, name varchar(29), add1 char(20), add2 char(20) , add3 char(20), city char(50), state char(30) );
insert into coal values(1,'Tom','123 AVenue',null,null,null,'Kerala');
select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname   from movies as mv left join members as mm on mv.id = mm.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname   from movies as mv left join members as mm on mv.id = mm
.movieid;
create view rentals as select mv.title, ifnull(mm.first_name,'-') as fname, ifnull( mm.last_name,'-') as lname   from movies as mv left join members as mm on mv.id = mm .movieid;
select * from rentals;
show create table students;
select * from authors;
exit
use batch13;
select * from marks;
call get_grade(3);
call get_grade(2);
call get_grade(3);
call simple_loop();
call simple_loop(3);
call simple_loop(5);
call simple_loop(2);
call repeat_loop(3);
call repeat_loop(4);
call while_loop(7);
exit
use batch13
select * from authors;
delete fro authors where authorid > 10 ;
delete from authors where authorid > 10 ;
select * from authors;
call proc_cursor();
select * from stoodents;
select publisher from authors;
call except();
call proc_except();
desc payments;
insert into payments values(100,null);
call make_payment(1,350);
select * from payments;
call make_payment(2,null);
desc fraud;
select now();
select * from fraud;
call make_payment(2, 750);
select * from payments;
call make_payment(3,null);
select * from payments;
select * from fraud;
call make_payment(4,700);
call make_payment(5, null);
select * from payments;
select * from fraud;
call proc_cursor();
exit
use excelrdb;
show create table coal;
insert into coal values(1,'Harry','123 Road','7th Street',null,'Bangalore','Karnataka'),
                        (2,'Meghan','123 Road',null,'Choolaimedu','Chennai','TN'),
                        (3,'William',null,'7th Street',null,'Bangalore','Karnataka'),
                        (4,'Kate','null,null,null,'Bangalore','Karnataka'),
                        (5,'Charles','123 Road','7th Street',null,'Bangalore',null),
                        (6,'Camilla',null,null,null,'Bangalore','Karnataka');
insert into coal values(1,'Harry','123 Road','7th Street',null,'Bangalore','Karnataka'),
                        (2,'Meghan','123 Road',null,'Choolaimedu','Chennai','TN'),
                        (3,'William',null,'7th Street',null,'Bangalore','Karnataka'),
                        (4,'Kate',null,null,null,'Bangalore','Karnataka'),
                        (5,'Charles','123 Road','7th Street',null,'Bangalore',null),
                        (6,'Camilla',null,null,null,'Bangalore','Karnataka');
insert into coal values(1,'Harry','123 Road','7th Street',null,'Bangalore','Karnataka'),                         (2,'Meghan','123 Road',null,'Choolaimedu','Chennai','TN'),                         (3,'William',null,'7th Street',null,'Bangalore','Karnataka'),                         (4,'Kate',null,null,null,'Bangalore','Karnataka'),                         (5,'Charles','123 Road','7th Street',null,'Bangalore',null),                         (6,'Camilla',null,null,null,'Bangalore','Karnataka');
select * from coal
;
select id, name, ifnull(add1,state) as address from coal;
select id, name, coalesce(add1,add2,add3,city,state) as address from coal;
select * from marks;
call myproc();
select * from marks;
call myproc();
select * from marks;
call myproc(2);
call myproc(5);
call myproc(6);
select employeenumber,concat(firstname,' ',lastname) as salesperson , count(employeenumber) as uniquecust
from employees 
group by employeenumber
order by uniquecust desc;
select employeenumber,concat(firstname,' ',lastname) as salesperson , count(employeenumber) as uniquecust from employees  group by employeenumber order by uniquecust desc;
use  classicmodels;
select employeenumber,concat(firstname,' ',lastname) as salesperson , count(employeenumber) as uniquecust
from employees 
group by employeenumber
order by uniquecust desc;
select employeenumber,concat(firstname,' ',lastname) as salesperson , count(employeenumber) as uniquecust from employees  group by employeenumber order by uniquecust desc;
use excelrdb;
select first_name, last_name, count(*) from myemp group by dep_id;
select "Hello" as msg;
call myproc(2);
call pos_neg(8);
call pos_neg(-8);
use classicmodels;
select * from order limit 2;
select * from orders limit 2;
select orderdate, quarter(orderdate) from orders limit 2;
select orderdate, quarter(orderdate) from orders limit 20;
select concat('Q', quarter(orderdate)) as quart from orders limit 20;
exit
use batch13;
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call place_orders();
select * from orders;
select * from myemp limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp limit 20;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select * from marks;
select *, get_grade(mark) from marks;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
select * from book_sales;
select * from books;
update books set sales = sales+3 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 11;
select * from books;
select * from book_sales;
update books set sales = sales+6 where bookid = 5;
select * from books;
select * from book_sales;
exit
use excelrdb;
call proc_elseif(4);
call proc_elseif(6);
call proc_elseif(18);
call get_grade(67);
call get_grade(87);
call get_grade(57);
call get_grade(27);
call proc_case(90);
call proc_case(29);
call proc_case(59);
call simple_loop();
call simple_loop(4);
call simple_loop(7);
call proc_repeat(4);
call proc_while(5);
call test();
select * from stoodents;
call except();
call proc_except();
exitt
;
exit
use batch13;
select * from myemp limit 10;
select dep_id, avg(salary) from myemp group by dep_id;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg from myemp limit 10;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg ,from myemp limit 10;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg,
max(salary) over(partition by dep_id) as max_sal,
min(salary) over(partition by dep_id) as min_sal
from myemp 
limit 10;
select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg, max(salary) over(partition by dep_id) as max_sal, min(salary) over(partition by dep_id) as min_sal from myemp  limit 10;
select * from (select first_name, last_name, salary, salary*0.2 as bonus from myemp) as e where bonus > 2500;
with e as (select first_name, last_name, salary, salary*0.2 as bonus from myemp)
select * from e where e.bonus > 2500;
with e as (select first_name, last_name, salary, salary*0.2 as bonus from myemp) select * from e where e.bonus > 2500;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg from myemp)
select * from e where salary > dep_avg;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over (partition by dep_id) as dep_avg from myemp) select * from e where salary > dep_avg;
with e as (select first_name, last_name, dep_id, salary, max(salary) over (partition by dep_id) as dep_max from myemp) select * from e where salary = dep_max;
select * from marks;
insert into marks values(8,'Kate',59),(9,'Charles',52),(10,'Hugh',59);
select * from marks;
select * from marks order by mark desc;
select *, rank() over (order by mark desc) as rnk from marks;
select *, dense_rank() over (order by mark desc) as rnk from marks;
select * from myemp order by salary desc limit 10;
select *, dense_rank() over (order by salary desc) as rnk from myemp;
with e as (select *, dense_rank() over (order by salary desc) as rnk from myemp)
select * from e where rnk = 3;
with e as (select *, dense_rank() over (order by salary desc) as rnk from myemp) select * from e where rnk = 3;
select * from myemp group by dep_id order by salary desc;
select *, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp;
select first_name, last_name,salary,dep_id, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp limit 30;
with e as (select first_name, last_name,salary,dep_id, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp) 
select * from e where rnk=2;
with e as (select first_name, last_name,salary,dep_id, dense_rank() over (partition by dep_id order by salary desc) as rnk from myemp)  select * from e where rnk=2;
select * from sales;
select *, dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * from marks order by mark desc;
select * , rank() over(order by mark desc) as rnk, dense_rank() over (order by mark desc) as drnk, row_number() over (order by mark desc) as rownum from marks;
select * from trains;
select * , lead(time,1) over(partition by train_id order by time) as nxt_station from trains;
with e as (select * , lead(time,1) over(partition by train_id order by time) as nxt_station from trains) 
select *, subtime(nxt_station,time) as journey_time from e;
with e as (select * , lead(time,1) over(partition by train_id order by time) as nxt_station from trains)  select *, subtime(nxt_station,time) as journey_time from e;
select * from students_d ;
exit
use excelrdb;
call proc_except();
select publisher from authors;
call proc_except(1);
call proc_except(11);
select publisher from authors;
call proc_except(11);
call proc_except(1);
desc payments;
insert into payments values(1,null);
call make_payment(1,300);
select * from payments;
call make_payment(2,null);
desc fraud;
select * from fraud;
call make_payment(2,500);
select * from payments;
select * from fraud;
call make_payment(3,null);
select * from payments;
select * from fraud;
call make_payment(4,1000);
call make_payment(5,null);
select * from payments;
select * from fraud;
call grade_cursor()
;
call grade_cursor();
call tt();
select * from products limit 10;
desc orders;
select * from orders;
call place_order();
select * from orders;
select hire_date, year(hire_date) from myem limit 10;
select hire_date, year(hire_date) from myemp limit 10;
select first_name, last_name, hire_date, experience(emp_id) from myemp limit 15;
select first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
select emp_id, first_name, last_name, hire_date, experience(emp_id) from myemp where experience(emp_id) < 10;
exit
use batch13;
select  * from students_d;
select *, lead(attendance,1) over (partition by student_id order by date_id
);
select *, lead(attendance,1) over (partition by student_id order by date_id  );
select *, lead(attendance,1) over (partition by student_id order by date_id ) as day2, lead(attendance,2) over ( partition by student_id order by date_id) as day3 from students_d;
with e as (select *, lead(attendance,1) over (partition by student_id order by date_id ) as day2, lead(attendance,2) over ( partition by student_id order by date_id) as day3 from students_d) select distinct student_id where attendance='p' and day2 = 'p' and day3 = 'p';
with e as (select *, lead(attendance,1) over (partition by student_id order by date_id ) as day2, lead(attendance,2) over ( partition by student_id order by date_id) as day3 from students_d) as e select distinct student_id from e where attendance='p' and day2 = 'p' and day3 = 'p';
with e as (select *, lead(attendance,1) over (partition by student_id order by date_id ) as day2, lead(attendance,2) over ( partition by student_id order by date_id) as day3 from students_d)  select distinct student_id from e where attendance='p' and day2 = 'p' and day3 = 'p';
select * from myemp where salary = (select max(salary) from myemp);
selectselect
;
select * from myemp where salary = (select max(salary) from myemp);
select max(salary) from myemp;
select * from offices;
select officecode, city,country from offices;
select * from employees;
use practicedb;
select * from employees limit 10;
select officecode, city,country from offices;
select officecode, city,country from offices where country = 'usa';
select officecode from offices where country = 'usa';
select * from employees where officecode in (select officecode from offices where country='usa');
select emp_id, first_name, last_name, salary , dep_id from myemp as e where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, salary , dep_id from myemp as e where  20 < (select count(*) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id 
from myemp as e
where 20 < (select count(*) from myemp where dep_id = e.dep_id);
select emp_id, first_name, last_name, dep_id  from myemp as e where 20 < (select count(*) from myemp where dep_id = e.dep_id);
show create table students;
desc students;
show indexes from students;
desc authors;
show indexes from authors;
use employees;
drop index hidx on employees;
select count(*) from employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date) ;
show indexes from employees;
select * from employees where hire_date >= '2000-01-01';
drop index hidx on employees;
show indexes from employees;
exit
use xecelrdb;
use excelrdb;
select * from bookjs;
select * from books;
alter table books add column sales integer default 0;
select * from books;
desc book_sales;
select * from book_sales;
update books set sales = sales + 3 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 5;
select * from books;
select * from book_sales;
show create table students;
show indexes from students;
show indexes from authors;
use employees;
select count(*) from employees;
select * from employees limit 10;
show indexes from employees;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
show indexes from employees;
exit
use batch13;
select * from movies;
select * from members;
select * from movies left join members on id = movieid;
select first_name, last_name from members union select title, category from movies;
use excelrdb;
select first_name, last_name, salary, dep_id, avg(salary) over (partition by dep_id) as dep_avg from myemp limit 25;
with e as (select first_name, last_name, salary, salary*0.2 as bonus from myemp)
select salary, bonus from e limit 15;
with e as (select first_name, last_name, salary, salary*0.2 as bonus from myemp) select salary, bonus from e limit 15;
select first_name, last_name, salary, salary*0.2 as bonus from myemp;
with e as (select first_name, last_name, salary, dep_id, avg(salary) over (partition by dep_id) as dep_avg from myemp)
select * from e where salary > dep_avg;
with e as (select first_name, last_name, salary, dep_id, avg(salary) over (partition by dep_id) as dep_avg from myemp) select * from e where salary > dep_avg;
select first_name, last_name, dep_id, count(*) over (partition by dep_id) as dep_cnt from myemp limit 20;
with e as (select first_name, last_name, dep_id, count(*) over (partition by dep_id) as dep_cnt from myemp)
select * from e where dep_cnt > 20;
with e as (select first_name, last_name, dep_id, count(*) over (partition by dep_id) as dep_cnt from myemp) select * from e where dep_cnt > 20;
select * from marks;
select *, rank() over (order by mark desc) as rnk from marks;
insert into marks values(7,'Kate',56),(8,'Charles',78),(9,'Bill',56);
select * from marks;
select * from marks order by marks desc;
select * from marks order by mark desc;
select *, rank() over (order by mark desc) as rnk from marks;
select *, dense_rank() over (order by mark desc) as rnk from marks;
select *, rann() over (order by mark desc) as rnk, dense_rank() over (order by mark desc) asds_rnk, row_number() over (order by mark desc) as rnum  from marks;
select *, rank() over (order by mark desc) as rnk, dense_rank() over (order by mark desc) asds_rnk, row_number() over (order by mark desc) as rnum  from marks;
select *, 
rank() over w as rnk, 
dense_rank() overw asds_rnk, 
row_number() over w as rnum  
from marks
window w as (order by mark desc);
select *,  rank() over w as rnk,  dense_rank() overw asds_rnk,  row_number() over w as rnum   from marks window w as (order by mark desc);
select *, 
rank() over w as rnk, 
dense_rank() overw asds_rnk, 
row_number() over w as rnum  
from marks
 w as (order by mark desc);
select *,  rank() over w as rnk,  dense_rank() overw asds_rnk,  row_number() over w as rnum   from marks  w as (order by mark desc);
select *, 
rank() over w as rnk, 
dense_rank() over w asds_rnk, 
row_number() over w as rnum  
from marks
 w as (order by mark desc);
select *,  rank() over w as rnk,  dense_rank() over w asds_rnk,  row_number() over w as rnum   from marks  w as (order by mark desc);
select *, rank() over (order by mark desc) as rnk, dense_rank() over (order by mark desc) asds_rnk, row_number() over (order by mark desc) as rnum  from marks;
select *, 
rank() over w as rnk, 
dense_rank() over w asds_rnk, 
row_number() over w as rnum  
from marks
window w as (order by mark desc);
select *,  rank() over w as rnk,  dense_rank() over w asds_rnk,  row_number() over w as rnum   from marks window w as (order by mark desc);
select *, 
rank() over (order by mark desc) as rnk, 
dense_rank() over (order by mark desc) as ds_rnk, 
row_number() over (order by mark desc) as rnum  
from marks;
select *,  rank() over (order by mark desc) as rnk,  dense_rank() over (order by mark desc) as ds_rnk,  row_number() over (order by mark desc) as rnum   from marks;
select *, 
rank() over w as rnk, 
dense_rank() over w as ds_rnk, 
row_number() over w as rnum  
from marks
window w as (order by mark desc);
select *,  rank() over w as rnk,  dense_rank() over w as ds_rnk,  row_number() over w as rnum   from marks window w as (order by mark desc);
select * from trains;
select *, lead(time,1) over ( partition by train_id order by time) as nxt_station from trains;
with cte as (select *, lead(time,1) over ( partition by train_id order by time) as nxt_station from trains)
select * , subtime(nxt_station,time) as jny_time from cte;
with cte as (select *, lead(time,1) over ( partition by train_id order by time) as nxt_station from trains) select * , subtime(nxt_station,time) as jny_time from cte;
select * from students_d;
exit
use excelrdb;
select *, lead(time,1) over (partition by train_id order by time) as nxt_station from trains;
with cte as (select *, lead(time,1) over (partition by train_id order by time) as nxt_station from trains)
select station, nxt_station from cte;
with cte as (select *, lead(time,1) over (partition by train_id order by time) as nxt_station from trains) select station, nxt_station from cte;
select * from myemp order by salary desc limit 10;
select * , dense_rank() over (order by salary desc ) as rnk from myemp limit 10;
with cte as (select * , dense_rank() over (order by salary desc ) as rnk from myemp)
select * from cte where rnk = 3;
with cte as (select * , dense_rank() over (order by salary desc ) as rnk from myemp) select * from cte where rnk = 3;
with cte as (select * , dense_rank() over (order by salary desc ) as rnk from myemp) select * from cte where rnk = 6;
with cte as (select * , dense_rank() over (partition by dep_id order by salary desc ) as rnk from myemp) select * from cte where rnk = 2;
select * , dense_rank() over (partition by dep_id order by salary desc ) as rnk from myemp;
select * from students_d;
select *, lead(attendance,1) over (partition by student_id order by time) as day2,
lead(attendance,2) over(partition by student_id order by time) as day3
from students_d;
select *, lead(attendance,1) over (partition by student_id order by time) as day2, lead(attendance,2) over(partition by student_id order by time) as day3 from students_d;
select *, lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over(partition by student_id order by date_id) as day3 from students_d;
with cte as (select *, lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over(partition by student_id order by date_
id) as day3 from students_d)
select student_id from cte where attendance='p' and day2='p' and day3='p';
with cte as (select *, lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over(partition by student_id order by date_ id) as day3 from students_d) select student_id from cte where attendance='p' and day2='p' and day3='p';
with cte as (select *, lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over(partition by student_id order by date_id) as day3 from students_d) select student_id from cte where attendance='p' and day2='p' and day3='p';
with cte as (select *, lead(attendance,1) over (partition by student_id order by date_id) as day2, lead(attendance,2) over(partition by student_id order by date_id) as day3 from students_d) select distinct student_id from cte where attendance='p' and day2='p' and day3='p';
select * from gdp;
select *, lead(gdp,1) as nxt_gdp from gdp;
select *, lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp;
select *, lead(gdp,1) over(order by fiscal_year) as nxt_gdp, (lead(gdp,1) over(order by fiscal_year) - gdp)/gdp as pct_change from gdp;
select *,  (lead(gdp,1) over(order by fiscal_year) - gdp)/gdp as pct_change from gdp;
with cte as (select *, lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp)
select *, (nxt_gdp - gdp)/gdp from cte;
with cte as (select *, lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp) select *, (nxt_gdp - gdp)/gdp from cte;
with cte as (select *, lead(gdp,1) over(order by fiscal_year) as nxt_gdp from gdp) select *, (nxt_gdp - gdp)*100/gdp from cte;
select * from cats;
select * , max(weight) over(partition by breed) as max_weight from cats;
with cte as (select * , max(weight) over(partition by breed) as max_weight from cats)
select * from cte where weight = max_weight;
with cte as (select * , max(weight) over(partition by breed) as max_weight from cats) select * from cte where weight = max_weight;
select * from sales;
select *, dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * from myemp where salary =  (salect max(salary) from myemp );
select * from myemp where salary =  (select max(salary) from myemp );
select max(salary) from myemp
;
select * from employee;
select * from employee limit 5;
select * from offices;
select officecode from offices where country='usa';
select * from employee where officecode IN (select officecode from offices where country='usa');
select * from myemp as e where salary = (select max(salary) from myemp where dep_id = e.dep_id);
select title, category from movies
union
select first_name, last_name from members;
select title, category from movies union select first_name, last_name from members;
select * from movies;
select * from members;
select * from movies left join members on id = movieid;
exit
select max(salry) from myemp;
use excelrdb;
select max(salary) from myemp;
select max(salary) from myemp group by dep_id;
select dep_id, max(salary) from myemp group by dep_id;
select emp_id,dep_id, max(salary) from myemp group by dep_id;
select *, select max(salary) over(partition by dep_id)  from myemp 
;
select *,  max(salary) over(partition by dep_id)  from myemp
;
exit
select * from patients;
use batch28;
select * from patients;
desc patients;
desc students;
insert into students values(1,'Tom', 23,'Mysql');
insert into students values(2,'Mary',20,'Mysql');
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
desc table students;
desc table;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
select * from students;
rename table myclass to students;
show tables;
create table test(id integer, name char(10));
show tables;
drop table students;
show tables;
drop table test;
show tables;
exit
use batch28;
insert into students values(3,'Lara','Analytics',88);
select * from students;
insert into students values(4,'Sara', null,78);
select * from students;
insert into students (std_id, sname, marks) values(5,'Jon',99);
select * from students;
insert into students values(6,'Harry','Magic',88),(7,'Potter','Magic',80),(8,'Pat','Namlytics',56);
select * from students;
To
;
select * from students;
update students set sname = 'Thomas' where std_id = 1;
select * from students;
update students set course = 'Data Science' where sname='pat';
select * from students;
update students set sname='Jonathan' where sname='jon';
select * from students;
update students set course='Mysql' where course = null;
update students set course='Mysql' where course is null;
select * from students;
update students set sname='Larry', course='Dance', marks=50 where std_id = 6;
select * from students;
update students set marks=100;
select * from students;
delete from students where course='mysql';
select * from students;
delete from students;
select * from students;
insert into students values(6,'Harry','Magic',88),(7,'Potter','Magic',80),(8,'Pat','Namlytics',56);
select * from students;
truncate students;
select * from students;
insert into students values(6,'Harry','Magic',88),(7,'Potter','Magic',80),(8,'Pat','Namlytics',56);
select * from students;
delete from students;
select * from students;
show create table patients;
show create table students;
select * from students;
desc students;
show create table students;
CREATE TABLE `students` (
  `std_id` int DEFAULT NULL,
  `sname` char(30) DEFAULT NULL,
  `course` char(20) DEFAULT NULL,
  `marks` int DEFAULT NULL
);
CREATE TABLE `students` (   `std_id` int DEFAULT NULL,   `sname` char(30) DEFAULT NULL,   `course` char(20) DEFAULT NULL,   `marks` int DEFAULT NULL );
desc students2;
show create table students;
exit
use batch28;
select * from employees;
select * from film;
exit
use batch28
select * from movies;
select * from members;
select * from movies inner join members on movieid = id;
select * from movies left join members on movieid = id;
select * from movies right join members on movieid = id;
select * rom movies;
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select title, first_name, last_name from movies left join members on id = movieid;
exit
use batch28;
select * from movies;
select * from members;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, rate, drinkname from meals cross join drinks;
select mealname, meals.rate, drinkname from meals cross join drinks;
select mealname, drinks.rate, drinkname from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate, drinks.rate from meals cross join drinks;
select * from movies left join members on movieid = id;
select mm.first_name, mm.last_name, mv.title
from movies as mv 
left join 
members as mm
on mv.id = mm.movieid;
select mm.first_name, mm.last_name, mv.title from movies as mv  left join  members as mm on mv.id = mm.movieid;
select meals.mealname, drinks.drinkname, meals.rate, drinks.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate+drinks.rate from meals cross join drinks;
select meals.mealname, drinks.drinkname, meals.rate+drinks.rate as total from meals cross join drinks;
select * from authors;
select * from books;
select * from books left join authors where authors.aythorid = books.authorid;
select * from books left join authors where authors.authorid = books.authorid;
select * from books left join authors on authors.authorid = books.authorid;
select * from books inner join authors on authors.authorid = books.authorid;
select * from authors inner join books on authors.authorid = books.authorid;
select * from authors left join books on authors.authorid = books.authorid;
select * from authors;
select * from books;
exit
use batch28;
select emp_id, first_name, last_name, mgr_id from myemp limit 20;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id,
mgr.emp_id,mgr.first_name, mgr.last_name
from myemp as emp
inner join
myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 25;
select emp.emp_id, emp.first_name, emp.last_name, emp.mgr_id, mgr.emp_id,mgr.first_name, mgr.last_name from myemp as emp inner join myemp as mgr on emp.mgr_id = mgr.emp_id limit 25;
select * from parent;
select * from parents;
select c.name, c.age, p.name, p.age
from parents as c
inner join 
parents as p
on c.parentid = p.id;
select c.name, c.age, p.name, p.age from parents as c inner join  parents as p on c.parentid = p.id;
select c.name, c.age, p.name, p.age from parents as c left join  parents as p on c.parentid = p.id;
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age>18),
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age>18), course varchar(30) );
desc students;
insert into students values(1,'Tom',23,'Mysql');
insert into students values(1,'Jon',23,'Mysql');
insert into students values(2,'Jon',23,'Mysql');
select * from students;
insert into students values(3,null,25,'Mysql');
insert into students (sid,age,course) values (4,27,'Analytics');
alter table students modify column sname varchar(30) NOT NULL DEFAULT 'Kumar';
desc students;
insert into students values(3,null,25,'Mysql');
insert into students (sid,age,course) values (4,27,'Analytics');
select * from students;
insert into students values(5,'Lara',16,'Mysql');
insert into students values(5,'Lara',26,'Mysql');
select * from authors;
select * from books;
drop ta ble authors;
drop table authors;
drop table books;
drop table authors;
create table authors(authorid integer PRIMARY KEY, name varchar(100) NOT NULL);
desc authors;
create table books(
bookid integer PRIMARY KEY,
title varchar(255) NOT NULL,
authorid integer,
FOREIGN KEY(authorid) REFERENCES authors(authorid)
ON DELETE CASCADE
ON UPDATE CASCADE);
create table books( bookid integer PRIMARY KEY, title varchar(255) NOT NULL, authorid integer, FOREIGN KEY(authorid) REFERENCES authors(authorid) ON DELETE CASCADE ON UPDATE CASCADE);
select * from authors;
select * from books;
delete from authors where authorid=1;
select * from authors;
select * from books;
update authors set authorid=88 where authorid=8;
select * from authors;
select * from books;
create table test(id integer PRIMARY KEY AUTO_INCREMENT,
name varchar(30),
age integer);
create table test(id integer PRIMARY KEY AUTO_INCREMENT, name varchar(30), age integer);
desc test;
insert into test (name,age) values('Tom',37);
select * from test;
insert into test (name,age) values('Jon',23),('Tim',44),('Pat',77);
select * from test;
delete from test;
select * from test;
insert into test (name,age) values('Tom',37);
select * from test;
insert into test (name,age) values('Jon',23),('Tim',44),('Pat',77);
select * from test;
truncate  test;
select * from test;
insert into test (name,age) values('Tom',37);
select * from test;
truncate  test;
alter table test auto_increment 100;
insert into test (name,age) values('Tom',37);
select * from test;
insert into test (name,age) values('Mary',37);
select * from test;
exit
use batch28;
select * from students;
insert into students values(6,'Kia',23,'Dance');
select * from students;
rollback;
select * from students;
set autocommit = 0;
insert into students values(7,'Lia',27,'Dance');
select * from students;
rollback;
select * from students;
insert into students values(7,'Lia',27,'Dance');
commit;
select * from students;
rollback;
select * from students;
set autocommit = 1;
insert into students values(8,'Mia',27,'Dance');
select * from students;
rollback;
select * from students;
create table tt(id char);
start transaction;
insert into tt values('a');
insert into tt values('b');
insert into tt values('c');
select * from tt;
rollback;
select * from tt;
delete from tt;
select * from tt;
start transaction;
insert into tt values('a'),('b');
savepoint sb;
insert into tt values('c'),('d');
savepoint sd;
insert into tt values('e'),('f');
select * from tt;
rollback to sd;
select * from tt;
rollback to sb;
select * from tt;
commit;
insert into tt values('c'),('d');
select * from tt;
rollback;
select * from tt;
exit
use batch28;
select city, coalesce(addressline1,addressline2,state,country) as address from offices;
select * from offices;
select city, coalesce(addressline2,state,country) as address from offices;
select * from offices;
select city, addressline2, coalesce(addressline2,state,country) as address from offices;
select city, coalesce(addressline2,state,country) as addressline2 from offices;
create view offview as select city, state, country, territory from offices;
select * from offview;
show tables;
select * from myemp;
select * from myemp limit 15;
create dep60 as select * from myemp where dep_id = 60;
create view dep60 as select * from myemp where dep_id = 60;
select * from dep60;
exit
use batch28;
select * from myview;
select * from offview;
alter view offview (city, state, officecode) as select city, state, officecode from offices;
select * from offview;
alter view offview  as select city, state,country, officecode from offices;
select * from offview;
drop view offview;
create view aview as select * from authors where authorid < 20;
select * from authors;
select * from aview;
insert int aview values(8,'Larry Collins');
insert into aview values(8,'Larry Collins');
select * from aview;
select * from authors;
insert into aview values(25,'Tom Hanks');
select * from aview;
select * from authors;
drop view aview;
create view aview as select * from authors where authorid < 20 WITH CHECK OPTION;
insert into aview values(24,'Jon Hamm');
insert into aview values(14,'Jon Hamm');
select * from authors;
select * from aview;
alter view aview as select * from aview where authorid < 10;
alter view aview as select * from authors where authorid < 10;
select * from aview;
select * from authors;
call myproc();
call myproc(5);
call myproc(7);
call myproc(10);
call myproc(5,7);
call test();
call test(2);
desc authors;
call test(2);
exit
use batch28;
select * from myemp limit 10;
call calc_sal(100);
select * from myemp limit 10;
cal calc_sal(108);
call calc_sal(108);
call calc_sal(104);
select * from marks;
call grades(1);
call grades(2);
desc marks;
call grades(2);
select * from marks;
call grades(2);
call grades(1);
select * from marks;
call grades(2);
call grades(3);
call grades(4);
call case_ex(4);
exit
use batch28;
call simple_loop();
call simple_loop(2);
call simple_loop(3);
call repeat_loop(2);
call repeat_loop(3);
call while_loop(3);
select * from stoodents;
call except1();
select address from students;
call except1(1);
call except1(2);
exit
desc payments;
use batch28;
desc payments;
desc fraud;
select * from payments;
select * from fraud;
call catch_fraud(1,200);
select * from payments;
call catch_fraud(2,300);
select * from payments;
call catch_fraud(3,null);
select * from payments;
select * from fraud;
call catch_fraud(4,500);
select * from payments;
select * from fraud;
call catch_fraud(4,null);
select * from payments;
select * from fraud;
select * from marks;
select * from authors;
call proc_cursor();
select * from products;
select * from products limit 10;
desc orders;
select * from orders;
call stock();
select * from orders;
select * from cats;
use batch28;
select * from cats;
select first_name, last_name, hire_date, year(hire_date) from myemp limit 10;
select * from patients;
select dob , adddate(dob, interval 31 day) as newdate from patients;
select curdate(), current_date(), current_date ;
select now();
select * from patients;
select dob, date(dob), year(dob), day(dob), dayname(dob) , dayofmonth(dob) from patients;
select date(now()), now();
select * from patients;
select dob, quarter(dob) from patients;
select dob, concat(quarter(dob),'Q') as qrt from patients;
select * from patients;
select upper(pname) from patients;
select left(pname,1) from patients;
select first_name from myemp where left(firstname,1) IN ('a','e','i','o','u');
select first_name from myemp where left(first_name,1) IN ('a','e','i','o','u');
select left(pname,2) from patients;
select * from myemp limit 0;
select * from myemp limit 10;
select hire_date, experience(hire_date) from myemp limit 10;
select hire_date, experience(hire_date) as exp from myemp limit 10;
select * from books;
desc book_sales;
alter table books add column sales integer default 0;
select * from books;
update books set sales = sales + 3 where bookid = 5;
select * from books;
select * from book_sales;
update books set sales = sales + 6 where bookid = 10;
select * from books;
select * from book_sales;
update books set sales = sales + 1 where bookid = 5;
select * from books;
select * from book_sales;
select * from marks
;
select * from cats;
exit
use batch28;
select dep_id, max(salary) from myemp group by dep_id;
select * from myemp limit 10;
select dep_id , max(salary) from myemp group by dep_id;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, max(salary) over(partition by dep_id) as max_sal from myemp limit 15;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, max(salary) over(partition by dep_id) as max_sal ,from myemp limit 15;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, max(salary) over(partition by dep_id) as max_sal , min(salary) over(partition by dep_id) as min_sal from myemp limit 15;
select * from myemp where dep_id = 60;
select first_name, last_name, salary , dep_id from (select * from myemp where dep_id = 60) as e;
with e as (select * from myemp where dep_id = 60) 
select first_name, last_name, salary , dep_id from e;
with e as (select * from myemp where dep_id = 60)  select first_name, last_name, salary , dep_id from e;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal , min(salary) over(partition by dep_id) as min_sal from myemp limit 15;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal ,  from myemp limit 15;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal  from myemp limit 15;
with e as (concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal  from myemp)
select *, salary - avg_sal as differ from e limit 10;
with e as (concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal  from myemp) select *, salary - avg_sal as differ from e limit 10;
with e as (select concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal  from myemp) select *, salary - avg_sal as differ from e limit 10;
select concat(first_name,' ',last_name) as fullname, salary, dep_id, avg(salary) over(partition by dep_id) as avg_sal  from myemp limit 15;
select title, directorid, budgetdollars, sum(budgetdollars) over(partition by directorid) as total from film limit 15; 
select title, directorid, budgetdollars, (budgetdollars/sum(budgetdollars) over(partition by directorid))*100 as percent from film limit 15;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) as avg_sal from myemp)
select * from e where e.salary > e.avg_sal from e;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) as avg_sal from myemp) select * from e where e.salary > e.avg_sal from e;
with e as (select first_name, last_name, dep_id, salary, avg(salary) over(partition by dep_id) as avg_sal from myemp) select * from e where e.salary > e.avg_sal;
select title, directorid, oscarwins, max(oscarwins) over(partition by directorid) as max_oscars from film limit 30;
with e as (select title, directorid, oscarwins, max(oscarwins) over(partition by directorid) as max_oscars from film)
select * from e where e.oscarwins = e.max_oscars;
with e as (select title, directorid, oscarwins, max(oscarwins) over(partition by directorid) as max_oscars from film) select * from e where e.oscarwins = e.max_oscars;
with e as (select title, directorid, oscarwins, max(oscarwins) over(partition by directorid) as max_oscars from film) select * from e where e.oscarwins = e.max_oscars and e.max_oscars > 0;
select * from marks;
select *, rank() over(order by mark) from marks;
select *, rank() over(order by mark desc) from marks;
select *, rank() over(order by mark desc) as rnk from marks;
insert into marks values(7,'Pia',59),(8,'Ria',52),(9,'Kia',59);
select *, rank() over(order by mark desc) as rnk from marks;
select *, dense_rank() over(order by mark desc) as rnk from marks;
select *, row_number() over(order by marks desc) as rno, rank() over(order by mark desc) as rnk, dense_rank() over(order by mark desc) as dnsrnk from marks;
select *, row_number() over(order by mark desc) as rno, rank() over(order by mark desc) as rnk, dense_rank() over(order by mark desc) as dnsrnk from marks;
exit
use batch28;
exit
use batch28;
select * from myemp limit 10;
select first_name, last_name, dep_id, hire_date , dense_rank() over(partition by dep_id order by hire_date) as rnk from myemp limit 25;
select * from sales;
select *, dense_rank() over(partition by fiscal_year order by sale desc) as rnk from sales;
select * from concerts limit 10;
select * from trains;
select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains;
with cte as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains)
select *, subtime(nxt_station,time) as jrny_time from cte;
with cte as (select *, lead(time,1) over(partition by train_id order by time) as nxt_station from trains) select *, subtime(nxt_station,time) as jrny_time from cte;
select * from offices;
select * from employees;
select * from employees limit 10;
select * from employee limit 10;
select * from offices;
select * from myemp where salary = (select max(salary) from myemp);
select * from myemp where salary = (select min(salary) from myemp);
select * from offices;
select * from employee;
select first_name, last_name, dep_id, salary from myemp as e 
where salary > (select avg(salary) from myemp where dep_id = e.dep_id); 
select first_name, last_name, dep_id, salary from myemp as e  where salary > (select avg(salary) from myemp where dep_id = e.dep_id);
desc students;
show indexes from students;
desc authors;
show indexes from authors;
use employees;
select * from employees limit 10;
select count(*) from employees;
show indexes from employees;
drop index hidx on employees;
show indexes from employees;
select * from employees limit 10;
select * from employees where hire_date >= '2000-01-01';
create index hidx on employees(hire_date);
select * from employees where hire_date >= '2000-01-01';
exit
use batch25;
select * from students;
alter table students add column marks integer;
select * from students;
alter table students drop column age;
select * from students;
alter table students change column sid std_id integer;
select * from students;
desc students;
alter table students modify column sname varchar(30);
desc students;
show tables;
alter table students rename to myclass;
show tables;
select * from myclass;
rename table myclass to students;
show tables;
create table test(id integer, name char(20));
show tables;
drop table test;
show tables;
select * from students;
desc table students;
desc tables;
desc table;
select * from students;
insert into students values(3,'George',null,67);
select * from students;
insert into students (std_id, sname,marks) values (4,'Pete',77);
select * from students;
insert into students values(5,'Georgina',null,67),(6,'Hugh','Dance',88),(7,'Larry','Cooking',56);
select * from students;
update students set sname ='Tom' where std_id=1;
select * from students;
update students set marks = 98 where sname='hugh';
select * from students;
update students set marks = 0 where marks is null;
select * from students;
update students set marks = 50, course='Analytics' where std_id = 3;
select * from students;
update students set marks = 50;
select * from students;
delete from students where std_id=1;
select * from students;
delete from students where course = null;
select * from students;
delete from students where course is null;
select * from students;
delete from students;
select * from students;
exit
use batch25;
select * from students;
insert into students values(5,'Georgina',null,67),(6,'Hugh','Dance',88),(7,'Larry','Cooking',56);
select * from students;
truncate students;
select * from students;
show tables;
select * from person;
select distinct fname,lname from person;
select * from myemp limit 10;
select * from myemp order by salary limit 10;
select * from myemp order by salary;
select * from myemp order by hire_date;
select * from myemp order by hire_date desc;
select first_name, dep_id from myemp order by dep_id,first_name;
select salary, salary*0.15 as bonus from myemp order by bonus;
select salary, salary*0.15 as bonus from myemp where bonus > 2000;
select fist_name, last_name, salary, salary*0.15 as bonus from myemp order by bonus;
select first_name, last_name, salary, salary*0.15 as bonus from myemp order by bonus;
select * from myemp where dep_id=40;
select * from myemp where dep_id=60;
select * from myemp where salary > 10000;
select * from myemp where salary >= 10000;
select * from myemp where hire_date >= '2000-01-01';
select * from myemp where salary between 10000 and 15000;
select title,releasedate from film where releasedate between '2000-01-01' and '2000-12-31';
select title,releasedate from film where budgetdollars > boxofficedollars;
select * from myemp where dep_id != 80;
select * from myemp where salary > 10000 and dep_id = 80;
select * from myemp where salary > 10000 or dep_id = 60;
select * from myemp where dep_id=30  or dep_id = 60;
select * from myemp where dep_id=30  or dep_id = 60 or dep_id=40;
select * from myemp where dep_id in (60,30,40);
select * from myemp where dep_id not in (80,50);
select * from students;
select * from patients;
insert into patients values(3,'Hugh', null, now() );
select * from patients;
select * from patients where dob is null;
select * from patients where dob = null;
select * from patients where dob is not null;
exit
use batch25;
select * from myemp where first_name like 'a%';
select * from myemp where first_name like '%a';
select * from myemp where first_name like 'a%a';
select * from myemp where first_name like '%c%';
select * from myemp where first_name like '% %';
select * from myemp where first_name like 'a____';
select * from film where title like '%star%;
;
select * from film where title like '%star%';
select title from film where title like '%star%';
select first_name, hire_date, year(hire_date) from myemp limit 10;
select max(salary) from myemp;
select avg(salary) from myemp;
select distinct dep_id from myemp;
select concat(first_name,' ',last_name) as name from myemp;
select first_name, hire_date, year(hire_date) , month(hire_date), monthname(hire_date) from myemp limit 10;
select avg(salary) from myemp;
select dep_id, avg(salary) from myemp group by dep_id;
select dep_id, avg(salary) from myemp group by dep_id order by dep_id;
select dep_id, avg(salary) as avg_sal from myemp group by dep_id order by avg_sal desc;
select dep_id, mgr_id, avg(salary) as avg_sal from myemp group by dep_id,mgr_id order by avg_sal desc;
select dep_id, mgr_id, avg(salary) as avg_sal from myemp group by dep_id,mgr_id order by dep_id;
select dep_id, mgr_id, avg(salary) as avg_sal from myemp group by avg_sal order by avg_sal desc;
select dep_id, mgr_id, avg(salary) as avg_sal from myemp group by dep_id,mgr_id order by dep_id;
select dep_id, count(dep_id) from myemp group by dep_id order by dep_id;
select dep_id, min(salary), max(salary) from myemp group by dep_id order by dep_id;
select genreid, count(*) from film group by genreid;
select first_name, dep_id, avg(salary) from myemp group by dep_id;
select avg(salary) from myemp;
select * from movies;
select * from members;
select * from movies inner join members on id = movieid;
select * from movies inner join members on id = movieid where category='animations';
select * from movies join members on id = movieid;
select * from movies left join members on id = movieid;
select * from movies right join members on id = movieid;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
\134history
exit
use batch25;
select * from meals;
select * from drinks;
select * from meals cross join drinks;
select mealname, meals.rate,drinkname from meals cross join drinks;
select mealname, rate,drinkname from meals cross join drinks;
select m.mealname,m.rate, d.drinkname, d.rate
from meals as m cross join drinks as d;
select m.mealname,m.rate, d.drinkname, d.rate from meals as m cross join drinks as d;
select * from myemp limit 10;
select emp_id, first_name, last_name, mgr_id from myemp limit 15;
select emp.emp_id, emp.first_name as emp_fname, emp.last_name as emp_lname,
mgr.first_name as mgr_fname, mgr.last_name as mgr_lname
from myemp as emp inner join myemp as mgr
on emp.mgr_id = mgr.emp_id
limit 20;
select emp.emp_id, emp.first_name as emp_fname, emp.last_name as emp_lname, mgr.first_name as mgr_fname, mgr.last_name as mgr_lname from myemp as emp inner join myemp as mgr on emp.mgr_id = mgr.emp_id limit 20;
select * from parents;
select c.name as cname, c.age as cage, p.name as pname, p.age as page
from parents as c inner join parents as p
on c.parentid = p.id;
select c.name as cname, c.age as cage, p.name as pname, p.age as page from parents as c inner join parents as p on c.parentid = p.id;
select * from movies;
select * from members;
select * from movies left join members on movieid = id;
select film.title, genre.genre from film inner join genre on film.genreid = genre.genreid limit 20;
select film.title, genre.genre from film inner join genre on Film.genreid = genre.genreid limit 20;
select film.title, genre.genre from film inner join genre on FILM.genreid = genre.genreid limit 20;
select * from patients;
select * from patients where pname ='harry';
drop table students;
create table students(
sid integer UNIQUE,
sname varchar(30) NOT NULL,
age integer CHECK(age > 18) ,
course varchar(30) );
create table students( sid integer UNIQUE, sname varchar(30) NOT NULL, age integer CHECK(age > 18) , course varchar(30) );
desc students;
insert into students values(1,'James',23,'Mysql');
select * from students;
insert into students values(1,'Sam',25,'Mysql');
insert into students values(2,'Sam',25,'Mysql');
select * from students;
insert into students values(3,'Mary', 16,'Mysql');
insert into students values(3,'Mary', 26,'Mysql');
select * from students;
insert into students values(4,null, 34,'Dance');
insert into students (sid,age,course) values(4,34,'Dance');
alter table students modify column sname varchar(30) not null default 'Kumar';
desc students;
insert into students values(4,null, 34,'Dance');
insert into students (sid,age,course) values(4,34,'Dance');
select * from students;
exit
